main:
     addi64 $254, $254, -48
     addi64 $2, $254, 16
        lra $1, $0, :out of bounds matching 1.main.hello, world
         st $1, $254, 16, 8
       li64 $1, 12
         st $1, $254, 24, 8
     addi64 $1, $254, 32
        bmc $2, $1, 16
         ld $2, $254, 40, 8
         ld $1, $254, 32, 8
         st $1, $254, 0, 8
         st $2, $254, 8, 8
        li8 $5, 1
        li8 $4, 0
       li64 $3, 0
4:       ld $2, $254, 8, 8
         ld $1, $254, 0, 8
        jne $2, $3, :1
         cp $1, $4
        jmp :2
1:   addi64 $1, $1, 1
         st $1, $254, 0, 8
     addi64 $1, $2, -1
         st $1, $254, 8, 8
         cp $1, $5
2:     andi $1, $1, 255
        jeq $1, $0, :3
        jmp :4
3:       cp $1, $3
     addi64 $254, $254, 48
         tx
out of bounds matching 1.Iterator(Iter = out of bounds matching 1).for_each(func = out of bounds matching 1.main):
         cp $6, $1
       li64 $5, 0
        li8 $4, 0
        li8 $3, 1
8:       ld $1, $6, 8, 8
        jne $1, $5, :5
         cp $1, $4
        jmp :6
5:       ld $1, $6, 0, 8
         ld $2, $6, 8, 8
     addi64 $1, $1, 1
         st $1, $6, 0, 8
     addi64 $1, $2, -1
         st $1, $6, 8, 8
         cp $1, $3
6:     andi $1, $1, 255
        jeq $1, $0, :7
        jmp :8
7:     jala $0, $31, 0
out of bounds matching 1.main:
       jala $0, $31, 0
out of bounds matching 1.Iterator(Iter = out of bounds matching 1).next:
         cp $5, $1
       li64 $2, 0
         ld $1, $5, 8, 8
        jne $1, $2, :9
        li8 $1, 0
       li64 $2, -6148914691236517206
        swa $2, $1
        jmp :a
9:       ld $1, $5, 0, 8
         ld $4, $5, 8, 8
        li8 $3, 1
         ld $2, $1, 0, 1
     addi64 $1, $1, 1
         st $1, $5, 0, 8
     addi64 $1, $4, -1
         st $1, $5, 8, 8
         cp $1, $2
         cp $2, $3
a:      swa $1, $2
       jala $0, $31, 0
out of bounds matching 1.next:
         cp $5, $1
       li64 $2, 0
         ld $1, $5, 8, 8
        jne $1, $2, :b
        li8 $1, 0
       li64 $2, -6148914691236517206
        swa $2, $1
        jmp :c
b:       ld $1, $5, 0, 8
         ld $4, $5, 8, 8
        li8 $3, 1
         ld $2, $1, 0, 1
     addi64 $1, $1, 1
         st $1, $5, 0, 8
     addi64 $1, $4, -1
         st $1, $5, 8, 8
         cp $1, $2
         cp $2, $3
c:      swa $1, $2
       jala $0, $31, 0
out of bounds matching 1.byte_iter:
     addi64 $254, $254, -32
         cp $3, $1
         cp $1, $2
     addi64 $2, $254, 0
         st $3, $254, 0, 8
         st $1, $254, 8, 8
     addi64 $1, $254, 16
        bmc $2, $1, 16
         ld $2, $254, 16, 8
         ld $1, $254, 24, 8
        swa $1, $2
     addi64 $254, $254, 32
       jala $0, $31, 0