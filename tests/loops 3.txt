======== SOURCE ========
fn(): uint {
    i := 0
    loop if i == 4 break else {
        i += 1
    }
    return i
}
======== UNSCHEDULED SON ========
%16 = CInt: 1 [, %17]
%19 = Jmp: idepth: 0 [, %21]
%0 = Start: idepth: 0 [, %1, %2]
%20 = Jmp: idepth: 0, %14 [, %21]
%10 = CInt: 4 [, %11]
%17 = BinOp: +, %15, %16 [, %18]
%21 = Region: idepth: 0, %19, %20 [, %22, %23]
%3 = CInt: 0 [, %5]
%2 = Mem: %0 [, %4, %5]
%1 = Entry: idepth: 0, %0 [, %5, %6]
%23 = Jmp: idepth: 0, %21 [, %7]
%6 = Jmp: idepth: 0, %1 [, %7]
%14 = Else: idepth: 0, %12 [, %15, %18, %20]
%11 = BinOp: ==, %9, %10 [, %12]
%4 = Local: 8, %2 [, %5, %9, %15, %18, %24]
%18 = Store: %14, %8, %4, %17 [, %22]
%15 = Load: %14, %8, %4 [, %17]
%9 = Load: %7, %8, %4 [, %11]
%22 = Phi: %21, %8, %18 [, %8]
%5 = Store: %1, %2, %4, %3 [, %8]
%7 = Loop: idepth: 0, %6, %23 [, %8, %9, %12]
%12 = If: idepth: 0, %7, %11 [, %13, %14]
%24 = Load: %13, %8, %4 [, %25]
%8 = Phi: %7, %5, %22 [, %9, %15, %18, %22, %24, %25]
%13 = Then: idepth: 0, %12 [, %24, %25]
%25 = Return: idepth: 0, %13, %8, %24 []

======== OPTIMIZED SON ========
%23 = Jmp: idepth: 0, %14 [, %7]
%6 = Jmp: idepth: 0, %1 [, %7]
%1 = Entry: idepth: 0, %0 [, %6]
%14 = Else: idepth: 0, %28 [, %23]
%10 = CInt: 4 [, %28]
%27 = ImmBinOp: imm: 1, op: addi64, %26 [, %26]
%3 = CInt: 0 [, %26]
%7 = Loop: idepth: 0, %6, %23 [, %28, %26]
%0 = Start: idepth: 0 [, %1, %2]
%28 = IfOp: swapped: false, op: jne, idepth: 0, %7, %26, %10 [, %13, %14]
%26 = Phi: %7, %3, %27 [, %28, %25, %27]
%2 = Mem: %0 [, %25]
%13 = Then: idepth: 0, %28 [, %25]
%25 = Return: idepth: 0, %13, %2, %26 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %3 = CInt: 0
  %10 = CInt: 4
  %6 = Jmp: idepth: 2
%7 = Loop: idepth: 3, %6, %23
  %26 = Phi: %3, %27
  %28 = IfOp: swapped: false, op: jne, idepth: 4, %26, %10
%13 = Then: idepth: 0, %28
  %25 = Return: idepth: 0, %2, %26
%14 = Else: idepth: 5, %28
  %27 = ImmBinOp: imm: 1, op: addi64, %26
  %23 = Jmp: idepth: 6

======== REGISTER SELECTION ========
{ 1, 2, 1, 3, 1, 1, 3, 1 }

======== CODEGEN ========
main:
       li64 $13, 0
       li64 $14, 4
         cp $15, $13
1:      jne $15, $14, :0
         cp $1, $15
         tx
0:   addi64 $15, $15, 1
        jmp :1

======== EXECUTION ========
    li64 $13=0, 0
    li64 $14=0, 4
      cp $15=0, $13=0
     jne $15=0, $14=4, 9
  addi64 $15=0, $15, 1
     jmp -20
     jne $15=1, $14=4, 9
  addi64 $15=1, $15, 1
     jmp -20
     jne $15=2, $14=4, 9
  addi64 $15=2, $15, 1
     jmp -20
     jne $15=3, $14=4, 9
  addi64 $15=3, $15, 1
     jmp -20
     jne $15=4, $14=4, 9
      cp $1=0, $15=4
      tx