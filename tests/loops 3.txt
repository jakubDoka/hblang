======== SOURCE ========
fn(): uint {
    i := 0
    loop if i == 4 break else {
        i += 1
    }
    return i
}
======== UNSCHEDULED SON ========
%18 = Jmp: idepth: 0 [, %20]
%0 = Start: idepth: 0 [, %1, %2]
%19 = Jmp: idepth: 0, %14 [, %20]
%15 = CInt: 1 [, %16]
%10 = CInt: 4 [, %11]
%20 = Region: idepth: 0, %18, %19 [, %21, %22]
%3 = CInt: 0 [, %5]
%2 = Mem: %0 [, %4, %5]
%1 = Entry: idepth: 0, %0 [, %5, %6]
%22 = Jmp: idepth: 0, %20 [, %7]
%6 = Jmp: idepth: 0, %1 [, %7]
%14 = Else: idepth: 0, %12 [, %17, %19]
%16 = BinOp: +, %9, %15 [, %17]
%11 = BinOp: ==, %9, %10 [, %12]
%4 = Local: 8, %2 [, %5, %9, %17]
%17 = Store: %14, %8, %4, %16 [, %21]
%21 = Phi: %20, %8, %17 [, %8]
%5 = Store: %1, %2, %4, %3 [, %8]
%7 = Loop: idepth: 0, %6, %22 [, %8, %12]
%12 = If: idepth: 0, %7, %11 [, %13, %14]
%9 = Load: %8, %4 [, %11, %16, %23]
%8 = Phi: %7, %5, %21 [, %9, %17, %21, %23]
%13 = Then: idepth: 0, %12 [, %23]
%23 = Return: idepth: 0, %13, %8, %9 []

======== OPTIMIZED SON ========
%22 = Jmp: idepth: 0, %14 [, %7]
%6 = Jmp: idepth: 0, %1 [, %7]
%1 = Entry: idepth: 0, %0 [, %6]
%14 = Else: idepth: 0, %26 [, %22]
%10 = CInt: 4 [, %26]
%25 = ImmBinOp: imm: 1, op: addi64, %24 [, %24]
%3 = CInt: 0 [, %24]
%7 = Loop: idepth: 0, %6, %22 [, %24, %26]
%0 = Start: idepth: 0 [, %1, %2]
%26 = IfOp: swapped: false, op: jne, idepth: 0, %7, %24, %10 [, %13, %14]
%24 = Phi: %7, %3, %25 [, %26, %25, %23]
%2 = Mem: %0 [, %23]
%13 = Then: idepth: 0, %26 [, %23]
%23 = Return: idepth: 0, %13, %2, %24 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %3 = CInt: 0
  %10 = CInt: 4
  %27 = MachMove: %3
  %6 = Jmp: idepth: 2
%7 = Loop: idepth: 3, %6, %22
  %29 = Phi: %27, %28
  %26 = IfOp: swapped: false, op: jne, idepth: 4, %29, %10
%13 = Then: idepth: 0, %26
  %23 = Return: idepth: 0, %2, %29
%14 = Else: idepth: 5, %26
  %25 = ImmBinOp: imm: 1, op: addi64, %29
  %28 = MachMove: %25
  %22 = Jmp: idepth: 6

======== REGISTER SELECTION ========
{ 1, 2, 1, 1, 1, 1, 1, 1, 1, 1 }

======== CODEGEN ========
main:
       li64 $13, 0
       li64 $14, 4
1:      jne $13, $14, :0
         cp $1, $13
         tx
0:   addi64 $13, $13, 1
        jmp :1

======== EXECUTION ========
    li64 $13=0, 0
    li64 $14=0, 4
     jne $13=0, $14=4, 9
  addi64 $13=0, $13, 1
     jmp -20
     jne $13=1, $14=4, 9
  addi64 $13=1, $13, 1
     jmp -20
     jne $13=2, $14=4, 9
  addi64 $13=2, $13, 1
     jmp -20
     jne $13=3, $14=4, 9
  addi64 $13=3, $13, 1
     jmp -20
     jne $13=4, $14=4, 9
      cp $1=0, $13=4
      tx