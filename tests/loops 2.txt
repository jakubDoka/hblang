======== SOURCE ========
fn(): uint {
    return not_fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%1 = Mem: %0 [, %4]
%2 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %2, %1, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%1 = Mem: %0 [, %4]
%2 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %2, %1, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%2 = Entry: idepth: 0, %0
  %3 = CInt: 3
  %4 = Call: id: fn1, idepth: 0, %1, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(size: uint): uint {
    acc := 0
    y := 0
    loop if y == size break else {
        x := 0
        loop if x == size break else {
            acc += x * y
            x += 1
        }
        y += 1
    }
    return acc
}
======== UNSCHEDULED SON ========
%28 = CInt: 1 [, %29]
%37 = CInt: 1 [, %38]
%31 = Jmp: idepth: 0, %22 [, %32]
%30 = Jmp: idepth: 0 [, %32]
%22 = Else: idepth: 0, %20 [, %31]
%29 = BinOp: +, %17, %28 [, %35]
%35 = Phi: %32, %17, %29 [, %17]
%14 = CInt: 0 [, %17]
%21 = Then: idepth: 0, %20 [, %40]
%19 = BinOp: ==, %17, %18 [, %20]
%34 = Phi: %32, %25, %25 [, %25]
%38 = BinOp: +, %25, %37 [, %44]
%26 = BinOp: *, %17, %25 [, %27]
%32 = Region: idepth: 0, %30, %31 [, %33, %34, %35, %36]
%20 = If: swapped: false, idepth: 0, %16, %19 [, %21, %22]
%17 = Phi: %16, %14, %35 [, %19, %26, %29, %35]
%36 = Jmp: idepth: 0, %32 [, %16]
%40 = Jmp: idepth: 0, %21 [, %41]
%39 = Jmp: idepth: 0 [, %41]
%18 = Phi: %16, %9, %18 [, %19, %18, %42]
%42 = Phi: %41, %9, %18 [, %9]
%25 = Phi: %16, %8, %34 [, %26, %34, %34, %38]
%44 = Phi: %41, %8, %38 [, %8]
%5 = CInt: 0 [, %8]
%15 = Jmp: idepth: 0, %13 [, %16]
%27 = BinOp: +, %24, %26 [, %33]
%33 = Phi: %32, %24, %27 [, %24]
%16 = Loop: idepth: 0, %15, %36 [, %17, %18, %20, %24, %25]
%41 = Region: idepth: 0, %39, %40 [, %42, %43, %44, %45]
%9 = Phi: %7, %2, %42 [, %10, %18, %42]
%8 = Phi: %7, %5, %44 [, %10, %25, %44]
%45 = Jmp: idepth: 0, %41 [, %7]
%6 = Jmp: idepth: 0, %3 [, %7]
%3 = Entry: idepth: 0, %0 [, %6]
%2 = Arg: 0, %0 [, %9]
%13 = Else: idepth: 0, %11 [, %15]
%10 = BinOp: ==, %8, %9 [, %11]
%24 = Phi: %16, %23, %33 [, %27, %33, %43]
%43 = Phi: %41, %23, %24 [, %23]
%4 = CInt: 0 [, %23]
%7 = Loop: idepth: 0, %6, %45 [, %8, %9, %11, %23]
%0 = Start: idepth: 0 [, %1, %2, %3]
%11 = If: swapped: false, idepth: 0, %7, %10 [, %12, %13]
%23 = Phi: %7, %4, %43 [, %24, %43, %46]
%1 = Mem: %0 [, %46]
%12 = Then: idepth: 0, %11 [, %46]
%46 = Return: idepth: 0, %12, %1, %23 []

======== OPTIMIZED SON ========
%47 = ImmBinOp: imm: 1, op: addi64, %17 [, %17]
%14 = CInt: 0 [, %17]
%22 = Else: idepth: 0, %20 [, %36]
%49 = CondOp: op: jne, %17, %18 [, %20]
%26 = BinOp: *, %17, %25 [, %27]
%20 = If: swapped: false, idepth: 0, %16, %49 [, %21, %22]
%17 = Phi: %16, %14, %47 [, %49, %26, %47]
%36 = Jmp: idepth: 0, %22 [, %16]
%18 = Phi: %16, %9, %18 [, %49, %18, %9]
%25 = Phi: %16, %8, %25 [, %26, %25, %48]
%48 = ImmBinOp: imm: 1, op: addi64, %25 [, %8]
%5 = CInt: 0 [, %8]
%21 = Then: idepth: 0, %20 [, %45]
%15 = Jmp: idepth: 0, %13 [, %16]
%27 = BinOp: +, %24, %26 [, %24]
%16 = Loop: idepth: 0, %15, %36 [, %17, %18, %20, %24, %25]
%9 = Phi: %7, %2, %18 [, %50, %18]
%8 = Phi: %7, %5, %48 [, %50, %25]
%45 = Jmp: idepth: 0, %21 [, %7]
%6 = Jmp: idepth: 0, %3 [, %7]
%3 = Entry: idepth: 0, %0 [, %6]
%2 = Arg: 0, %0 [, %9]
%13 = Else: idepth: 0, %11 [, %15]
%50 = CondOp: op: jne, %8, %9 [, %11]
%24 = Phi: %16, %23, %27 [, %27, %23]
%4 = CInt: 0 [, %23]
%7 = Loop: idepth: 0, %6, %45 [, %8, %9, %11, %23]
%0 = Start: idepth: 0 [, %1, %2, %3]
%11 = If: swapped: false, idepth: 0, %7, %50 [, %12, %13]
%23 = Phi: %7, %4, %24 [, %24, %46]
%1 = Mem: %0 [, %46]
%12 = Then: idepth: 0, %11 [, %46]
%46 = Return: idepth: 0, %12, %1, %23 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%3 = Entry: idepth: 1, %0
  %5 = CInt: 0
  %2 = Arg: 0
  %4 = CInt: 0
  %14 = CInt: 0
  %6 = Jmp: idepth: 2
%7 = Loop: idepth: 3, %6, %45
  %8 = Phi: %5, %48
  %9 = Phi: %2, %18
  %23 = Phi: %4, %24
  %50 = CondOp: op: jne, %8, %9
  %11 = If: swapped: false, idepth: 4, %50
%12 = Then: idepth: 0, %11
  %46 = Return: idepth: 0, %1, %23
%13 = Else: idepth: 5, %11
  %15 = Jmp: idepth: 6
%16 = Loop: idepth: 7, %15, %36
  %17 = Phi: %14, %47
  %18 = Phi: %9, %18
  %24 = Phi: %23, %27
  %25 = Phi: %8, %25
  %49 = CondOp: op: jne, %17, %18
  %20 = If: swapped: false, idepth: 8, %49
%21 = Then: idepth: 9, %20
  %48 = ImmBinOp: imm: 1, op: addi64, %25
  %45 = Jmp: idepth: 10
%22 = Else: idepth: 9, %20
  %26 = BinOp: *, %17, %25
  %47 = ImmBinOp: imm: 1, op: addi64, %17
  %27 = BinOp: +, %24, %26
  %36 = Jmp: idepth: 10

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 1, 5, 6, 7, 8, 1, 1, 1, 8, 9, 10, 11, 12, 1, 5, 1, 12, 13, 14, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :not_fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
not_fib:
         cp $14, $2
       li64 $13, 0
       li64 $15, 0
       li64 $16, 0
         cp $17, $13
         cp $18, $14
         cp $19, $15
3:      jne $17, $18, :1
         cp $1, $19
       jala $0, $31, 0
1:       cp $20, $16
         cp $21, $18
         cp $22, $19
         cp $23, $17
4:      jne $20, $21, :2
     addi64 $17, $23, 1
         cp $18, $21
         cp $19, $22
        jmp :3
2:    mul64 $24, $20, $23
     addi64 $25, $20, 1
      add64 $26, $22, $24
         cp $20, $25
         cp $22, $26
        jmp :4

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
      cp $14=0, $2=3
    li64 $13=0, 0
    li64 $15=0, 0
    li64 $16=0, 0
      cp $17=0, $13=0
      cp $18=0, $14=3
      cp $19=0, $15=0
     jne $17=0, $18=3, 19
      cp $20=0, $16=0
      cp $21=0, $18=3
      cp $22=0, $19=0
      cp $23=0, $17=0
     jne $20=0, $21=3, 27
   mul64 $24=0, $20=0, $23=0
  addi64 $25=0, $20=0, 1
   add64 $26=0, $22=0, $24=0
      cp $20=0, $25=1
      cp $22=0, $26=0
     jmp -52
     jne $20=1, $21=3, 27
   mul64 $24=0, $20=1, $23=0
  addi64 $25=1, $20=1, 1
   add64 $26=0, $22=0, $24=0
      cp $20=1, $25=2
      cp $22=0, $26=0
     jmp -52
     jne $20=2, $21=3, 27
   mul64 $24=0, $20=2, $23=0
  addi64 $25=2, $20=2, 1
   add64 $26=0, $22=0, $24=0
      cp $20=2, $25=3
      cp $22=0, $26=0
     jmp -52
     jne $20=3, $21=3, 27
  addi64 $17=0, $23=0, 1
      cp $18=3, $21=3
      cp $19=0, $22=0
     jmp -53
     jne $17=1, $18=3, 19
      cp $20=3, $16=0
      cp $21=3, $18=3
      cp $22=0, $19=0
      cp $23=0, $17=1
     jne $20=0, $21=3, 27
   mul64 $24=0, $20=0, $23=1
  addi64 $25=3, $20=0, 1
   add64 $26=0, $22=0, $24=0
      cp $20=0, $25=1
      cp $22=0, $26=0
     jmp -52
     jne $20=1, $21=3, 27
   mul64 $24=0, $20=1, $23=1
  addi64 $25=1, $20=1, 1
   add64 $26=0, $22=0, $24=1
      cp $20=1, $25=2
      cp $22=0, $26=1
     jmp -52
     jne $20=2, $21=3, 27
   mul64 $24=1, $20=2, $23=1
  addi64 $25=2, $20=2, 1
   add64 $26=1, $22=1, $24=2
      cp $20=2, $25=3
      cp $22=1, $26=3
     jmp -52
     jne $20=3, $21=3, 27
  addi64 $17=1, $23=1, 1
      cp $18=3, $21=3
      cp $19=0, $22=3
     jmp -53
     jne $17=2, $18=3, 19
      cp $20=3, $16=0
      cp $21=3, $18=3
      cp $22=3, $19=3
      cp $23=1, $17=2
     jne $20=0, $21=3, 27
   mul64 $24=2, $20=0, $23=2
  addi64 $25=3, $20=0, 1
   add64 $26=3, $22=3, $24=0
      cp $20=0, $25=1
      cp $22=3, $26=3
     jmp -52
     jne $20=1, $21=3, 27
   mul64 $24=0, $20=1, $23=2
  addi64 $25=1, $20=1, 1
   add64 $26=3, $22=3, $24=2
      cp $20=1, $25=2
      cp $22=3, $26=5
     jmp -52
     jne $20=2, $21=3, 27
   mul64 $24=2, $20=2, $23=2
  addi64 $25=2, $20=2, 1
   add64 $26=5, $22=5, $24=4
      cp $20=2, $25=3
      cp $22=5, $26=9
     jmp -52
     jne $20=3, $21=3, 27
  addi64 $17=2, $23=2, 1
      cp $18=3, $21=3
      cp $19=3, $22=9
     jmp -53
     jne $17=3, $18=3, 19
      cp $1=0, $19=9
    jala $0=0, $31=44, 0
      cp $32=3, $1=9
      cp $1=9, $32=9
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx