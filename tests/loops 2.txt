======== SOURCE ========
fn(): uint {
    return not_fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 3
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(size: uint): uint {
    acc := 0
    y := 0
    loop if y == size break else {
        x := 0
        loop if x == size break else {
            acc += x * y
            x += 1
        }
        y += 1
    }
    return acc
}
======== UNSCHEDULED SON ========
%40 = Jmp: idepth: 0 [, %42]
%41 = Jmp: idepth: 0, %30 [, %42]
%42 = Region: idepth: 0, %40, %41 [, %43, %44]
%44 = Jmp: idepth: 0, %42 [, %23]
%38 = BinOp: +, %36, %37 [, %39]
%27 = BinOp: ==, %25, %26 [, %28]
%37 = CInt: 1 [, %38, %45]
%28 = If: swapped: false, idepth: 0, %23, %27 [, %29, %30]
%33 = BinOp: *, %25, %32 [, %34]
%3 = Arg: 0, %0 [, %5]
%30 = Else: idepth: 0, %28 [, %35, %39, %41]
%34 = BinOp: +, %31, %33 [, %35]
%43 = Phi: %42, %24, %39 [, %24]
%23 = Loop: idepth: 0, %22, %44 [, %24, %28]
%39 = Store: %30, %35, %20, %38 [, %43]
%36 = Load: %35, %20 [, %38]
%25 = Load: %24, %20 [, %27, %33]
%26 = Load: %24, %4 [, %27]
%45 = BinOp: +, %32, %37 [, %46]
%29 = Then: idepth: 0, %28 [, %46, %48]
%48 = Jmp: idepth: 0, %29 [, %49]
%47 = Jmp: idepth: 0 [, %49]
%32 = Load: %24, %9 [, %33, %45]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3]
%22 = Jmp: idepth: 0, %19 [, %23]
%35 = Store: %30, %24, %7, %34 [, %36, %39]
%31 = Load: %24, %7 [, %34]
%2 = Mem: %0 [, %4, %5, %7, %9, %20]
%24 = Phi: %23, %21, %43 [, %25, %26, %31, %32, %35, %43, %46]
%20 = Local: 8, %2 [, %21, %25, %36, %39]
%4 = Local: 8, %2 [, %5, %15, %26]
%46 = Store: %29, %24, %9, %45 [, %50]
%49 = Region: idepth: 0, %47, %48 [, %50, %51]
%6 = CInt: 0 [, %8, %10, %21]
%9 = Local: 8, %2 [, %10, %14, %32, %46]
%8 = Store: %1, %5, %7, %6 [, %10]
%1 = Entry: idepth: 0, %0 [, %5, %8, %10, %11]
%51 = Jmp: idepth: 0, %49 [, %12]
%11 = Jmp: idepth: 0, %1 [, %12]
%19 = Else: idepth: 0, %17 [, %21, %22]
%16 = BinOp: ==, %14, %15 [, %17]
%7 = Local: 8, %2 [, %8, %31, %35, %52]
%21 = Store: %19, %13, %20, %6 [, %24]
%15 = Load: %13, %4 [, %16]
%14 = Load: %13, %9 [, %16]
%50 = Phi: %49, %13, %46 [, %13]
%10 = Store: %1, %8, %9, %6 [, %13]
%12 = Loop: idepth: 0, %11, %51 [, %13, %17]
%17 = If: swapped: false, idepth: 0, %12, %16 [, %18, %19]
%52 = Load: %13, %7 [, %53]
%13 = Phi: %12, %10, %50 [, %14, %15, %21, %50, %52, %53]
%18 = Then: idepth: 0, %17 [, %53]
%53 = Return: idepth: 0, %18, %13, %52 []

======== OPTIMIZED SON ========
%54 = ImmBinOp: imm: 1, op: addi64, %36 [, %39]
%44 = Jmp: idepth: 0, %30 [, %23]
%55 = CondOp: op: jne, %25, %26 [, %28]
%33 = BinOp: *, %25, %32 [, %34]
%3 = Arg: 0, %0 [, %5]
%30 = Else: idepth: 0, %28 [, %35, %39, %44]
%34 = BinOp: +, %31, %33 [, %35]
%36 = Load: %35, %20 [, %54]
%26 = Load: %24, %4 [, %55]
%25 = Load: %24, %20 [, %55, %33]
%39 = Store: %30, %35, %20, %54 [, %24]
%23 = Loop: idepth: 0, %22, %44 [, %24, %28]
%28 = If: swapped: false, idepth: 0, %23, %55 [, %29, %30]
%32 = Load: %24, %9 [, %33, %56]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3]
%22 = Jmp: idepth: 0, %19 [, %23]
%35 = Store: %30, %24, %7, %34 [, %36, %39]
%31 = Load: %24, %7 [, %34]
%2 = Mem: %0 [, %4, %5, %7, %9, %20]
%20 = Local: 8, %2 [, %21, %25, %36, %39]
%4 = Local: 8, %2 [, %5, %15, %26]
%56 = ImmBinOp: imm: 1, op: addi64, %32 [, %46]
%24 = Phi: %23, %21, %39 [, %25, %26, %31, %32, %35, %46]
%29 = Then: idepth: 0, %28 [, %46, %51]
%6 = CInt: 0 [, %8, %10, %21]
%9 = Local: 8, %2 [, %10, %14, %32, %46]
%8 = Store: %1, %5, %7, %6 [, %10]
%1 = Entry: idepth: 0, %0 [, %5, %8, %10, %11]
%51 = Jmp: idepth: 0, %29 [, %12]
%11 = Jmp: idepth: 0, %1 [, %12]
%19 = Else: idepth: 0, %17 [, %21, %22]
%57 = CondOp: op: jne, %14, %15 [, %17]
%7 = Local: 8, %2 [, %8, %31, %35, %52]
%21 = Store: %19, %13, %20, %6 [, %24]
%15 = Load: %13, %4 [, %57]
%14 = Load: %13, %9 [, %57]
%46 = Store: %29, %24, %9, %56 [, %13]
%10 = Store: %1, %8, %9, %6 [, %13]
%12 = Loop: idepth: 0, %11, %51 [, %13, %17]
%17 = If: swapped: false, idepth: 0, %12, %57 [, %18, %19]
%52 = Load: %13, %7 [, %53]
%13 = Phi: %12, %10, %46 [, %14, %15, %21, %53, %52]
%18 = Then: idepth: 0, %17 [, %53]
%53 = Return: idepth: 0, %18, %13, %52 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %7 = Local: 8, %2
  %6 = CInt: 0
  %9 = Local: 8, %2
  %20 = Local: 8, %2
  %5 = Store: %2, %4, %3
  %8 = Store: %5, %7, %6
  %10 = Store: %8, %9, %6
  %11 = Jmp: idepth: 2
%12 = Loop: idepth: 3, %11, %51
  %13 = Phi: %10, %46
  %14 = Load: %13, %9
  %15 = Load: %13, %4
  %52 = Load: %13, %7
  %57 = CondOp: op: jne, %14, %15
  %17 = If: swapped: false, idepth: 4, %57
%18 = Then: idepth: 0, %17
  %53 = Return: idepth: 0, %13, %52
%19 = Else: idepth: 5, %17
  %21 = Store: %13, %20, %6
  %22 = Jmp: idepth: 6
%23 = Loop: idepth: 7, %22, %44
  %24 = Phi: %21, %39
  %32 = Load: %24, %9
  %31 = Load: %24, %7
  %25 = Load: %24, %20
  %26 = Load: %24, %4
  %33 = BinOp: *, %25, %32
  %55 = CondOp: op: jne, %25, %26
  %34 = BinOp: +, %31, %33
  %28 = If: swapped: false, idepth: 8, %55
%29 = Then: idepth: 9, %28
  %56 = ImmBinOp: imm: 1, op: addi64, %32
  %46 = Store: %24, %9, %56
  %51 = Jmp: idepth: 10
%30 = Else: idepth: 9, %28
  %35 = Store: %24, %7, %34
  %36 = Load: %35, %20
  %54 = ImmBinOp: imm: 1, op: addi64, %36
  %39 = Store: %35, %20, %54
  %44 = Jmp: idepth: 10

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1, 2, 7, 8, 2, 1, 1, 1, 1, 1, 2, 7, 8, 9, 10, 8, 7, 1, 2, 1, 1, 1, 2, 2, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :not_fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
not_fib:
     addi64 $254, $254, -32
         cp $14, $2
     addi64 $13, $254, 0
     addi64 $15, $254, 8
       li64 $16, 0
     addi64 $17, $254, 16
     addi64 $18, $254, 24
         st $14, $254, 0, 8
         st $16, $254, 8, 8
         st $16, $254, 16, 8
3:       ld $14, $254, 16, 8
         ld $19, $254, 0, 8
         ld $20, $254, 8, 8
        jne $14, $19, :1
         cp $1, $20
     addi64 $254, $254, 32
       jala $0, $31, 0
1:       st $16, $254, 24, 8
4:       ld $14, $254, 16, 8
         ld $19, $254, 8, 8
         ld $20, $254, 24, 8
         ld $21, $254, 0, 8
      mul64 $22, $20, $14
      add64 $19, $19, $22
        jne $20, $21, :2
     addi64 $14, $14, 1
         st $14, $254, 16, 8
        jmp :3
2:       st $19, $254, 8, 8
         ld $14, $254, 24, 8
     addi64 $14, $14, 1
         st $14, $254, 24, 8
        jmp :4

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
  addi64 $254=10224, $254, -32
      cp $14=0, $2=3
  addi64 $13=0, $254=10192, 0
  addi64 $15=0, $254=10192, 8
    li64 $16=0, 0
  addi64 $17=0, $254=10192, 16
  addi64 $18=0, $254=10192, 24
      st $14=3, $254=10192, 0, 8
      st $16=0, $254=10192, 8, 8
      st $16=0, $254=10192, 16, 8
      ld $14=3, $254=10192, 16, 8
      ld $19=0, $254=10192, 0, 8
      ld $20=0, $254=10192, 8, 8
     jne $14=0, $19=3, 30
      st $16=0, $254=10192, 24, 8
      ld $14=0, $254=10192, 16, 8
      ld $19=3, $254=10192, 8, 8
      ld $20=0, $254=10192, 24, 8
      ld $21=0, $254=10192, 0, 8
   mul64 $22=0, $20=0, $14=0
   add64 $19=0, $19, $22=0
     jne $20=0, $21=3, 34
      st $19=0, $254=10192, 8, 8
      ld $14=0, $254=10192, 24, 8
  addi64 $14=0, $14, 1
      st $14=1, $254=10192, 24, 8
     jmp -144
      ld $14=1, $254=10192, 16, 8
      ld $19=0, $254=10192, 8, 8
      ld $20=0, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $20=1, $14=0
   add64 $19=0, $19, $22=0
     jne $20=1, $21=3, 34
      st $19=0, $254=10192, 8, 8
      ld $14=0, $254=10192, 24, 8
  addi64 $14=1, $14, 1
      st $14=2, $254=10192, 24, 8
     jmp -144
      ld $14=2, $254=10192, 16, 8
      ld $19=0, $254=10192, 8, 8
      ld $20=1, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $20=2, $14=0
   add64 $19=0, $19, $22=0
     jne $20=2, $21=3, 34
      st $19=0, $254=10192, 8, 8
      ld $14=0, $254=10192, 24, 8
  addi64 $14=2, $14, 1
      st $14=3, $254=10192, 24, 8
     jmp -144
      ld $14=3, $254=10192, 16, 8
      ld $19=0, $254=10192, 8, 8
      ld $20=2, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $20=3, $14=0
   add64 $19=0, $19, $22=0
     jne $20=3, $21=3, 34
  addi64 $14=0, $14, 1
      st $14=1, $254=10192, 16, 8
     jmp -171
      ld $14=1, $254=10192, 16, 8
      ld $19=0, $254=10192, 0, 8
      ld $20=3, $254=10192, 8, 8
     jne $14=1, $19=3, 30
      st $16=0, $254=10192, 24, 8
      ld $14=1, $254=10192, 16, 8
      ld $19=3, $254=10192, 8, 8
      ld $20=0, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $20=0, $14=1
   add64 $19=0, $19, $22=0
     jne $20=0, $21=3, 34
      st $19=0, $254=10192, 8, 8
      ld $14=1, $254=10192, 24, 8
  addi64 $14=0, $14, 1
      st $14=1, $254=10192, 24, 8
     jmp -144
      ld $14=1, $254=10192, 16, 8
      ld $19=0, $254=10192, 8, 8
      ld $20=0, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $20=1, $14=1
   add64 $19=0, $19, $22=1
     jne $20=1, $21=3, 34
      st $19=1, $254=10192, 8, 8
      ld $14=1, $254=10192, 24, 8
  addi64 $14=1, $14, 1
      st $14=2, $254=10192, 24, 8
     jmp -144
      ld $14=2, $254=10192, 16, 8
      ld $19=1, $254=10192, 8, 8
      ld $20=1, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=1, $20=2, $14=1
   add64 $19=1, $19, $22=2
     jne $20=2, $21=3, 34
      st $19=3, $254=10192, 8, 8
      ld $14=1, $254=10192, 24, 8
  addi64 $14=2, $14, 1
      st $14=3, $254=10192, 24, 8
     jmp -144
      ld $14=3, $254=10192, 16, 8
      ld $19=3, $254=10192, 8, 8
      ld $20=2, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=2, $20=3, $14=1
   add64 $19=3, $19, $22=3
     jne $20=3, $21=3, 34
  addi64 $14=1, $14, 1
      st $14=2, $254=10192, 16, 8
     jmp -171
      ld $14=2, $254=10192, 16, 8
      ld $19=6, $254=10192, 0, 8
      ld $20=3, $254=10192, 8, 8
     jne $14=2, $19=3, 30
      st $16=0, $254=10192, 24, 8
      ld $14=2, $254=10192, 16, 8
      ld $19=3, $254=10192, 8, 8
      ld $20=3, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=3, $20=0, $14=2
   add64 $19=3, $19, $22=0
     jne $20=0, $21=3, 34
      st $19=3, $254=10192, 8, 8
      ld $14=2, $254=10192, 24, 8
  addi64 $14=0, $14, 1
      st $14=1, $254=10192, 24, 8
     jmp -144
      ld $14=1, $254=10192, 16, 8
      ld $19=3, $254=10192, 8, 8
      ld $20=0, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $20=1, $14=2
   add64 $19=3, $19, $22=2
     jne $20=1, $21=3, 34
      st $19=5, $254=10192, 8, 8
      ld $14=2, $254=10192, 24, 8
  addi64 $14=1, $14, 1
      st $14=2, $254=10192, 24, 8
     jmp -144
      ld $14=2, $254=10192, 16, 8
      ld $19=5, $254=10192, 8, 8
      ld $20=1, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=2, $20=2, $14=2
   add64 $19=5, $19, $22=4
     jne $20=2, $21=3, 34
      st $19=9, $254=10192, 8, 8
      ld $14=2, $254=10192, 24, 8
  addi64 $14=2, $14, 1
      st $14=3, $254=10192, 24, 8
     jmp -144
      ld $14=3, $254=10192, 16, 8
      ld $19=9, $254=10192, 8, 8
      ld $20=2, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=4, $20=3, $14=2
   add64 $19=9, $19, $22=6
     jne $20=3, $21=3, 34
  addi64 $14=2, $14, 1
      st $14=3, $254=10192, 16, 8
     jmp -171
      ld $14=3, $254=10192, 16, 8
      ld $19=15, $254=10192, 0, 8
      ld $20=3, $254=10192, 8, 8
     jne $14=3, $19=3, 30
      cp $1=0, $20=9
  addi64 $254=10192, $254, 32
    jala $0=0, $31=44, 0
      cp $32=3, $1=9
      cp $1=9, $32=9
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx