======== SOURCE ========
fn(): uint {
    return not_fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 3
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(size: uint): uint {
    acc := 0
    y := 0
    loop if y == size break else {
        x := 0
        loop if x == size break else {
            acc += x * y
            x += 1
        }
        y += 1
    }
    return acc
}
======== UNSCHEDULED SON ========
%45 = Jmp: idepth: 0 [, %47]
%42 = CInt: 1 [, %43]
%46 = Jmp: idepth: 0, %32 [, %47]
%47 = Region: idepth: 0, %45, %46 [, %48, %49]
%49 = Jmp: idepth: 0, %47 [, %25]
%43 = BinOp: +, %41, %42 [, %44]
%29 = BinOp: ==, %27, %28 [, %30]
%52 = CInt: 1 [, %53]
%30 = If: swapped: false, idepth: 0, %25, %29 [, %31, %32]
%37 = BinOp: *, %35, %36 [, %38]
%3 = Arg: 0, %0 [, %5]
%32 = Else: idepth: 0, %30 [, %39, %44, %46]
%38 = BinOp: +, %34, %37 [, %39]
%48 = Phi: %47, %26, %44 [, %26]
%25 = Loop: idepth: 0, %24, %49 [, %26, %30]
%44 = Store: %32, %39, %22, %43 [, %48]
%41 = Load: %39, %22 [, %43]
%40 = Load: %39, %22 []
%35 = Load: %26, %22 [, %37]
%27 = Load: %26, %22 [, %29]
%28 = Load: %26, %4 [, %29]
%53 = BinOp: +, %51, %52 [, %54]
%31 = Then: idepth: 0, %30 [, %54, %56]
%56 = Jmp: idepth: 0, %31 [, %57]
%55 = Jmp: idepth: 0 [, %57]
%51 = Load: %26, %10 [, %53]
%50 = Load: %26, %10 []
%36 = Load: %26, %10 [, %37]
%6 = CInt: 0 [, %8]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3]
%24 = Jmp: idepth: 0, %20 [, %25]
%39 = Store: %32, %26, %7, %38 [, %40, %41, %44]
%34 = Load: %26, %7 [, %38]
%33 = Load: %26, %7 []
%2 = Mem: %0 [, %4, %5, %7, %10, %22]
%26 = Phi: %25, %23, %48 [, %27, %28, %33, %34, %35, %36, %39, %48, %50, %51, %54]
%21 = CInt: 0 [, %23]
%22 = Local: 8, %2 [, %23, %27, %35, %40, %41, %44]
%4 = Local: 8, %2 [, %5, %16, %28]
%54 = Store: %31, %26, %10, %53 [, %58]
%57 = Region: idepth: 0, %55, %56 [, %58, %59]
%9 = CInt: 0 [, %11]
%10 = Local: 8, %2 [, %11, %15, %36, %50, %51, %54]
%8 = Store: %1, %5, %7, %6 [, %11]
%1 = Entry: idepth: 0, %0 [, %5, %8, %11, %12]
%59 = Jmp: idepth: 0, %57 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%20 = Else: idepth: 0, %18 [, %23, %24]
%17 = BinOp: ==, %15, %16 [, %18]
%7 = Local: 8, %2 [, %8, %33, %34, %39, %60]
%23 = Store: %20, %14, %22, %21 [, %26]
%16 = Load: %14, %4 [, %17]
%15 = Load: %14, %10 [, %17]
%58 = Phi: %57, %14, %54 [, %14]
%11 = Store: %1, %8, %10, %9 [, %14]
%13 = Loop: idepth: 0, %12, %59 [, %14, %18]
%18 = If: swapped: false, idepth: 0, %13, %17 [, %19, %20]
%60 = Load: %14, %7 [, %61]
%14 = Phi: %13, %11, %58 [, %15, %16, %23, %58, %60, %61]
%19 = Then: idepth: 0, %18 [, %61]
%61 = Return: idepth: 0, %19, %14, %60 []

======== OPTIMIZED SON ========
%62 = ImmBinOp: imm: 1, op: addi64, %40 [, %44]
%49 = Jmp: idepth: 0, %32 [, %25]
%63 = CondOp: op: jne, %27, %28 [, %30]
%37 = BinOp: *, %27, %36 [, %38]
%3 = Arg: 0, %0 [, %5]
%32 = Else: idepth: 0, %30 [, %39, %44, %49]
%38 = BinOp: +, %33, %37 [, %39]
%40 = Load: %39, %22 [, %62]
%28 = Load: %26, %4 [, %63]
%27 = Load: %26, %22 [, %63, %37]
%44 = Store: %32, %39, %22, %62 [, %26]
%25 = Loop: idepth: 0, %24, %49 [, %26, %30]
%30 = If: swapped: false, idepth: 0, %25, %63 [, %31, %32]
%36 = Load: %26, %10 [, %37, %64]
%6 = CInt: 0 [, %8]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3]
%24 = Jmp: idepth: 0, %20 [, %25]
%39 = Store: %32, %26, %7, %38 [, %40, %44]
%33 = Load: %26, %7 [, %38]
%2 = Mem: %0 [, %4, %5, %7, %10, %22]
%21 = CInt: 0 [, %23]
%22 = Local: 8, %2 [, %23, %27, %44, %40]
%4 = Local: 8, %2 [, %5, %16, %28]
%64 = ImmBinOp: imm: 1, op: addi64, %36 [, %54]
%26 = Phi: %25, %23, %44 [, %27, %28, %33, %39, %54, %36]
%31 = Then: idepth: 0, %30 [, %54, %59]
%9 = CInt: 0 [, %11]
%10 = Local: 8, %2 [, %11, %15, %36, %54]
%8 = Store: %1, %5, %7, %6 [, %11]
%1 = Entry: idepth: 0, %0 [, %5, %8, %11, %12]
%59 = Jmp: idepth: 0, %31 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%20 = Else: idepth: 0, %18 [, %23, %24]
%65 = CondOp: op: jne, %15, %16 [, %18]
%7 = Local: 8, %2 [, %8, %33, %60, %39]
%23 = Store: %20, %14, %22, %21 [, %26]
%16 = Load: %14, %4 [, %65]
%15 = Load: %14, %10 [, %65]
%54 = Store: %31, %26, %10, %64 [, %14]
%11 = Store: %1, %8, %10, %9 [, %14]
%13 = Loop: idepth: 0, %12, %59 [, %14, %18]
%18 = If: swapped: false, idepth: 0, %13, %65 [, %19, %20]
%60 = Load: %14, %7 [, %61]
%14 = Phi: %13, %11, %54 [, %15, %16, %23, %61, %60]
%19 = Then: idepth: 0, %18 [, %61]
%61 = Return: idepth: 0, %19, %14, %60 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %7 = Local: 8, %2
  %6 = CInt: 0
  %10 = Local: 8, %2
  %9 = CInt: 0
  %22 = Local: 8, %2
  %21 = CInt: 0
  %5 = Store: %2, %4, %3
  %8 = Store: %5, %7, %6
  %11 = Store: %8, %10, %9
  %12 = Jmp: idepth: 2
%13 = Loop: idepth: 3, %12, %59
  %14 = Phi: %11, %54
  %15 = Load: %14, %10
  %16 = Load: %14, %4
  %60 = Load: %14, %7
  %65 = CondOp: op: jne, %15, %16
  %18 = If: swapped: false, idepth: 4, %65
%19 = Then: idepth: 0, %18
  %61 = Return: idepth: 0, %14, %60
%20 = Else: idepth: 5, %18
  %23 = Store: %14, %22, %21
  %24 = Jmp: idepth: 6
%25 = Loop: idepth: 7, %24, %49
  %26 = Phi: %23, %44
  %36 = Load: %26, %10
  %33 = Load: %26, %7
  %27 = Load: %26, %22
  %28 = Load: %26, %4
  %37 = BinOp: *, %27, %36
  %63 = CondOp: op: jne, %27, %28
  %38 = BinOp: +, %33, %37
  %30 = If: swapped: false, idepth: 8, %63
%31 = Then: idepth: 9, %30
  %64 = ImmBinOp: imm: 1, op: addi64, %36
  %54 = Store: %26, %10, %64
  %59 = Jmp: idepth: 10
%32 = Else: idepth: 9, %30
  %39 = Store: %26, %7, %38
  %40 = Load: %39, %22
  %62 = ImmBinOp: imm: 1, op: addi64, %40
  %44 = Store: %39, %22, %62
  %49 = Jmp: idepth: 10

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 5, 6, 7, 8, 1, 1, 1, 1, 1, 2, 4, 6, 2, 1, 1, 1, 1, 1, 2, 4, 6, 9, 10, 6, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :not_fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
not_fib:
     addi64 $254, $254, -32
         cp $14, $2
     addi64 $13, $254, 0
     addi64 $15, $254, 8
       li64 $16, 0
     addi64 $17, $254, 16
       li64 $18, 0
     addi64 $19, $254, 24
       li64 $20, 0
         st $14, $254, 0, 8
         st $16, $254, 8, 8
         st $18, $254, 16, 8
3:       ld $14, $254, 16, 8
         ld $16, $254, 0, 8
         ld $18, $254, 8, 8
        jne $14, $16, :1
         cp $1, $18
     addi64 $254, $254, 32
       jala $0, $31, 0
1:       st $20, $254, 24, 8
4:       ld $14, $254, 16, 8
         ld $16, $254, 8, 8
         ld $18, $254, 24, 8
         ld $21, $254, 0, 8
      mul64 $22, $18, $14
      add64 $16, $16, $22
        jne $18, $21, :2
     addi64 $14, $14, 1
         st $14, $254, 16, 8
        jmp :3
2:       st $16, $254, 8, 8
         ld $14, $254, 24, 8
     addi64 $14, $14, 1
         st $14, $254, 24, 8
        jmp :4

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
  addi64 $254=10224, $254, -32
      cp $14=0, $2=3
  addi64 $13=0, $254=10192, 0
  addi64 $15=0, $254=10192, 8
    li64 $16=0, 0
  addi64 $17=0, $254=10192, 16
    li64 $18=0, 0
  addi64 $19=0, $254=10192, 24
    li64 $20=0, 0
      st $14=3, $254=10192, 0, 8
      st $16=0, $254=10192, 8, 8
      st $18=0, $254=10192, 16, 8
      ld $14=3, $254=10192, 16, 8
      ld $16=0, $254=10192, 0, 8
      ld $18=0, $254=10192, 8, 8
     jne $14=0, $16=3, 30
      st $20=0, $254=10192, 24, 8
      ld $14=0, $254=10192, 16, 8
      ld $16=3, $254=10192, 8, 8
      ld $18=0, $254=10192, 24, 8
      ld $21=0, $254=10192, 0, 8
   mul64 $22=0, $18=0, $14=0
   add64 $16=0, $16, $22=0
     jne $18=0, $21=3, 34
      st $16=0, $254=10192, 8, 8
      ld $14=0, $254=10192, 24, 8
  addi64 $14=0, $14, 1
      st $14=1, $254=10192, 24, 8
     jmp -144
      ld $14=1, $254=10192, 16, 8
      ld $16=0, $254=10192, 8, 8
      ld $18=0, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $18=1, $14=0
   add64 $16=0, $16, $22=0
     jne $18=1, $21=3, 34
      st $16=0, $254=10192, 8, 8
      ld $14=0, $254=10192, 24, 8
  addi64 $14=1, $14, 1
      st $14=2, $254=10192, 24, 8
     jmp -144
      ld $14=2, $254=10192, 16, 8
      ld $16=0, $254=10192, 8, 8
      ld $18=1, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $18=2, $14=0
   add64 $16=0, $16, $22=0
     jne $18=2, $21=3, 34
      st $16=0, $254=10192, 8, 8
      ld $14=0, $254=10192, 24, 8
  addi64 $14=2, $14, 1
      st $14=3, $254=10192, 24, 8
     jmp -144
      ld $14=3, $254=10192, 16, 8
      ld $16=0, $254=10192, 8, 8
      ld $18=2, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $18=3, $14=0
   add64 $16=0, $16, $22=0
     jne $18=3, $21=3, 34
  addi64 $14=0, $14, 1
      st $14=1, $254=10192, 16, 8
     jmp -171
      ld $14=1, $254=10192, 16, 8
      ld $16=0, $254=10192, 0, 8
      ld $18=3, $254=10192, 8, 8
     jne $14=1, $16=3, 30
      st $20=0, $254=10192, 24, 8
      ld $14=1, $254=10192, 16, 8
      ld $16=3, $254=10192, 8, 8
      ld $18=0, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $18=0, $14=1
   add64 $16=0, $16, $22=0
     jne $18=0, $21=3, 34
      st $16=0, $254=10192, 8, 8
      ld $14=1, $254=10192, 24, 8
  addi64 $14=0, $14, 1
      st $14=1, $254=10192, 24, 8
     jmp -144
      ld $14=1, $254=10192, 16, 8
      ld $16=0, $254=10192, 8, 8
      ld $18=0, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $18=1, $14=1
   add64 $16=0, $16, $22=1
     jne $18=1, $21=3, 34
      st $16=1, $254=10192, 8, 8
      ld $14=1, $254=10192, 24, 8
  addi64 $14=1, $14, 1
      st $14=2, $254=10192, 24, 8
     jmp -144
      ld $14=2, $254=10192, 16, 8
      ld $16=1, $254=10192, 8, 8
      ld $18=1, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=1, $18=2, $14=1
   add64 $16=1, $16, $22=2
     jne $18=2, $21=3, 34
      st $16=3, $254=10192, 8, 8
      ld $14=1, $254=10192, 24, 8
  addi64 $14=2, $14, 1
      st $14=3, $254=10192, 24, 8
     jmp -144
      ld $14=3, $254=10192, 16, 8
      ld $16=3, $254=10192, 8, 8
      ld $18=2, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=2, $18=3, $14=1
   add64 $16=3, $16, $22=3
     jne $18=3, $21=3, 34
  addi64 $14=1, $14, 1
      st $14=2, $254=10192, 16, 8
     jmp -171
      ld $14=2, $254=10192, 16, 8
      ld $16=6, $254=10192, 0, 8
      ld $18=3, $254=10192, 8, 8
     jne $14=2, $16=3, 30
      st $20=0, $254=10192, 24, 8
      ld $14=2, $254=10192, 16, 8
      ld $16=3, $254=10192, 8, 8
      ld $18=3, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=3, $18=0, $14=2
   add64 $16=3, $16, $22=0
     jne $18=0, $21=3, 34
      st $16=3, $254=10192, 8, 8
      ld $14=2, $254=10192, 24, 8
  addi64 $14=0, $14, 1
      st $14=1, $254=10192, 24, 8
     jmp -144
      ld $14=1, $254=10192, 16, 8
      ld $16=3, $254=10192, 8, 8
      ld $18=0, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=0, $18=1, $14=2
   add64 $16=3, $16, $22=2
     jne $18=1, $21=3, 34
      st $16=5, $254=10192, 8, 8
      ld $14=2, $254=10192, 24, 8
  addi64 $14=1, $14, 1
      st $14=2, $254=10192, 24, 8
     jmp -144
      ld $14=2, $254=10192, 16, 8
      ld $16=5, $254=10192, 8, 8
      ld $18=1, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=2, $18=2, $14=2
   add64 $16=5, $16, $22=4
     jne $18=2, $21=3, 34
      st $16=9, $254=10192, 8, 8
      ld $14=2, $254=10192, 24, 8
  addi64 $14=2, $14, 1
      st $14=3, $254=10192, 24, 8
     jmp -144
      ld $14=3, $254=10192, 16, 8
      ld $16=9, $254=10192, 8, 8
      ld $18=2, $254=10192, 24, 8
      ld $21=3, $254=10192, 0, 8
   mul64 $22=4, $18=3, $14=2
   add64 $16=9, $16, $22=6
     jne $18=3, $21=3, 34
  addi64 $14=2, $14, 1
      st $14=3, $254=10192, 16, 8
     jmp -171
      ld $14=3, $254=10192, 16, 8
      ld $16=15, $254=10192, 0, 8
      ld $18=3, $254=10192, 8, 8
     jne $14=3, $16=3, 30
      cp $1=0, $18=9
  addi64 $254=10192, $254, 32
    jala $0=0, $31=44, 0
      cp $32=3, $1=9
      cp $1=9, $32=9
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx