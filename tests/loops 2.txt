======== SOURCE ========
fn(): uint {
    return not_fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 3
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(size: uint): uint {
    acc := 0
    y := 0
    loop if y == size break else {
        x := 0
        loop if x == size break else {
            acc += x * y
            x += 1
        }
        y += 1
    }
    return acc
}
======== UNSCHEDULED SON ========
%41 = Jmp: idepth: 0 [, %43]
%42 = Jmp: idepth: 0, %30 [, %43]
%43 = Region: idepth: 0, %41, %42 [, %44, %45]
%45 = Jmp: idepth: 0, %43 [, %23]
%39 = BinOp: +, %37, %38 [, %40]
%27 = BinOp: ==, %25, %26 [, %28]
%38 = CInt: 1 [, %39, %47]
%28 = If: idepth: 0, %23, %27 [, %29, %30]
%34 = BinOp: *, %32, %33 [, %35]
%3 = Arg: 0, %0 [, %5]
%35 = BinOp: +, %31, %34 [, %36]
%30 = Else: idepth: 0, %28 [, %31, %32, %33, %36, %37, %40, %42]
%44 = Phi: %43, %24, %40 [, %24]
%23 = Loop: idepth: 0, %22, %45 [, %24, %25, %26, %28]
%40 = Store: %30, %36, %20, %39 [, %44]
%37 = Load: %30, %36, %20 [, %39]
%32 = Load: %30, %24, %20 [, %34]
%25 = Load: %23, %24, %20 [, %27]
%26 = Load: %23, %24, %4 [, %27]
%47 = BinOp: +, %46, %38 [, %48]
%29 = Then: idepth: 0, %28 [, %46, %48, %50]
%50 = Jmp: idepth: 0, %29 [, %51]
%49 = Jmp: idepth: 0 [, %51]
%46 = Load: %29, %24, %9 [, %47]
%33 = Load: %30, %24, %9 [, %34]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3]
%22 = Jmp: idepth: 0, %19 [, %23]
%36 = Store: %30, %24, %7, %35 [, %37, %40]
%31 = Load: %30, %24, %7 [, %35]
%2 = Mem: %0 [, %4, %5, %7, %9, %20]
%24 = Phi: %23, %21, %44 [, %25, %26, %31, %32, %33, %36, %44, %46, %48]
%20 = Local: 8, %2 [, %21, %25, %32, %37, %40]
%4 = Local: 8, %2 [, %5, %15, %26]
%48 = Store: %29, %24, %9, %47 [, %52]
%51 = Region: idepth: 0, %49, %50 [, %52, %53]
%6 = CInt: 0 [, %8, %10, %21]
%9 = Local: 8, %2 [, %10, %14, %33, %46, %48]
%8 = Store: %1, %5, %7, %6 [, %10]
%1 = Entry: idepth: 0, %0 [, %5, %8, %10, %11]
%53 = Jmp: idepth: 0, %51 [, %12]
%11 = Jmp: idepth: 0, %1 [, %12]
%19 = Else: idepth: 0, %17 [, %21, %22]
%16 = BinOp: ==, %14, %15 [, %17]
%7 = Local: 8, %2 [, %8, %31, %36, %54]
%21 = Store: %19, %13, %20, %6 [, %24]
%15 = Load: %12, %13, %4 [, %16]
%14 = Load: %12, %13, %9 [, %16]
%52 = Phi: %51, %13, %48 [, %13]
%10 = Store: %1, %8, %9, %6 [, %13]
%12 = Loop: idepth: 0, %11, %53 [, %13, %14, %15, %17]
%17 = If: idepth: 0, %12, %16 [, %18, %19]
%54 = Load: %18, %13, %7 [, %55]
%13 = Phi: %12, %10, %52 [, %14, %15, %21, %52, %54, %55]
%18 = Then: idepth: 0, %17 [, %54, %55]
%55 = Return: idepth: 0, %18, %13, %54 []

======== OPTIMIZED SON ========
%30 = Else: idepth: 0, %64 [, %45]
%45 = Jmp: idepth: 0, %30 [, %23]
%63 = ImmBinOp: imm: 1, op: addi64, %59 [, %59]
%29 = Then: idepth: 0, %64 [, %53]
%22 = Jmp: idepth: 0, %19 [, %23]
%64 = IfOp: swapped: false, op: jne, idepth: 0, %23, %59, %3 [, %29, %30]
%34 = BinOp: *, %59, %56 [, %35]
%65 = ImmBinOp: imm: 1, op: addi64, %56 [, %56]
%35 = BinOp: +, %62, %34 [, %62]
%23 = Loop: idepth: 0, %22, %45 [, %64, %62, %59]
%59 = Phi: %23, %6, %63 [, %64, %34, %63]
%53 = Jmp: idepth: 0, %29 [, %12]
%11 = Jmp: idepth: 0, %1 [, %12]
%1 = Entry: idepth: 0, %0 [, %11]
%19 = Else: idepth: 0, %66 [, %22]
%3 = Arg: 0, %0 [, %64, %66]
%56 = Phi: %12, %6, %65 [, %66, %34, %65]
%62 = Phi: %23, %58, %35 [, %58, %35]
%6 = CInt: 0 [, %59, %58, %56]
%12 = Loop: idepth: 0, %11, %53 [, %66, %58, %56]
%0 = Start: idepth: 0 [, %1, %2, %3]
%66 = IfOp: swapped: false, op: jne, idepth: 0, %12, %56, %3 [, %18, %19]
%58 = Phi: %12, %6, %62 [, %55, %62]
%2 = Mem: %0 [, %55]
%18 = Then: idepth: 0, %66 [, %55]
%55 = Return: idepth: 0, %18, %2, %58 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %6 = CInt: 0
  %3 = Arg: 0
  %11 = Jmp: idepth: 2
%12 = Loop: idepth: 3, %11, %53
  %58 = Phi: %6, %62
  %56 = Phi: %6, %65
  %66 = IfOp: swapped: false, op: jne, idepth: 4, %56, %3
%18 = Then: idepth: 0, %66
  %55 = Return: idepth: 0, %2, %58
%19 = Else: idepth: 5, %66
  %65 = ImmBinOp: imm: 1, op: addi64, %56
  %22 = Jmp: idepth: 6
%23 = Loop: idepth: 7, %22, %45
  %62 = Phi: %58, %35
  %59 = Phi: %6, %63
  %64 = IfOp: swapped: false, op: jne, idepth: 8, %59, %3
%29 = Then: idepth: 9, %64
  %53 = Jmp: idepth: 10
%30 = Else: idepth: 9, %64
  %34 = BinOp: *, %59, %56
  %63 = ImmBinOp: imm: 1, op: addi64, %59
  %35 = BinOp: +, %62, %34
  %45 = Jmp: idepth: 10

======== REGISTER SELECTION ========
{ 1, 2, 1, 3, 4, 1, 1, 5, 1, 6, 7, 1, 1, 8, 9, 8, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :not_fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
not_fib:
         cp $14, $2
       li64 $13, 0
         cp $15, $13
         cp $16, $13
3:      jne $16, $14, :1
         cp $1, $15
       jala $0, $31, 0
1:   addi64 $17, $16, 1
         cp $18, $15
         cp $19, $13
4:      jne $19, $14, :2
         cp $15, $18
         cp $16, $17
        jmp :3
2:    mul64 $20, $19, $16
     addi64 $21, $19, 1
      add64 $20, $18, $20
         cp $18, $20
         cp $19, $21
        jmp :4

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
      cp $14=0, $2=3
    li64 $13=0, 0
      cp $15=0, $13=0
      cp $16=0, $13=0
     jne $16=0, $14=3, 19
  addi64 $17=0, $16=0, 1
      cp $18=0, $15=0
      cp $19=0, $13=0
     jne $19=0, $14=3, 16
   mul64 $20=0, $19=0, $16=0
  addi64 $21=0, $19=0, 1
   add64 $20=0, $18=0, $20
      cp $18=0, $20=0
      cp $19=0, $21=1
     jmp -41
     jne $19=1, $14=3, 16
   mul64 $20=0, $19=1, $16=0
  addi64 $21=1, $19=1, 1
   add64 $20=0, $18=0, $20
      cp $18=0, $20=0
      cp $19=1, $21=2
     jmp -41
     jne $19=2, $14=3, 16
   mul64 $20=0, $19=2, $16=0
  addi64 $21=2, $19=2, 1
   add64 $20=0, $18=0, $20
      cp $18=0, $20=0
      cp $19=2, $21=3
     jmp -41
     jne $19=3, $14=3, 16
      cp $15=0, $18=0
      cp $16=0, $17=1
     jmp -47
     jne $16=1, $14=3, 19
  addi64 $17=1, $16=1, 1
      cp $18=0, $15=0
      cp $19=3, $13=0
     jne $19=0, $14=3, 16
   mul64 $20=0, $19=0, $16=1
  addi64 $21=3, $19=0, 1
   add64 $20=0, $18=0, $20
      cp $18=0, $20=0
      cp $19=0, $21=1
     jmp -41
     jne $19=1, $14=3, 16
   mul64 $20=0, $19=1, $16=1
  addi64 $21=1, $19=1, 1
   add64 $20=1, $18=0, $20
      cp $18=0, $20=1
      cp $19=1, $21=2
     jmp -41
     jne $19=2, $14=3, 16
   mul64 $20=1, $19=2, $16=1
  addi64 $21=2, $19=2, 1
   add64 $20=2, $18=1, $20
      cp $18=1, $20=3
      cp $19=2, $21=3
     jmp -41
     jne $19=3, $14=3, 16
      cp $15=0, $18=3
      cp $16=1, $17=2
     jmp -47
     jne $16=2, $14=3, 19
  addi64 $17=2, $16=2, 1
      cp $18=3, $15=3
      cp $19=3, $13=0
     jne $19=0, $14=3, 16
   mul64 $20=3, $19=0, $16=2
  addi64 $21=3, $19=0, 1
   add64 $20=0, $18=3, $20
      cp $18=3, $20=3
      cp $19=0, $21=1
     jmp -41
     jne $19=1, $14=3, 16
   mul64 $20=3, $19=1, $16=2
  addi64 $21=1, $19=1, 1
   add64 $20=2, $18=3, $20
      cp $18=3, $20=5
      cp $19=1, $21=2
     jmp -41
     jne $19=2, $14=3, 16
   mul64 $20=5, $19=2, $16=2
  addi64 $21=2, $19=2, 1
   add64 $20=4, $18=5, $20
      cp $18=5, $20=9
      cp $19=2, $21=3
     jmp -41
     jne $19=3, $14=3, 16
      cp $15=3, $18=9
      cp $16=2, $17=3
     jmp -47
     jne $16=3, $14=3, 19
      cp $1=0, $15=9
    jala $0=0, $31=44, 0
      cp $32=3, $1=9
      cp $1=9, $32=9
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx