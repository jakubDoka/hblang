======== SOURCE ========
fn(): uint {
	return not_fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%4 = CInt: 3 [, %5]
%2 = Mem: %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5]
%5 = Call: id: 1, idepth: 0, %1, %2, %4 [, %6]
%8 = Ret: 0, %6 [, %9]
%7 = Mem: %6 [, %9]
%6 = CallEnd: idepth: 0, %5 [, %9, %7, %8]
%9 = Return: idepth: 0, %6, %7, %8 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%4 = CInt: 3 [, %5]
%2 = Mem: %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5]
%5 = Call: id: 1, idepth: 0, %1, %2, %4 [, %6]
%8 = Ret: 0, %6 [, %9]
%7 = Mem: %6 [, %9]
%6 = CallEnd: idepth: 0, %5 [, %7, %8, %9]
%9 = Return: idepth: 0, %6, %7, %8 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %4 = CInt: 3
  %5 = Call: id: 1, idepth: 0, %2, %4
%6 = CallEnd: idepth: 0, %5
  %7 = Mem
  %8 = Ret: 0
  %9 = Return: idepth: 0, %7, %8

======== SOURCE ========
fn(size: uint): uint {
	acc := 0
	y := 0
	loop if y == size break else {
		x := 0
		loop if x == size break else {
			acc += x * y
			x += 1
		}
		y += 1
	}
	return acc
}
======== UNSCHEDULED SON ========
%49 = Load: %47, %30 [, %50]
%44 = BinOp: imul, %33, %43 [, %46]
%46 = BinOp: iadd, %45, %44 [, %47]
%50 = BinOp: iadd, %49, %48 [, %51]
%52 = Jmp: idepth: 0, %39 [, %28]
%39 = Then: idepth: 0, %37 [, %52, %47, %51]
%35 = BinOp: eq, %33, %34 [, %37]
%5 = Arg: 0, %0 [, %6]
%30 = Phi: %28, %25, %30 [, %51, %49, %33, %30]
%48 = CInt: 1 [, %50, %53]
%43 = Load: %32, %42 [, %44, %53]
%47 = Store: %39, %32, %41, %46 [, %51, %49]
%34 = Load: %32, %31 [, %35]
%33 = Load: %32, %30 [, %35, %44]
%45 = Load: %32, %41 [, %46]
%51 = Store: %39, %47, %30, %50 [, %32]
%28 = Loop: idepth: 0, %27, %52 [, %37, %42, %30, %31, %32, %41]
%37 = If: idepth: 0, %28, %35 [, %38, %39]
%2 = Mem: %0 [, %6, %4, %8, %10, %25]
%6 = Store: %1, %2, %4, %5 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %5]
%31 = Phi: %28, %16, %31 [, %31, %16, %34]
%4 = Local: 8, %2 [, %6, %16]
%27 = Jmp: idepth: 0, %24 [, %28]
%41 = Phi: %28, %40, %41 [, %40, %41, %45, %47]
%8 = Local: 8, %2 [, %9, %40]
%25 = Local: 8, %2 [, %26, %30]
%53 = BinOp: iadd, %43, %48 [, %54]
%42 = Phi: %28, %15, %42 [, %15, %42, %43, %54]
%32 = Phi: %28, %26, %51 [, %45, %54, %33, %34, %47, %43]
%38 = Then: idepth: 0, %37 [, %55, %54]
%7 = CInt: 0 [, %9, %11, %26]
%10 = Local: 8, %2 [, %11, %15]
%9 = Store: %1, %6, %8, %7 [, %11]
%1 = Entry: idepth: 0, %0 [, %12, %6, %9, %11]
%16 = Phi: %13, %4, %31 [, %31, %19]
%15 = Phi: %13, %10, %42 [, %42, %18]
%55 = Jmp: idepth: 0, %38 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%24 = Then: idepth: 0, %22 [, %27, %26]
%20 = BinOp: eq, %18, %19 [, %22]
%40 = Phi: %13, %8, %41 [, %56, %41]
%19 = Load: %17, %16 [, %20]
%18 = Load: %17, %15 [, %20]
%26 = Store: %24, %17, %25, %7 [, %32]
%54 = Store: %38, %32, %42, %53 [, %17]
%11 = Store: %1, %9, %10, %7 [, %17]
%13 = Loop: idepth: 0, %12, %55 [, %22, %40, %15, %16, %17]
%22 = If: idepth: 0, %13, %20 [, %23, %24]
%56 = Load: %17, %40 [, %57]
%17 = Phi: %13, %11, %54 [, %26, %57, %18, %19, %56]
%23 = Then: idepth: 0, %22 [, %57]
%57 = Return: idepth: 0, %23, %17, %56 []

======== OPTIMIZED SON ========
%39 = Then: idepth: 0, %66 [, %52]
%52 = Jmp: idepth: 0, %39 [, %28]
%65 = ImmBinOp: imm: 1, op: addi64, %62 [, %62]
%38 = Then: idepth: 0, %66 [, %55]
%27 = Jmp: idepth: 0, %24 [, %28]
%66 = IfOp: swapped: false, op: jne, idepth: 0, %28, %62, %5 [, %38, %39]
%44 = BinOp: imul, %62, %58 [, %46]
%67 = ImmBinOp: imm: 1, op: addi64, %58 [, %58]
%46 = BinOp: iadd, %61, %44 [, %61]
%28 = Loop: idepth: 0, %27, %52 [, %62, %66, %61]
%62 = Phi: %28, %7, %65 [, %66, %44, %65]
%55 = Jmp: idepth: 0, %38 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%1 = Entry: idepth: 0, %0 [, %12]
%24 = Then: idepth: 0, %68 [, %27]
%5 = Arg: 0, %0 [, %66, %68]
%58 = Phi: %13, %7, %67 [, %68, %67, %44]
%61 = Phi: %28, %60, %46 [, %46, %60]
%7 = CInt: 0 [, %62, %60, %58]
%13 = Loop: idepth: 0, %12, %55 [, %60, %68, %58]
%0 = Start: idepth: 0 [, %1, %2, %5]
%68 = IfOp: swapped: false, op: jne, idepth: 0, %13, %58, %5 [, %23, %24]
%60 = Phi: %13, %7, %61 [, %57, %61]
%2 = Mem: %0 [, %57]
%23 = Then: idepth: 0, %68 [, %57]
%57 = Return: idepth: 0, %23, %2, %60 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %7 = CInt: 0
  %5 = Arg: 0
  %72 = MachMove: %7
  %69 = MachMove: %7
  %12 = Jmp: idepth: 2
%13 = Loop: idepth: 3, %12, %55
  %71 = Phi: %69, %70
  %74 = Phi: %72, %73
  %68 = IfOp: swapped: false, op: jne, idepth: 4, %74, %5
%23 = Then: idepth: 0, %68
  %57 = Return: idepth: 0, %2, %71
%24 = Then: idepth: 5, %68
  %67 = ImmBinOp: imm: 1, op: addi64, %74
  %75 = MachMove: %7
  %78 = MachMove: %71
  %27 = Jmp: idepth: 6
%28 = Loop: idepth: 7, %27, %52
  %77 = Phi: %75, %76
  %80 = Phi: %78, %79
  %66 = IfOp: swapped: false, op: jne, idepth: 8, %77, %5
%38 = Then: idepth: 9, %66
  %70 = MachMove: %80
  %73 = MachMove: %67
  %55 = Jmp: idepth: 10
%39 = Then: idepth: 9, %66
  %44 = BinOp: imul, %77, %74
  %65 = ImmBinOp: imm: 1, op: addi64, %77
  %46 = BinOp: iadd, %80, %44
  %76 = MachMove: %65
  %79 = MachMove: %46
  %52 = Jmp: idepth: 10

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :not_fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
not_fib:
         cp $14, $2
       li64 $13, 0
         cp $15, $13
         cp $16, $13
3:      jne $16, $14, :1
         cp $1, $15
       jala $0, $31, 0
1:   addi64 $17, $16, 1
         cp $18, $15
         cp $15, $13
4:      jne $15, $14, :2
         cp $15, $18
         cp $16, $17
        jmp :3
2:    mul64 $19, $15, $16
     addi64 $15, $15, 1
      add64 $18, $18, $19
        jmp :4

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
      cp $14=0, $2=3
    li64 $13=0, 0
      cp $15=0, $13=0
      cp $16=0, $13=0
     jne $16=0, $14=3, 19
  addi64 $17=0, $16=0, 1
      cp $18=0, $15=0
      cp $15=0, $13=0
     jne $15=0, $14=3, 16
   mul64 $19=0, $15=0, $16=0
  addi64 $15=0, $15, 1
   add64 $18=0, $18, $19=0
     jmp -35
     jne $15=1, $14=3, 16
   mul64 $19=0, $15=1, $16=0
  addi64 $15=1, $15, 1
   add64 $18=0, $18, $19=0
     jmp -35
     jne $15=2, $14=3, 16
   mul64 $19=0, $15=2, $16=0
  addi64 $15=2, $15, 1
   add64 $18=0, $18, $19=0
     jmp -35
     jne $15=3, $14=3, 16
      cp $15=3, $18=0
      cp $16=0, $17=1
     jmp -47
     jne $16=1, $14=3, 19
  addi64 $17=1, $16=1, 1
      cp $18=0, $15=0
      cp $15=0, $13=0
     jne $15=0, $14=3, 16
   mul64 $19=0, $15=0, $16=1
  addi64 $15=0, $15, 1
   add64 $18=0, $18, $19=0
     jmp -35
     jne $15=1, $14=3, 16
   mul64 $19=0, $15=1, $16=1
  addi64 $15=1, $15, 1
   add64 $18=0, $18, $19=1
     jmp -35
     jne $15=2, $14=3, 16
   mul64 $19=1, $15=2, $16=1
  addi64 $15=2, $15, 1
   add64 $18=1, $18, $19=2
     jmp -35
     jne $15=3, $14=3, 16
      cp $15=3, $18=3
      cp $16=1, $17=2
     jmp -47
     jne $16=2, $14=3, 19
  addi64 $17=2, $16=2, 1
      cp $18=3, $15=3
      cp $15=3, $13=0
     jne $15=0, $14=3, 16
   mul64 $19=2, $15=0, $16=2
  addi64 $15=0, $15, 1
   add64 $18=3, $18, $19=0
     jmp -35
     jne $15=1, $14=3, 16
   mul64 $19=0, $15=1, $16=2
  addi64 $15=1, $15, 1
   add64 $18=3, $18, $19=2
     jmp -35
     jne $15=2, $14=3, 16
   mul64 $19=2, $15=2, $16=2
  addi64 $15=2, $15, 1
   add64 $18=5, $18, $19=4
     jmp -35
     jne $15=3, $14=3, 16
      cp $15=3, $18=9
      cp $16=2, $17=3
     jmp -47
     jne $16=3, $14=3, 19
      cp $1=0, $15=9
    jala $0=0, $31=44, 0
      cp $32=3, $1=9
      cp $1=9, $32=9
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx