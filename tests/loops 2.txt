======== SOURCE ========
fn(): uint {
    return not_fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idpth: 0 [, %1]
%2 = CInt: 3 [, %3]
%1 = Entry: idpth: 0, %0 [, %3]
%3 = Call: fn1, idpth: 0, %1, %2 [, %4]
%5 = Ret: %4 [, %6]
%4 = CallEnd: idpth: 0, %3 [, %5, %6]
%6 = Return: idpth: 0, %4, %5 []

======== OPTIMIZED SON ========
%0 = Start: idpth: 0 [, %1]
%2 = CInt: 3 [, %3]
%1 = Entry: idpth: 0, %0 [, %3]
%3 = Call: fn1, idpth: 0, %1, %2 [, %4]
%5 = Ret: %4 [, %6]
%4 = CallEnd: idpth: 0, %3 [, %5, %6]
%6 = Return: idpth: 0, %4, %5 []

======== SCHEDULED SON ========
%0 = Start: idpth: 0
%1 = Entry: idpth: 0, %0
  %2 = CInt: 3
  %3 = Call: fn1, idpth: 0, %2
%4 = CallEnd: idpth: 0, %3
  %5 = Ret
  %6 = Return: idpth: 0, %5

======== REGISTER SELECTION ========
{ 1, 1, 1, 1 }

======== SOURCE ========
fn(size: uint): uint {
    acc := 0
    y := 0
    loop if y == size break else {
        x := 0
        loop if x == size break else {
            acc += x * y
            x += 1
        }
        y += 1
    }
    return acc
}
======== UNSCHEDULED SON ========
%27 = CInt: 1 [, %28]
%36 = CInt: 1 [, %37]
%30 = Jmp: idpth: 0, %21 [, %31]
%29 = Jmp: idpth: 0 [, %31]
%21 = Else: idpth: 0, %19 [, %30]
%28 = BinOp: +, %16, %27 [, %34]
%34 = Phi: %31, %16, %28 [, %16]
%13 = CInt: 0 [, %16]
%20 = Then: idpth: 0, %19 [, %39]
%18 = BinOp: ==, %16, %17 [, %19]
%33 = Phi: %31, %24, %24 [, %24]
%37 = BinOp: +, %24, %36 [, %43]
%0 = Start: idpth: 0 [, %1, %2]
%25 = BinOp: *, %16, %24 [, %26]
%31 = Region: idpth: 0, %29, %30 [, %32, %33, %34, %35]
%19 = If: swapped: false, idpth: 0, %15, %18 [, %20, %21]
%16 = Phi: %15, %13, %34 [, %18, %25, %28, %34]
%35 = Jmp: idpth: 0, %31 [, %15]
%39 = Jmp: idpth: 0, %20 [, %40]
%38 = Jmp: idpth: 0 [, %40]
%17 = Phi: %15, %8, %17 [, %18, %17, %41]
%41 = Phi: %40, %8, %17 [, %8]
%1 = Arg: 0, %0 [, %8]
%24 = Phi: %15, %7, %33 [, %25, %33, %33, %37]
%43 = Phi: %40, %7, %37 [, %7]
%4 = CInt: 0 [, %7]
%2 = Entry: idpth: 0, %0 [, %5]
%14 = Jmp: idpth: 0, %12 [, %15]
%26 = BinOp: +, %23, %25 [, %32]
%32 = Phi: %31, %23, %26 [, %23]
%15 = Loop: idpth: 0, %14, %35 [, %16, %17, %19, %23, %24]
%40 = Region: idpth: 0, %38, %39 [, %41, %42, %43, %44]
%8 = Phi: %6, %1, %41 [, %9, %17, %41]
%7 = Phi: %6, %4, %43 [, %9, %24, %43]
%44 = Jmp: idpth: 0, %40 [, %6]
%5 = Jmp: idpth: 0, %2 [, %6]
%12 = Else: idpth: 0, %10 [, %14]
%9 = BinOp: ==, %7, %8 [, %10]
%23 = Phi: %15, %22, %32 [, %26, %32, %42]
%42 = Phi: %40, %22, %23 [, %22]
%3 = CInt: 0 [, %22]
%6 = Loop: idpth: 0, %5, %44 [, %7, %8, %10, %22]
%10 = If: swapped: false, idpth: 0, %6, %9 [, %11, %12]
%22 = Phi: %6, %3, %42 [, %23, %42, %45]
%11 = Then: idpth: 0, %10 [, %45]
%45 = Return: idpth: 0, %11, %22 []

======== OPTIMIZED SON ========
%46 = ImmBinOp: addi64(1), %16 [, %16]
%13 = CInt: 0 [, %16]
%21 = Else: idpth: 0, %19 [, %35]
%48 = CondOp: jne, %16, %17 [, %19]
%0 = Start: idpth: 0 [, %1, %2]
%25 = BinOp: *, %16, %24 [, %26]
%19 = If: swapped: false, idpth: 0, %15, %48 [, %20, %21]
%16 = Phi: %15, %13, %46 [, %48, %25, %46]
%35 = Jmp: idpth: 0, %21 [, %15]
%17 = Phi: %15, %8, %17 [, %48, %17, %8]
%1 = Arg: 0, %0 [, %8]
%24 = Phi: %15, %7, %24 [, %25, %24, %47]
%47 = ImmBinOp: addi64(1), %24 [, %7]
%4 = CInt: 0 [, %7]
%20 = Then: idpth: 0, %19 [, %44]
%2 = Entry: idpth: 0, %0 [, %5]
%14 = Jmp: idpth: 0, %12 [, %15]
%26 = BinOp: +, %23, %25 [, %23]
%15 = Loop: idpth: 0, %14, %35 [, %16, %17, %19, %23, %24]
%8 = Phi: %6, %1, %17 [, %49, %17]
%7 = Phi: %6, %4, %47 [, %49, %24]
%44 = Jmp: idpth: 0, %20 [, %6]
%5 = Jmp: idpth: 0, %2 [, %6]
%12 = Else: idpth: 0, %10 [, %14]
%49 = CondOp: jne, %7, %8 [, %10]
%23 = Phi: %15, %22, %26 [, %26, %22]
%3 = CInt: 0 [, %22]
%6 = Loop: idpth: 0, %5, %44 [, %7, %8, %10, %22]
%10 = If: swapped: false, idpth: 0, %6, %49 [, %11, %12]
%22 = Phi: %6, %3, %23 [, %23, %45]
%11 = Then: idpth: 0, %10 [, %45]
%45 = Return: idpth: 0, %11, %22 []

======== SCHEDULED SON ========
%0 = Start: idpth: 0
%2 = Entry: idpth: 1, %0
  %4 = CInt: 0
  %1 = Arg: 0
  %3 = CInt: 0
  %5 = Jmp: idpth: 2
%6 = Loop: idpth: 3, %5, %44
  %7 = Phi: %4, %47
  %8 = Phi: %1, %17
  %22 = Phi: %3, %23
  %49 = CondOp: jne, %7, %8
  %10 = If: swapped: false, idpth: 4, %49
%11 = Then: idpth: 0, %10
  %45 = Return: idpth: 0, %22
%12 = Else: idpth: 5, %10
  %13 = CInt: 0
  %14 = Jmp: idpth: 6
%15 = Loop: idpth: 7, %14, %35
  %16 = Phi: %13, %46
  %17 = Phi: %8, %17
  %23 = Phi: %22, %26
  %24 = Phi: %7, %24
  %48 = CondOp: jne, %16, %17
  %19 = If: swapped: false, idpth: 8, %48
%20 = Then: idpth: 9, %19
  %47 = ImmBinOp: addi64(1), %24
  %44 = Jmp: idpth: 10
%21 = Else: idpth: 9, %19
  %25 = BinOp: *, %16, %24
  %46 = ImmBinOp: addi64(1), %16
  %26 = BinOp: +, %23, %25
  %35 = Jmp: idpth: 10

======== REGISTER SELECTION ========
{ 1, 2, 3, 1, 4, 5, 6, 7, 1, 1, 7, 1, 8, 9, 10, 11, 12, 1, 4, 1, 12, 13, 14, 1 }

======== CODEGEN ========
main:
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :not_fib
         cp $32, $1
         cp $1, $32
         tx
not_fib:
         cp $14, $2
       li64 $13, 0
       li64 $15, 0
         cp $16, $13
         cp $17, $14
         cp $18, $15
3:      jne $16, $17, :1
         cp $1, $18
       jala $0, $31, 0
1:     li64 $19, 0
         cp $20, $19
         cp $21, $17
         cp $22, $18
         cp $23, $16
4:      jne $20, $21, :2
     addi64 $16, $23, 1
         cp $17, $21
         cp $18, $22
        jmp :3
2:    mul64 $24, $20, $23
     addi64 $25, $20, 1
      add64 $26, $22, $24
         cp $20, $25
         cp $22, $26
        jmp :4

======== EXECUTION ========
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 14
      cp $14=0, $2=3
    li64 $13=0, 0
    li64 $15=0, 0
      cp $16=0, $13=0
      cp $17=0, $14=3
      cp $18=0, $15=0
     jne $16=0, $17=3, 19
    li64 $19=0, 0
      cp $20=0, $19=0
      cp $21=0, $17=3
      cp $22=0, $18=0
      cp $23=0, $16=0
     jne $20=0, $21=3, 27
   mul64 $24=0, $20=0, $23=0
  addi64 $25=0, $20=0, 1
   add64 $26=0, $22=0, $24=0
      cp $20=0, $25=1
      cp $22=0, $26=0
     jmp -52
     jne $20=1, $21=3, 27
   mul64 $24=0, $20=1, $23=0
  addi64 $25=1, $20=1, 1
   add64 $26=0, $22=0, $24=0
      cp $20=1, $25=2
      cp $22=0, $26=0
     jmp -52
     jne $20=2, $21=3, 27
   mul64 $24=0, $20=2, $23=0
  addi64 $25=2, $20=2, 1
   add64 $26=0, $22=0, $24=0
      cp $20=2, $25=3
      cp $22=0, $26=0
     jmp -52
     jne $20=3, $21=3, 27
  addi64 $16=0, $23=0, 1
      cp $17=3, $21=3
      cp $18=0, $22=0
     jmp -63
     jne $16=1, $17=3, 19
    li64 $19=0, 0
      cp $20=3, $19=0
      cp $21=3, $17=3
      cp $22=0, $18=0
      cp $23=0, $16=1
     jne $20=0, $21=3, 27
   mul64 $24=0, $20=0, $23=1
  addi64 $25=3, $20=0, 1
   add64 $26=0, $22=0, $24=0
      cp $20=0, $25=1
      cp $22=0, $26=0
     jmp -52
     jne $20=1, $21=3, 27
   mul64 $24=0, $20=1, $23=1
  addi64 $25=1, $20=1, 1
   add64 $26=0, $22=0, $24=1
      cp $20=1, $25=2
      cp $22=0, $26=1
     jmp -52
     jne $20=2, $21=3, 27
   mul64 $24=1, $20=2, $23=1
  addi64 $25=2, $20=2, 1
   add64 $26=1, $22=1, $24=2
      cp $20=2, $25=3
      cp $22=1, $26=3
     jmp -52
     jne $20=3, $21=3, 27
  addi64 $16=1, $23=1, 1
      cp $17=3, $21=3
      cp $18=0, $22=3
     jmp -63
     jne $16=2, $17=3, 19
    li64 $19=0, 0
      cp $20=3, $19=0
      cp $21=3, $17=3
      cp $22=3, $18=3
      cp $23=1, $16=2
     jne $20=0, $21=3, 27
   mul64 $24=2, $20=0, $23=2
  addi64 $25=3, $20=0, 1
   add64 $26=3, $22=3, $24=0
      cp $20=0, $25=1
      cp $22=3, $26=3
     jmp -52
     jne $20=1, $21=3, 27
   mul64 $24=0, $20=1, $23=2
  addi64 $25=1, $20=1, 1
   add64 $26=3, $22=3, $24=2
      cp $20=1, $25=2
      cp $22=3, $26=5
     jmp -52
     jne $20=2, $21=3, 27
   mul64 $24=2, $20=2, $23=2
  addi64 $25=2, $20=2, 1
   add64 $26=5, $22=5, $24=4
      cp $20=2, $25=3
      cp $22=5, $26=9
     jmp -52
     jne $20=3, $21=3, 27
  addi64 $16=2, $23=2, 1
      cp $17=3, $21=3
      cp $18=3, $22=9
     jmp -63
     jne $16=3, $17=3, 19
      cp $1=0, $18=9
    jala $0=0, $31=20, 0
      cp $32=3, $1=9
      cp $1=9, $32=9
      tx