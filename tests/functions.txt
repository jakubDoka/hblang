======== SOURCE ========
fn(): uint {
    return add_one(10) + add_two(20)
}
======== UNSCHEDULED SON ========
%1 = Mem: %0 []
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%2 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %2, %3 [, %5]
%7 = CInt: 20 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %8]
%6 = Ret: %5 [, %11]
%10 = Ret: %9 [, %11]
%8 = Call: id: fn2, idepth: 0, %5, %7 [, %9]
%11 = BinOp: +, %6, %10 [, %12]
%9 = CallEnd: idepth: 0, %8 [, %10, %12]
%12 = Return: idepth: 0, %9, %11 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %2]
%3 = CInt: 10 [, %4]
%2 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %2, %3 [, %5]
%7 = CInt: 20 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %8]
%6 = Ret: %5 [, %11]
%10 = Ret: %9 [, %11]
%8 = Call: id: fn2, idepth: 0, %5, %7 [, %9]
%11 = BinOp: +, %6, %10 [, %12]
%9 = CallEnd: idepth: 0, %8 [, %10, %12]
%12 = Return: idepth: 0, %9, %11 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%2 = Entry: idepth: 1, %0
  %3 = CInt: 10
  %4 = Call: id: fn1, idepth: 2, %3
%5 = CallEnd: idepth: 3, %4
  %6 = Ret
  %7 = CInt: 20
  %8 = Call: id: fn2, idepth: 4, %7
%9 = CallEnd: idepth: 5, %8
  %10 = Ret
  %11 = BinOp: +, %6, %10
  %12 = Return: idepth: 0, %11

======== REGISTER SELECTION ========
{ 1, 1, 1, 2, 1, 2, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    return x + 2
}
======== UNSCHEDULED SON ========
%1 = Mem: %0 []
%4 = CInt: 2 [, %5]
%2 = Arg: 0, %0 [, %5]
%0 = Start: idepth: 0 [, %1, %2, %3]
%5 = BinOp: +, %2, %4 [, %6]
%3 = Entry: idepth: 0, %0 [, %6]
%6 = Return: idepth: 0, %3, %5 []

======== OPTIMIZED SON ========
%2 = Arg: 0, %0 [, %7]
%0 = Start: idepth: 0 [, %3, %2]
%7 = ImmBinOp: imm: 2, op: addi64, %2 [, %6]
%3 = Entry: idepth: 0, %0 [, %6]
%6 = Return: idepth: 0, %3, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%3 = Entry: idepth: 1, %0
  %2 = Arg: 0
  %7 = ImmBinOp: imm: 2, op: addi64, %2
  %6 = Return: idepth: 0, %7

======== REGISTER SELECTION ========
{ 1, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    return x + 1
}
======== UNSCHEDULED SON ========
%1 = Mem: %0 []
%4 = CInt: 1 [, %5]
%2 = Arg: 0, %0 [, %5]
%0 = Start: idepth: 0 [, %1, %2, %3]
%5 = BinOp: +, %2, %4 [, %6]
%3 = Entry: idepth: 0, %0 [, %6]
%6 = Return: idepth: 0, %3, %5 []

======== OPTIMIZED SON ========
%2 = Arg: 0, %0 [, %7]
%0 = Start: idepth: 0 [, %3, %2]
%7 = ImmBinOp: imm: 1, op: addi64, %2 [, %6]
%3 = Entry: idepth: 0, %0 [, %6]
%6 = Return: idepth: 0, %3, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%3 = Entry: idepth: 1, %0
  %2 = Arg: 0
  %7 = ImmBinOp: imm: 1, op: addi64, %2
  %6 = Return: idepth: 0, %7

======== REGISTER SELECTION ========
{ 1, 1, 1 }

======== CODEGEN ========
main:
       li64 $32, 10
         cp $2, $32
        jal $31, $0, :add_one
         cp $32, $1
       li64 $33, 20
         cp $2, $33
        jal $31, $0, :add_two
         cp $33, $1
      add64 $32, $32, $33
         cp $1, $32
         tx
add_two:
         cp $13, $2
     addi64 $13, $13, 2
         cp $1, $13
       jala $0, $31, 0
add_one:
         cp $13, $2
     addi64 $13, $13, 1
         cp $1, $13
       jala $0, $31, 0

======== EXECUTION ========
    li64 $32=0, 10
      cp $2=0, $32=10
     jal $31=0, $0=0, 69
      cp $13=0, $2=10
  addi64 $13=10, $13, 1
      cp $1=0, $13=11
    jala $0=0, $31=20, 0
      cp $32=10, $1=11
    li64 $33=0, 20
      cp $2=10, $33=20
     jal $31=20, $0=0, 18
      cp $13=11, $2=20
  addi64 $13=20, $13, 2
      cp $1=11, $13=22
    jala $0=0, $31=43, 0
      cp $33=20, $1=22
   add64 $32=11, $32, $33=22
      cp $1=22, $32=33
      tx