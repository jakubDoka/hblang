======== SOURCE ========
fn(): uint {
    return add_one(10) + add_two(20)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%8 = CInt: 20 [, %9]
%6 = Mem: %5 [, %9]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %9]
%7 = Ret: %5 [, %13]
%12 = Ret: %10 [, %13]
%9 = Call: id: fn2, idepth: 0, %5, %6, %8 [, %10]
%13 = BinOp: +, %7, %12 [, %14]
%11 = Mem: %10 [, %14]
%10 = CallEnd: idepth: 0, %9 [, %11, %12, %14]
%14 = Return: idepth: 0, %10, %11, %13 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%8 = CInt: 20 [, %9]
%6 = Mem: %5 [, %9]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %9]
%7 = Ret: %5 [, %13]
%12 = Ret: %10 [, %13]
%9 = Call: id: fn2, idepth: 0, %5, %6, %8 [, %10]
%13 = BinOp: +, %7, %12 [, %14]
%11 = Mem: %10 [, %14]
%10 = CallEnd: idepth: 0, %9 [, %11, %12, %14]
%14 = Return: idepth: 0, %10, %11, %13 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %3 = CInt: 10
  %4 = Call: id: fn1, idepth: 2, %2, %3
%5 = CallEnd: idepth: 3, %4
  %6 = Mem
  %7 = Ret
  %8 = CInt: 20
  %9 = Call: id: fn2, idepth: 4, %6, %8
%10 = CallEnd: idepth: 5, %9
  %11 = Mem
  %12 = Ret
  %13 = BinOp: +, %7, %12
  %14 = Return: idepth: 0, %11, %13

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 2, 1, 1, 2, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    return x + 2
}
======== UNSCHEDULED SON ========
%7 = CInt: 2 [, %8]
%6 = Load: %5, %4 [, %8]
%3 = Arg: 0, %0 [, %5]
%4 = Local: 8, %2 [, %5, %6]
%2 = Mem: %0 [, %4, %5]
%0 = Start: idepth: 0 [, %1, %2, %3]
%8 = BinOp: +, %6, %7 [, %9]
%5 = Store: %1, %2, %4, %3 [, %6, %9]
%1 = Entry: idepth: 0, %0 [, %5, %9]
%9 = Return: idepth: 0, %1, %5, %8 []

======== OPTIMIZED SON ========
%3 = Arg: 0, %0 [, %11, %10]
%4 = Local: 8, %2 [, %11]
%2 = Mem: %0 [, %4, %11]
%0 = Start: idepth: 0 [, %1, %2, %3]
%10 = ImmBinOp: imm: 2, op: addi64, %3 [, %9]
%11 = Store: %2, %4, %3 [, %9]
%1 = Entry: idepth: 0, %0 [, %9]
%9 = Return: idepth: 0, %1, %11, %10 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %11 = Store: %2, %4, %3
  %10 = ImmBinOp: imm: 2, op: addi64, %3
  %9 = Return: idepth: 0, %11, %10

======== REGISTER SELECTION ========
{ 1, 2, 1, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    return x + 1
}
======== UNSCHEDULED SON ========
%7 = CInt: 1 [, %8]
%6 = Load: %5, %4 [, %8]
%3 = Arg: 0, %0 [, %5]
%4 = Local: 8, %2 [, %5, %6]
%2 = Mem: %0 [, %4, %5]
%0 = Start: idepth: 0 [, %1, %2, %3]
%8 = BinOp: +, %6, %7 [, %9]
%5 = Store: %1, %2, %4, %3 [, %6, %9]
%1 = Entry: idepth: 0, %0 [, %5, %9]
%9 = Return: idepth: 0, %1, %5, %8 []

======== OPTIMIZED SON ========
%3 = Arg: 0, %0 [, %11, %10]
%4 = Local: 8, %2 [, %11]
%2 = Mem: %0 [, %4, %11]
%0 = Start: idepth: 0 [, %1, %2, %3]
%10 = ImmBinOp: imm: 1, op: addi64, %3 [, %9]
%11 = Store: %2, %4, %3 [, %9]
%1 = Entry: idepth: 0, %0 [, %9]
%9 = Return: idepth: 0, %1, %11, %10 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %11 = Store: %2, %4, %3
  %10 = ImmBinOp: imm: 1, op: addi64, %3
  %9 = Return: idepth: 0, %11, %10

======== REGISTER SELECTION ========
{ 1, 2, 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -24, 24
     addi64 $254, $254, -24
       li64 $32, 10
         cp $2, $32
        jal $31, $0, :add_one
         cp $32, $1
       li64 $33, 20
         cp $2, $33
        jal $31, $0, :add_two
         cp $33, $1
      add64 $32, $32, $33
         cp $1, $32
     addi64 $254, $254, 24
         ld $31, $254, -24, 24
         tx
add_two:
     addi64 $254, $254, -8
         cp $14, $2
     addi64 $13, $254, 0
         st $14, $254, 0, 8
     addi64 $13, $14, 2
         cp $1, $13
     addi64 $254, $254, 8
       jala $0, $31, 0
add_one:
     addi64 $254, $254, -8
         cp $14, $2
     addi64 $13, $254, 0
         st $14, $254, 0, 8
     addi64 $13, $14, 1
         cp $1, $13
     addi64 $254, $254, 8
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -24, 24
  addi64 $254=10240, $254, -24
    li64 $32=0, 10
      cp $2=0, $32=10
     jal $31=0, $0=0, 139
  addi64 $254=10216, $254, -8
      cp $14=0, $2=10
  addi64 $13=0, $254=10208, 0
      st $14=10, $254=10208, 0, 8
  addi64 $13=10208, $14=10, 1
      cp $1=0, $13=11
  addi64 $254=10208, $254, 8
    jala $0=0, $31=44, 0
      cp $32=10, $1=11
    li64 $33=0, 20
      cp $2=10, $33=20
     jal $31=44, $0=0, 42
  addi64 $254=10216, $254, -8
      cp $14=10, $2=20
  addi64 $13=11, $254=10208, 0
      st $14=20, $254=10208, 0, 8
  addi64 $13=10208, $14=20, 2
      cp $1=11, $13=22
  addi64 $254=10208, $254, 8
    jala $0=0, $31=67, 0
      cp $33=20, $1=22
   add64 $32=11, $32, $33=22
      cp $1=22, $32=33
  addi64 $254=10216, $254, 24
      ld $31=67, $254=10240, -24, 24
      tx