======== SOURCE ========
fn(): uint {
    return add_one(10) + add_two(20)
}
======== UNSCHEDULED SON ========
%0 = Start: idpth: 0
%1 = Entry: idpth: 0, %0
%2 = CInt: 10
%3 = Call: fn1, idpth: 0, %2
%6 = CInt: 20
%4 = CallEnd: idpth: 0, %3
%7 = Call: fn2, idpth: 0, %6
%5 = Ret
%9 = Ret
%8 = CallEnd: idpth: 0, %7
%10 = BinOp: +, %5, %9
%11 = Return: idpth: 0, %10

======== OPTIMIZED SON ========
%0 = Start: idpth: 0
%1 = Entry: idpth: 0, %0
%2 = CInt: 10
%3 = Call: fn1, idpth: 0, %2
%6 = CInt: 20
%4 = CallEnd: idpth: 0, %3
%7 = Call: fn2, idpth: 0, %6
%5 = Ret
%9 = Ret
%8 = CallEnd: idpth: 0, %7
%10 = BinOp: +, %5, %9
%11 = Return: idpth: 0, %10

======== SCHEDULED SON ========
%0 =0 Start: idpth: 0
%1 =2 Entry: idpth: 1, %0
  %2 =4 CInt: 10
  %3 =2 Call: fn1, idpth: 2, %2
%4 =1 CallEnd: idpth: 3, %3
  %5 =3 Ret
  %6 =2 CInt: 20
  %7 =3 Call: fn2, idpth: 4, %6
%8 =0 CallEnd: idpth: 5, %7
  %9 =1 Ret
  %10 =0 BinOp: +, %5, %9
  %11 =3 Return: idpth: 0, %10

======== REGISTER SELECTION ========
{ 1, 1, 1, 2, 1 }

======== SOURCE ========
fn(x: uint): uint {
    return x + 2
}
======== UNSCHEDULED SON ========
%0 = Start: idpth: 0
%1 = Arg: 0
%3 = CInt: 2
%2 = Entry: idpth: 0, %0
%4 = BinOp: +, %1, %3
%5 = Return: idpth: 0, %4

======== OPTIMIZED SON ========
%0 = Start: idpth: 0
%1 = Arg: 0
%2 = Entry: idpth: 0, %0
%6 = ImmBinOp: addi64(2), %1
%5 = Return: idpth: 0, %6

======== SCHEDULED SON ========
%0 =0 Start: idpth: 0
%2 =0 Entry: idpth: 1, %0
  %1 =1 Arg: 0
  %6 =0 ImmBinOp: addi64(2), %1
  %5 =3 Return: idpth: 0, %6

======== REGISTER SELECTION ========
{ 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    return x + 1
}
======== UNSCHEDULED SON ========
%0 = Start: idpth: 0
%1 = Arg: 0
%3 = CInt: 1
%2 = Entry: idpth: 0, %0
%4 = BinOp: +, %1, %3
%5 = Return: idpth: 0, %4

======== OPTIMIZED SON ========
%0 = Start: idpth: 0
%1 = Arg: 0
%2 = Entry: idpth: 0, %0
%6 = ImmBinOp: addi64(1), %1
%5 = Return: idpth: 0, %6

======== SCHEDULED SON ========
%0 =0 Start: idpth: 0
%2 =0 Entry: idpth: 1, %0
  %1 =1 Arg: 0
  %6 =0 ImmBinOp: addi64(1), %1
  %5 =3 Return: idpth: 0, %6

======== REGISTER SELECTION ========
{ 1, 1 }

======== CODEGEN ========
       li64 $1, 10
         cp $2, $1
        jal $31, $0, :0
         cp $2, $1
       li64 $1, 20
         cp $2, $1
        jal $31, $0, :1
         cp $1, $1
      add64 $1, $2, $1
         cp $1, $1
         tx
1:       cp $1, $2
     addi64 $1, $1, 2
         cp $1, $1
       jala $0, $31, 0
0:       cp $1, $2
     addi64 $1, $1, 1
         cp $1, $1
       jala $0, $31, 0

======== EXECUTION ========
    li64 $1=0, 10
      cp $2=0, $1=10
     jal $31=0, $0=0, 69
      cp $1=10, $2=10
  addi64 $1=10, $1=10, 1
      cp $1=11, $1=11
    jala $0=0, $31=126782938767892, 0
      cp $2=10, $1=11
    li64 $1=11, 20
      cp $2=11, $1=20
     jal $31=126782938767892, $0=0, 18
      cp $1=20, $2=20
  addi64 $1=20, $1=20, 2
      cp $1=22, $1=22
    jala $0=0, $31=126782938767915, 0
      cp $1=22, $1=22
   add64 $1=22, $2=20, $1=22
      cp $1=42, $1=42
      tx