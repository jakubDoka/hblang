======== SOURCE ========
fn(): uint {
    return 10 - 20 / 2 + 4 * (2 + 2) - 4 * 4 + 1 - 1
}
======== UNSCHEDULED SON ========
%9 = CInt: 2 [, %10]
%8 = CInt: 2 [, %10]
%4 = CInt: 2 [, %5]
%3 = CInt: 20 [, %5]
%10 = BinOp: +, %8, %9 [, %11]
%7 = CInt: 4 [, %11]
%5 = BinOp: /, %3, %4 [, %6]
%2 = CInt: 10 [, %6]
%14 = CInt: 4 [, %15]
%13 = CInt: 4 [, %15]
%11 = BinOp: *, %7, %10 [, %12]
%6 = BinOp: -, %2, %5 [, %12]
%15 = BinOp: *, %13, %14 [, %16]
%12 = BinOp: +, %6, %11 [, %16]
%17 = CInt: 1 [, %18]
%16 = BinOp: -, %12, %15 [, %18]
%19 = CInt: 1 [, %20]
%18 = BinOp: +, %16, %17 [, %20]
%0 = Start: idpth: 0 [, %1]
%20 = BinOp: -, %18, %19 [, %21]
%1 = Entry: idpth: 0, %0 [, %21]
%21 = Return: idpth: 0, %1, %20 []

======== OPTIMIZED SON ========
%8 = CInt: 2 [, %22]
%4 = CInt: 2 [, %5]
%3 = CInt: 20 [, %5]
%22 = ImmBinOp: addi64(2), %8 [, %11]
%7 = CInt: 4 [, %11]
%5 = BinOp: /, %3, %4 [, %6]
%2 = CInt: 10 [, %6]
%13 = CInt: 4 [, %23]
%11 = BinOp: *, %7, %22 [, %12]
%6 = BinOp: -, %2, %5 [, %12]
%23 = ImmBinOp: muli64(4), %13 [, %16]
%12 = BinOp: +, %6, %11 [, %16]
%16 = BinOp: -, %12, %23 [, %24]
%24 = ImmBinOp: addi64(1), %16 [, %25]
%0 = Start: idpth: 0 [, %1]
%25 = ImmBinOp: addi64(-1), %24 [, %21]
%1 = Entry: idpth: 0, %0 [, %21]
%21 = Return: idpth: 0, %1, %25 []

======== SCHEDULED SON ========
%0 = Start: idpth: 0
%1 = Entry: idpth: 1, %0
  %2 = CInt: 10
  %3 = CInt: 20
  %4 = CInt: 2
  %7 = CInt: 4
  %8 = CInt: 2
  %13 = CInt: 4
  %5 = BinOp: /, %3, %4
  %22 = ImmBinOp: addi64(2), %8
  %23 = ImmBinOp: muli64(4), %13
  %6 = BinOp: -, %2, %5
  %11 = BinOp: *, %7, %22
  %12 = BinOp: +, %6, %11
  %16 = BinOp: -, %12, %23
  %24 = ImmBinOp: addi64(1), %16
  %25 = ImmBinOp: addi64(-1), %24
  %21 = Return: idpth: 0, %25

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 5, 6, 2, 3, 5, 1, 2, 1, 1, 1, 1, 1 }

======== CODEGEN ========
main:
    li64 $13, 10
    li64 $14, 20
    li64 $15, 2
    li64 $16, 4
    li64 $17, 2
    li64 $18, 4
  dirs64 $14, $0, $14, $15
  addi64 $15, $17, 2
  muli64 $17, $18, 4
   sub64 $13, $13, $14
   mul64 $14, $16, $15
   add64 $13, $13, $14
   sub64 $13, $13, $17
  addi64 $13, $13, 1
  addi64 $13, $13, -1
      cp $1, $13
      tx

======== EXECUTION ========
    li64 $13=0, 10
    li64 $14=0, 20
    li64 $15=0, 2
    li64 $16=0, 4
    li64 $17=0, 2
    li64 $18=0, 4
  dirs64 $14=20, $0=0, $14, $15=2
  addi64 $15=2, $17=2, 2
  muli64 $17=2, $18=4, 4
   sub64 $13=10, $13, $14=10
   mul64 $14=10, $16=4, $15=4
   add64 $13=0, $13, $14=16
   sub64 $13=16, $13, $17=16
  addi64 $13=0, $13, 1
  addi64 $13=1, $13, -1
      cp $1=0, $13=0
      tx