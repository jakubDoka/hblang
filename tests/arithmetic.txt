======== SOURCE ========
fn(): uint {
    return 10 - 20 / 2 + 4 * (2 + 2) - 4 * 4 + 1 - 1
}
======== UNSCHEDULED SON ========
%3 = CInt: 20
%4 = CInt: 2
%8 = CInt: 2
%9 = CInt: 2
%2 = CInt: 10
%5 = BinOp: /, %3, %4
%7 = CInt: 4
%10 = BinOp: +, %8, %9
%6 = BinOp: -, %2, %5
%11 = BinOp: *, %7, %10
%13 = CInt: 4
%14 = CInt: 4
%12 = BinOp: +, %6, %11
%15 = BinOp: *, %13, %14
%16 = BinOp: -, %12, %15
%17 = CInt: 1
%0 = Start: idpth: 0
%18 = BinOp: +, %16, %17
%19 = CInt: 1
%1 = Entry: idpth: 0, %0
%20 = BinOp: -, %18, %19
%21 = Return: idpth: 0, %20

======== OPTIMIZED SON ========
%3 = CInt: 20
%4 = CInt: 2
%8 = CInt: 2
%2 = CInt: 10
%5 = BinOp: /, %3, %4
%7 = CInt: 4
%22 = ImmBinOp: addi64(2), %8
%6 = BinOp: -, %2, %5
%11 = BinOp: *, %7, %22
%13 = CInt: 4
%12 = BinOp: +, %6, %11
%23 = ImmBinOp: muli64(4), %13
%16 = BinOp: -, %12, %23
%0 = Start: idpth: 0
%24 = ImmBinOp: addi64(1), %16
%1 = Entry: idpth: 0, %0
%25 = ImmBinOp: addi64(-1), %24
%21 = Return: idpth: 0, %25

======== SCHEDULED SON ========
%0 =0 Start: idpth: 0
%1 =0 Entry: idpth: 1, %0
  %2 =14 CInt: 10
  %3 =13 CInt: 20
  %4 =12 CInt: 2
  %7 =11 CInt: 4
  %8 =10 CInt: 2
  %13 =9 CInt: 4
  %5 =8 BinOp: /, %3, %4
  %22 =7 ImmBinOp: addi64(2), %8
  %23 =6 ImmBinOp: muli64(4), %13
  %6 =5 BinOp: -, %2, %5
  %11 =4 BinOp: *, %7, %22
  %12 =3 BinOp: +, %6, %11
  %16 =2 BinOp: -, %12, %23
  %24 =1 ImmBinOp: addi64(1), %16
  %25 =0 ImmBinOp: addi64(-1), %24
  %21 =16 Return: idpth: 0, %25

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1, 2, 3, 1, 2, 3, 1, 4, 2, 5, 6 }

======== CODEGEN ========
    li64 $18, 10
    li64 $17, 20
    li64 $14, 2
    li64 $16, 4
    li64 $13, 2
    li64 $15, 4
  dirs64 $14, $0, $17, $14
  addi64 $13, $13, 2
  muli64 $15, $15, 4
   sub64 $14, $18, $14
   mul64 $13, $16, $13
   add64 $13, $14, $13
   sub64 $13, $13, $15
  addi64 $13, $13, 1
  addi64 $13, $13, 18446744073709551615
      cp $1, $13
      tx

======== EXECUTION ========
    li64 $18=0, 10
    li64 $17=0, 20
    li64 $14=0, 2
    li64 $16=0, 4
    li64 $13=0, 2
    li64 $15=0, 4
  dirs64 $14=2, $0=0, $17=20, $14=2
  addi64 $13=2, $13=2, 2
  muli64 $15=4, $15=4, 4
   sub64 $14=10, $18=10, $14=10
   mul64 $13=4, $16=4, $13=4
   add64 $13=16, $14=0, $13=16
   sub64 $13=16, $13=16, $15=16
  addi64 $13=0, $13=0, 1
  addi64 $13=1, $13=1, -1
      cp $1=0, $13=0
      tx