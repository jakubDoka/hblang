======== SOURCE ========
fn(): uint {
    return 10 - 20 / 2 + 4 * (2 + 2) - 4 * 4 + 1 - 1
}
======== UNSCHEDULED SON ========
%5 = CInt: 2 [, %6, %9, %9]
%4 = CInt: 20 [, %6]
%9 = BinOp: +, %5, %5 [, %10]
%6 = BinOp: /, %4, %5 [, %7]
%3 = CInt: 10 [, %7]
%8 = CInt: 4 [, %10, %12, %12]
%10 = BinOp: *, %8, %9 [, %11]
%7 = BinOp: -, %3, %6 [, %11]
%12 = BinOp: *, %8, %8 [, %13]
%11 = BinOp: +, %7, %10 [, %13]
%13 = BinOp: -, %11, %12 [, %15]
%14 = CInt: 1 [, %15, %16]
%15 = BinOp: +, %13, %14 [, %16]
%0 = Start: idepth: 0 [, %1, %2]
%16 = BinOp: -, %15, %14 [, %17]
%2 = Mem: %0 [, %17]
%1 = Entry: idepth: 0, %0 [, %17]
%17 = Return: idepth: 0, %1, %2, %16 []

======== OPTIMIZED SON ========
%5 = CInt: 2 [, %6, %18]
%4 = CInt: 20 [, %6]
%18 = ImmBinOp: imm: 2, op: addi64, %5 [, %10]
%6 = BinOp: /, %4, %5 [, %7]
%3 = CInt: 10 [, %7]
%8 = CInt: 4 [, %10, %19]
%10 = BinOp: *, %8, %18 [, %11]
%7 = BinOp: -, %3, %6 [, %11]
%19 = ImmBinOp: imm: 4, op: muli64, %8 [, %13]
%11 = BinOp: +, %7, %10 [, %13]
%13 = BinOp: -, %11, %19 [, %20]
%20 = ImmBinOp: imm: 1, op: addi64, %13 [, %21]
%0 = Start: idepth: 0 [, %1, %2]
%21 = ImmBinOp: imm: -1, op: addi64, %20 [, %17]
%2 = Mem: %0 [, %17]
%1 = Entry: idepth: 0, %0 [, %17]
%17 = Return: idepth: 0, %1, %2, %21 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %3 = CInt: 10
  %4 = CInt: 20
  %5 = CInt: 2
  %8 = CInt: 4
  %6 = BinOp: /, %4, %5
  %18 = ImmBinOp: imm: 2, op: addi64, %5
  %19 = ImmBinOp: imm: 4, op: muli64, %8
  %7 = BinOp: -, %3, %6
  %10 = BinOp: *, %8, %18
  %11 = BinOp: +, %7, %10
  %13 = BinOp: -, %11, %19
  %20 = ImmBinOp: imm: 1, op: addi64, %13
  %21 = ImmBinOp: imm: -1, op: addi64, %20
  %17 = Return: idepth: 0, %2, %21

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 2, 3, 5, 1, 2, 1, 1, 1, 1, 1 }

======== CODEGEN ========
main:
    li64 $13, 10
    li64 $14, 20
    li64 $15, 2
    li64 $16, 4
  dirs64 $14, $0, $14, $15
  addi64 $15, $15, 2
  muli64 $17, $16, 4
   sub64 $13, $13, $14
   mul64 $14, $16, $15
   add64 $13, $13, $14
   sub64 $13, $13, $17
  addi64 $13, $13, 1
  addi64 $13, $13, -1
      cp $1, $13
      tx

======== EXECUTION ========
    li64 $13=0, 10
    li64 $14=0, 20
    li64 $15=0, 2
    li64 $16=0, 4
  dirs64 $14=20, $0=0, $14, $15=2
  addi64 $15=2, $15, 2
  muli64 $17=0, $16=4, 4
   sub64 $13=10, $13, $14=10
   mul64 $14=10, $16=4, $15=4
   add64 $13=0, $13, $14=16
   sub64 $13=16, $13, $17=16
  addi64 $13=0, $13, 1
  addi64 $13=1, $13, -1
      cp $1=0, $13=0
      tx