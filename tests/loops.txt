======== SOURCE ========
fn(): uint {
    return fib(10)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 10
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(n: uint): uint {
    b := 1
    a := 0
    loop {
        if n == 0 break
        c := a + b
        a = b
        b = c
        n -= 1
        continue
    }
    return a
}
======== UNSCHEDULED SON ========
%3 = Arg: 0, %0 [, %5]
%38 = Jmp: idepth: 0 [, %39]
%31 = Load: %30, %7 []
%34 = Load: %33, %4 [, %35]
%32 = Load: %30, %26 [, %33]
%37 = Jmp: idepth: 0, %22 [, %39]
%20 = Jmp: idepth: 0 [, %22]
%6 = CInt: 1 [, %8, %35]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3]
%39 = Region: idepth: 0, %37, %38 [, %40]
%21 = Jmp: idepth: 0, %19 [, %22]
%2 = Mem: %0 [, %4, %5, %7, %10, %26]
%30 = Store: %22, %27, %10, %29 [, %31, %32, %33]
%29 = Load: %27, %7 [, %30]
%28 = Load: %27, %10 []
%26 = Local: 8, %2 [, %27, %32]
%7 = Local: 8, %2 [, %8, %24, %29, %31, %33]
%35 = BinOp: -, %34, %6 [, %36]
%4 = Local: 8, %2 [, %5, %15, %34, %36]
%33 = Store: %22, %30, %7, %32 [, %34, %36]
%22 = Region: idepth: 0, %20, %21 [, %27, %30, %33, %36, %37]
%9 = CInt: 0 [, %11, %16]
%8 = Store: %1, %5, %7, %6 [, %11]
%1 = Entry: idepth: 0, %0 [, %5, %8, %11, %12]
%40 = Jmp: idepth: 0, %39 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%19 = Else: idepth: 0, %17 [, %21]
%16 = BinOp: ==, %15, %9 [, %17]
%25 = BinOp: +, %23, %24 [, %27]
%10 = Local: 8, %2 [, %11, %23, %28, %30]
%27 = Store: %22, %14, %26, %25 [, %28, %29, %30]
%24 = Load: %14, %7 [, %25]
%15 = Load: %14, %4 [, %16]
%36 = Store: %22, %33, %4, %35 [, %14]
%11 = Store: %1, %8, %10, %9 [, %14]
%13 = Loop: idepth: 0, %12, %40 [, %14, %17]
%17 = If: idepth: 0, %13, %16 [, %18, %19]
%23 = Load: %14, %10 [, %25, %41]
%14 = Phi: %13, %11, %36 [, %15, %23, %24, %27, %41]
%18 = Then: idepth: 0, %17 [, %41]
%41 = Return: idepth: 0, %18, %14, %23 []

======== OPTIMIZED SON ========
%3 = Arg: 0, %0 [, %42]
%0 = Start: idepth: 0 [, %1, %2, %3]
%6 = CInt: 1 [, %46]
%42 = Store: %2, %4, %3 [, %46]
%1 = Entry: idepth: 0, %0 [, %12]
%2 = Mem: %0 [, %4, %42, %7, %10, %26]
%26 = Local: 8, %2 [, %47]
%43 = Store: %47, %10, %24 [, %45]
%7 = Local: 8, %2 [, %46, %24, %45]
%44 = ImmBinOp: imm: -1, op: addi64, %15 [, %48]
%4 = Local: 8, %2 [, %42, %15, %48]
%45 = Store: %43, %7, %25 [, %48]
%46 = Store: %42, %7, %6 [, %49]
%40 = Jmp: idepth: 0, %19 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%19 = Else: idepth: 0, %50 [, %40]
%9 = CInt: 0 [, %49, %50]
%25 = BinOp: +, %23, %24 [, %47, %45]
%10 = Local: 8, %2 [, %49, %23, %43]
%47 = Store: %14, %26, %25 [, %43]
%24 = Load: %14, %7 [, %25, %43]
%15 = Load: %14, %4 [, %50, %44]
%48 = Store: %45, %4, %44 [, %14]
%49 = Store: %46, %10, %9 [, %14]
%13 = Loop: idepth: 0, %12, %40 [, %14, %50]
%50 = IfOp: swapped: false, op: jne, idepth: 0, %13, %15, %9 [, %18, %19]
%23 = Load: %14, %10 [, %25, %41]
%14 = Phi: %13, %49, %48 [, %15, %23, %24, %47, %41]
%18 = Then: idepth: 0, %50 [, %41]
%41 = Return: idepth: 0, %18, %14, %23 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %7 = Local: 8, %2
  %6 = CInt: 1
  %10 = Local: 8, %2
  %9 = CInt: 0
  %26 = Local: 8, %2
  %42 = Store: %2, %4, %3
  %46 = Store: %42, %7, %6
  %49 = Store: %46, %10, %9
  %12 = Jmp: idepth: 2
%13 = Loop: idepth: 3, %12, %40
  %14 = Phi: %49, %48
  %23 = Load: %14, %10
  %15 = Load: %14, %4
  %50 = IfOp: swapped: false, op: jne, idepth: 4, %15, %9
%18 = Then: idepth: 5, %50
  %41 = Return: idepth: 0, %14, %23
%19 = Else: idepth: 5, %50
  %24 = Load: %14, %7
  %44 = ImmBinOp: imm: -1, op: addi64, %15
  %25 = BinOp: +, %23, %24
  %47 = Store: %14, %26, %25, %15
  %43 = Store: %47, %10, %24
  %45 = Store: %43, %7, %25
  %48 = Store: %45, %4, %44
  %40 = Jmp: idepth: 6

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 5, 6, 7, 1, 1, 1, 1, 1, 2, 4, 1, 1, 8, 4, 2, 1, 1, 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 10
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
     addi64 $254, $254, -32
         cp $14, $2
     addi64 $13, $254, 0
     addi64 $15, $254, 8
       li64 $16, 1
     addi64 $17, $254, 16
       li64 $18, 0
     addi64 $19, $254, 24
         st $14, $254, 0, 8
         st $16, $254, 8, 8
         st $18, $254, 16, 8
2:       ld $14, $254, 16, 8
         ld $16, $254, 0, 8
        jne $16, $18, :1
         cp $1, $14
     addi64 $254, $254, 32
       jala $0, $31, 0
1:       ld $20, $254, 8, 8
     addi64 $16, $16, -1
      add64 $14, $14, $20
         st $14, $254, 24, 8
         st $20, $254, 16, 8
         st $14, $254, 8, 8
         st $16, $254, 0, 8
        jmp :2

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 10
      cp $2=0, $32=10
     jal $31=0, $0=0, 38
  addi64 $254=10224, $254, -32
      cp $14=0, $2=10
  addi64 $13=0, $254=10192, 0
  addi64 $15=0, $254=10192, 8
    li64 $16=0, 1
  addi64 $17=0, $254=10192, 16
    li64 $18=0, 0
  addi64 $19=0, $254=10192, 24
      st $14=10, $254=10192, 0, 8
      st $16=1, $254=10192, 8, 8
      st $18=0, $254=10192, 16, 8
      ld $14=10, $254=10192, 16, 8
      ld $16=1, $254=10192, 0, 8
     jne $16=10, $18=0, 30
      ld $20=0, $254=10192, 8, 8
  addi64 $16=10, $16, -1
   add64 $14=0, $14, $20=1
      st $14=1, $254=10192, 24, 8
      st $20=1, $254=10192, 16, 8
      st $14=1, $254=10192, 8, 8
      st $16=9, $254=10192, 0, 8
     jmp -136
      ld $14=1, $254=10192, 16, 8
      ld $16=9, $254=10192, 0, 8
     jne $16=9, $18=0, 30
      ld $20=1, $254=10192, 8, 8
  addi64 $16=9, $16, -1
   add64 $14=1, $14, $20=1
      st $14=2, $254=10192, 24, 8
      st $20=1, $254=10192, 16, 8
      st $14=2, $254=10192, 8, 8
      st $16=8, $254=10192, 0, 8
     jmp -136
      ld $14=2, $254=10192, 16, 8
      ld $16=8, $254=10192, 0, 8
     jne $16=8, $18=0, 30
      ld $20=1, $254=10192, 8, 8
  addi64 $16=8, $16, -1
   add64 $14=1, $14, $20=2
      st $14=3, $254=10192, 24, 8
      st $20=2, $254=10192, 16, 8
      st $14=3, $254=10192, 8, 8
      st $16=7, $254=10192, 0, 8
     jmp -136
      ld $14=3, $254=10192, 16, 8
      ld $16=7, $254=10192, 0, 8
     jne $16=7, $18=0, 30
      ld $20=2, $254=10192, 8, 8
  addi64 $16=7, $16, -1
   add64 $14=2, $14, $20=3
      st $14=5, $254=10192, 24, 8
      st $20=3, $254=10192, 16, 8
      st $14=5, $254=10192, 8, 8
      st $16=6, $254=10192, 0, 8
     jmp -136
      ld $14=5, $254=10192, 16, 8
      ld $16=6, $254=10192, 0, 8
     jne $16=6, $18=0, 30
      ld $20=3, $254=10192, 8, 8
  addi64 $16=6, $16, -1
   add64 $14=3, $14, $20=5
      st $14=8, $254=10192, 24, 8
      st $20=5, $254=10192, 16, 8
      st $14=8, $254=10192, 8, 8
      st $16=5, $254=10192, 0, 8
     jmp -136
      ld $14=8, $254=10192, 16, 8
      ld $16=5, $254=10192, 0, 8
     jne $16=5, $18=0, 30
      ld $20=5, $254=10192, 8, 8
  addi64 $16=5, $16, -1
   add64 $14=5, $14, $20=8
      st $14=13, $254=10192, 24, 8
      st $20=8, $254=10192, 16, 8
      st $14=13, $254=10192, 8, 8
      st $16=4, $254=10192, 0, 8
     jmp -136
      ld $14=13, $254=10192, 16, 8
      ld $16=4, $254=10192, 0, 8
     jne $16=4, $18=0, 30
      ld $20=8, $254=10192, 8, 8
  addi64 $16=4, $16, -1
   add64 $14=8, $14, $20=13
      st $14=21, $254=10192, 24, 8
      st $20=13, $254=10192, 16, 8
      st $14=21, $254=10192, 8, 8
      st $16=3, $254=10192, 0, 8
     jmp -136
      ld $14=21, $254=10192, 16, 8
      ld $16=3, $254=10192, 0, 8
     jne $16=3, $18=0, 30
      ld $20=13, $254=10192, 8, 8
  addi64 $16=3, $16, -1
   add64 $14=13, $14, $20=21
      st $14=34, $254=10192, 24, 8
      st $20=21, $254=10192, 16, 8
      st $14=34, $254=10192, 8, 8
      st $16=2, $254=10192, 0, 8
     jmp -136
      ld $14=34, $254=10192, 16, 8
      ld $16=2, $254=10192, 0, 8
     jne $16=2, $18=0, 30
      ld $20=21, $254=10192, 8, 8
  addi64 $16=2, $16, -1
   add64 $14=21, $14, $20=34
      st $14=55, $254=10192, 24, 8
      st $20=34, $254=10192, 16, 8
      st $14=55, $254=10192, 8, 8
      st $16=1, $254=10192, 0, 8
     jmp -136
      ld $14=55, $254=10192, 16, 8
      ld $16=1, $254=10192, 0, 8
     jne $16=1, $18=0, 30
      ld $20=34, $254=10192, 8, 8
  addi64 $16=1, $16, -1
   add64 $14=34, $14, $20=55
      st $14=89, $254=10192, 24, 8
      st $20=55, $254=10192, 16, 8
      st $14=89, $254=10192, 8, 8
      st $16=0, $254=10192, 0, 8
     jmp -136
      ld $14=89, $254=10192, 16, 8
      ld $16=0, $254=10192, 0, 8
     jne $16=0, $18=0, 30
      cp $1=0, $14=55
  addi64 $254=10192, $254, 32
    jala $0=0, $31=44, 0
      cp $32=10, $1=55
      cp $1=55, $32=55
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx