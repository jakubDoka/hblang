======== SOURCE ========
fn(): uint {
    return fib(10)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%1 = Mem: %0 [, %4]
%2 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %2, %1, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%1 = Mem: %0 [, %4]
%2 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %2, %1, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%2 = Entry: idepth: 0, %0
  %3 = CInt: 10
  %4 = Call: id: fn1, idepth: 0, %1, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(n: uint): uint {
    b := 1
    a := 0
    loop {
        if n == 0 break
        c := a + b
        a = b
        b = c
        n -= 1
        continue
    }
    return a
}
======== UNSCHEDULED SON ========
%14 = Jmp: idepth: 0 [, %16]
%20 = CInt: 1 [, %21]
%23 = Jmp: idepth: 0 [, %24]
%22 = Jmp: idepth: 0, %16 [, %24]
%16 = Region: idepth: 0, %14, %15 [, %22]
%21 = BinOp: -, %8, %20 [, %8]
%24 = Region: idepth: 0, %22, %23 [, %25]
%15 = Jmp: idepth: 0, %13 [, %16]
%9 = CInt: 0 [, %10]
%4 = CInt: 1 [, %18]
%8 = Phi: %7, %2, %21 [, %10, %21]
%25 = Jmp: idepth: 0, %24 [, %7]
%6 = Jmp: idepth: 0, %3 [, %7]
%3 = Entry: idepth: 0, %0 [, %6]
%2 = Arg: 0, %0 [, %8]
%13 = Else: idepth: 0, %11 [, %15]
%10 = BinOp: ==, %8, %9 [, %11]
%19 = BinOp: +, %17, %18 [, %18]
%18 = Phi: %7, %4, %19 [, %19, %17]
%5 = CInt: 0 [, %17]
%7 = Loop: idepth: 0, %6, %25 [, %8, %11, %17, %18]
%0 = Start: idepth: 0 [, %1, %2, %3]
%11 = If: swapped: false, idepth: 0, %7, %10 [, %12, %13]
%17 = Phi: %7, %5, %18 [, %19, %26]
%1 = Mem: %0 [, %26]
%12 = Then: idepth: 0, %11 [, %26]
%26 = Return: idepth: 0, %12, %1, %17 []

======== OPTIMIZED SON ========
%27 = ImmBinOp: imm: -1, op: addi64, %8 [, %8]
%9 = CInt: 0 [, %28]
%4 = CInt: 1 [, %18]
%8 = Phi: %7, %2, %27 [, %28, %27]
%25 = Jmp: idepth: 0, %13 [, %7]
%6 = Jmp: idepth: 0, %3 [, %7]
%3 = Entry: idepth: 0, %0 [, %6]
%2 = Arg: 0, %0 [, %8]
%13 = Else: idepth: 0, %11 [, %25]
%28 = CondOp: op: jne, %8, %9 [, %11]
%19 = BinOp: +, %17, %18 [, %18]
%18 = Phi: %7, %4, %19 [, %19, %17]
%5 = CInt: 0 [, %17]
%7 = Loop: idepth: 0, %6, %25 [, %8, %11, %17, %18]
%0 = Start: idepth: 0 [, %1, %2, %3]
%11 = If: swapped: false, idepth: 0, %7, %28 [, %12, %13]
%17 = Phi: %7, %5, %18 [, %19, %26]
%1 = Mem: %0 [, %26]
%12 = Then: idepth: 0, %11 [, %26]
%26 = Return: idepth: 0, %12, %1, %17 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%3 = Entry: idepth: 1, %0
  %2 = Arg: 0
  %5 = CInt: 0
  %4 = CInt: 1
  %9 = CInt: 0
  %6 = Jmp: idepth: 2
%7 = Loop: idepth: 3, %6, %25
  %8 = Phi: %2, %27
  %17 = Phi: %5, %18
  %18 = Phi: %4, %19
  %28 = CondOp: op: jne, %8, %9
  %11 = If: swapped: false, idepth: 4, %28
%12 = Then: idepth: 0, %11
  %26 = Return: idepth: 0, %1, %17
%13 = Else: idepth: 5, %11
  %19 = BinOp: +, %17, %18
  %27 = ImmBinOp: imm: -1, op: addi64, %8
  %25 = Jmp: idepth: 6

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 1, 5, 6, 7, 8, 1, 1, 8, 5, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 10
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
         cp $13, $2
       li64 $14, 0
       li64 $15, 1
       li64 $16, 0
         cp $17, $13
         cp $18, $14
         cp $19, $15
2:      jne $17, $16, :1
         cp $1, $18
       jala $0, $31, 0
1:    add64 $20, $18, $19
     addi64 $17, $17, -1
         cp $18, $19
         cp $19, $20
        jmp :2

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 10
      cp $2=0, $32=10
     jal $31=0, $0=0, 38
      cp $13=0, $2=10
    li64 $14=0, 0
    li64 $15=0, 1
    li64 $16=0, 0
      cp $17=0, $13=10
      cp $18=0, $14=0
      cp $19=0, $15=1
     jne $17=10, $16=0, 19
   add64 $20=0, $18=0, $19=1
  addi64 $17=10, $17, -1
      cp $18=0, $19=1
      cp $19=1, $20=1
     jmp -40
     jne $17=9, $16=0, 19
   add64 $20=1, $18=1, $19=1
  addi64 $17=9, $17, -1
      cp $18=1, $19=1
      cp $19=1, $20=2
     jmp -40
     jne $17=8, $16=0, 19
   add64 $20=2, $18=1, $19=2
  addi64 $17=8, $17, -1
      cp $18=1, $19=2
      cp $19=2, $20=3
     jmp -40
     jne $17=7, $16=0, 19
   add64 $20=3, $18=2, $19=3
  addi64 $17=7, $17, -1
      cp $18=2, $19=3
      cp $19=3, $20=5
     jmp -40
     jne $17=6, $16=0, 19
   add64 $20=5, $18=3, $19=5
  addi64 $17=6, $17, -1
      cp $18=3, $19=5
      cp $19=5, $20=8
     jmp -40
     jne $17=5, $16=0, 19
   add64 $20=8, $18=5, $19=8
  addi64 $17=5, $17, -1
      cp $18=5, $19=8
      cp $19=8, $20=13
     jmp -40
     jne $17=4, $16=0, 19
   add64 $20=13, $18=8, $19=13
  addi64 $17=4, $17, -1
      cp $18=8, $19=13
      cp $19=13, $20=21
     jmp -40
     jne $17=3, $16=0, 19
   add64 $20=21, $18=13, $19=21
  addi64 $17=3, $17, -1
      cp $18=13, $19=21
      cp $19=21, $20=34
     jmp -40
     jne $17=2, $16=0, 19
   add64 $20=34, $18=21, $19=34
  addi64 $17=2, $17, -1
      cp $18=21, $19=34
      cp $19=34, $20=55
     jmp -40
     jne $17=1, $16=0, 19
   add64 $20=55, $18=34, $19=55
  addi64 $17=1, $17, -1
      cp $18=34, $19=55
      cp $19=55, $20=89
     jmp -40
     jne $17=0, $16=0, 19
      cp $1=0, $18=55
    jala $0=0, $31=44, 0
      cp $32=10, $1=55
      cp $1=55, $32=55
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx