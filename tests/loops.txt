======== SOURCE ========
fn(): uint {
    return fib(10)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 10
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(n: uint): uint {
    b := 1
    a := 0
    loop {
        if n == 0 break
        c := a + b
        a = b
        b = c
        n -= 1
        continue
    }
    return a
}
======== UNSCHEDULED SON ========
%3 = Arg: 0, %0 [, %5]
%41 = Jmp: idepth: 0 [, %42]
%32 = Load: %31, %7 []
%37 = CInt: 1 [, %38]
%36 = Load: %34, %4 [, %38]
%35 = Load: %34, %4 []
%33 = Load: %31, %27 [, %34]
%40 = Jmp: idepth: 0, %23 [, %42]
%21 = Jmp: idepth: 0 [, %23]
%6 = CInt: 1 [, %8]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3]
%42 = Region: idepth: 0, %40, %41 [, %43]
%22 = Jmp: idepth: 0, %20 [, %23]
%16 = CInt: 0 [, %17]
%2 = Mem: %0 [, %4, %5, %7, %10, %27]
%31 = Store: %23, %28, %10, %30 [, %32, %33, %34]
%30 = Load: %28, %7 [, %31]
%29 = Load: %28, %10 []
%27 = Local: 8, %2 [, %28, %33]
%7 = Local: 8, %2 [, %8, %25, %30, %32, %34]
%26 = BinOp: +, %24, %25 [, %28]
%38 = BinOp: -, %36, %37 [, %39]
%4 = Local: 8, %2 [, %5, %15, %35, %36, %39]
%34 = Store: %23, %31, %7, %33 [, %35, %36, %39]
%23 = Region: idepth: 0, %21, %22 [, %28, %31, %34, %39, %40]
%9 = CInt: 0 [, %11]
%8 = Store: %1, %5, %7, %6 [, %11]
%1 = Entry: idepth: 0, %0 [, %5, %8, %11, %12]
%43 = Jmp: idepth: 0, %42 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%20 = Else: idepth: 0, %18 [, %22]
%17 = BinOp: ==, %15, %16 [, %18]
%10 = Local: 8, %2 [, %11, %24, %29, %31, %44]
%28 = Store: %23, %14, %27, %26 [, %29, %30, %31]
%25 = Load: %14, %7 [, %26]
%24 = Load: %14, %10 [, %26]
%15 = Load: %14, %4 [, %17]
%39 = Store: %23, %34, %4, %38 [, %14]
%11 = Store: %1, %8, %10, %9 [, %14]
%13 = Loop: idepth: 0, %12, %43 [, %14, %18]
%18 = If: swapped: false, idepth: 0, %13, %17 [, %19, %20]
%44 = Load: %14, %10 [, %45]
%14 = Phi: %13, %11, %39 [, %15, %24, %25, %28, %44, %45]
%19 = Then: idepth: 0, %18 [, %45]
%45 = Return: idepth: 0, %19, %14, %44 []

======== OPTIMIZED SON ========
%3 = Arg: 0, %0 [, %5]
%35 = Load: %34, %4 [, %46]
%33 = Load: %31, %27 [, %34]
%6 = CInt: 1 [, %8]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3]
%16 = CInt: 0 [, %47]
%2 = Mem: %0 [, %4, %5, %7, %10, %27]
%30 = Load: %28, %7 [, %31]
%31 = Store: %20, %28, %10, %30 [, %34, %33]
%27 = Local: 8, %2 [, %28, %33]
%7 = Local: 8, %2 [, %8, %25, %30, %34]
%46 = ImmBinOp: imm: -1, op: addi64, %35 [, %39]
%4 = Local: 8, %2 [, %5, %15, %35, %39]
%34 = Store: %20, %31, %7, %33 [, %35, %39]
%9 = CInt: 0 [, %11]
%8 = Store: %1, %5, %7, %6 [, %11]
%1 = Entry: idepth: 0, %0 [, %5, %8, %11, %12]
%43 = Jmp: idepth: 0, %20 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%20 = Else: idepth: 0, %18 [, %43, %28, %31, %34, %39]
%47 = CondOp: op: jne, %15, %16 [, %18]
%26 = BinOp: +, %44, %25 [, %28]
%10 = Local: 8, %2 [, %11, %31, %44]
%28 = Store: %20, %14, %27, %26 [, %31, %30]
%25 = Load: %14, %7 [, %26]
%15 = Load: %14, %4 [, %47]
%39 = Store: %20, %34, %4, %46 [, %14]
%11 = Store: %1, %8, %10, %9 [, %14]
%13 = Loop: idepth: 0, %12, %43 [, %14, %18]
%18 = If: swapped: false, idepth: 0, %13, %47 [, %19, %20]
%44 = Load: %14, %10 [, %45, %26]
%14 = Phi: %13, %11, %39 [, %15, %45, %25, %28, %44]
%19 = Then: idepth: 0, %18 [, %45]
%45 = Return: idepth: 0, %19, %14, %44 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %7 = Local: 8, %2
  %6 = CInt: 1
  %10 = Local: 8, %2
  %9 = CInt: 0
  %27 = Local: 8, %2
  %16 = CInt: 0
  %5 = Store: %2, %4, %3
  %8 = Store: %5, %7, %6
  %11 = Store: %8, %10, %9
  %12 = Jmp: idepth: 2
%13 = Loop: idepth: 3, %12, %43
  %14 = Phi: %11, %39
  %44 = Load: %14, %10
  %25 = Load: %14, %7
  %15 = Load: %14, %4
  %26 = BinOp: +, %44, %25
  %47 = CondOp: op: jne, %15, %16
  %18 = If: swapped: false, idepth: 4, %47
%19 = Then: idepth: 0, %18
  %45 = Return: idepth: 0, %14, %44
%20 = Else: idepth: 5, %18
  %28 = Store: %14, %27, %26
  %30 = Load: %28, %7
  %31 = Store: %28, %10, %30
  %33 = Load: %31, %27
  %34 = Store: %31, %7, %33
  %35 = Load: %34, %4
  %46 = ImmBinOp: imm: -1, op: addi64, %35
  %39 = Store: %34, %4, %46
  %43 = Jmp: idepth: 6

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 5, 6, 7, 8, 1, 1, 1, 1, 1, 2, 4, 6, 4, 6, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 10
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
     addi64 $254, $254, -32
         cp $14, $2
     addi64 $13, $254, 0
     addi64 $15, $254, 8
       li64 $16, 1
     addi64 $17, $254, 16
       li64 $18, 0
     addi64 $19, $254, 24
       li64 $20, 0
         st $14, $254, 0, 8
         st $16, $254, 8, 8
         st $18, $254, 16, 8
2:       ld $14, $254, 16, 8
         ld $16, $254, 8, 8
         ld $18, $254, 0, 8
      add64 $16, $14, $16
        jne $18, $20, :1
         cp $1, $14
     addi64 $254, $254, 32
       jala $0, $31, 0
1:       st $16, $254, 24, 8
         ld $14, $254, 8, 8
         st $14, $254, 16, 8
         ld $14, $254, 24, 8
         st $14, $254, 8, 8
         ld $14, $254, 0, 8
     addi64 $14, $14, -1
         st $14, $254, 0, 8
        jmp :2

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 10
      cp $2=0, $32=10
     jal $31=0, $0=0, 38
  addi64 $254=10224, $254, -32
      cp $14=0, $2=10
  addi64 $13=0, $254=10192, 0
  addi64 $15=0, $254=10192, 8
    li64 $16=0, 1
  addi64 $17=0, $254=10192, 16
    li64 $18=0, 0
  addi64 $19=0, $254=10192, 24
    li64 $20=0, 0
      st $14=10, $254=10192, 0, 8
      st $16=1, $254=10192, 8, 8
      st $18=0, $254=10192, 16, 8
      ld $14=10, $254=10192, 16, 8
      ld $16=1, $254=10192, 8, 8
      ld $18=0, $254=10192, 0, 8
   add64 $16=1, $14=0, $16
     jne $18=10, $20=0, 30
      st $16=1, $254=10192, 24, 8
      ld $14=0, $254=10192, 8, 8
      st $14=1, $254=10192, 16, 8
      ld $14=1, $254=10192, 24, 8
      st $14=1, $254=10192, 8, 8
      ld $14=1, $254=10192, 0, 8
  addi64 $14=10, $14, -1
      st $14=9, $254=10192, 0, 8
     jmp -175
      ld $14=9, $254=10192, 16, 8
      ld $16=1, $254=10192, 8, 8
      ld $18=10, $254=10192, 0, 8
   add64 $16=1, $14=1, $16
     jne $18=9, $20=0, 30
      st $16=2, $254=10192, 24, 8
      ld $14=1, $254=10192, 8, 8
      st $14=1, $254=10192, 16, 8
      ld $14=1, $254=10192, 24, 8
      st $14=2, $254=10192, 8, 8
      ld $14=2, $254=10192, 0, 8
  addi64 $14=9, $14, -1
      st $14=8, $254=10192, 0, 8
     jmp -175
      ld $14=8, $254=10192, 16, 8
      ld $16=2, $254=10192, 8, 8
      ld $18=9, $254=10192, 0, 8
   add64 $16=2, $14=1, $16
     jne $18=8, $20=0, 30
      st $16=3, $254=10192, 24, 8
      ld $14=1, $254=10192, 8, 8
      st $14=2, $254=10192, 16, 8
      ld $14=2, $254=10192, 24, 8
      st $14=3, $254=10192, 8, 8
      ld $14=3, $254=10192, 0, 8
  addi64 $14=8, $14, -1
      st $14=7, $254=10192, 0, 8
     jmp -175
      ld $14=7, $254=10192, 16, 8
      ld $16=3, $254=10192, 8, 8
      ld $18=8, $254=10192, 0, 8
   add64 $16=3, $14=2, $16
     jne $18=7, $20=0, 30
      st $16=5, $254=10192, 24, 8
      ld $14=2, $254=10192, 8, 8
      st $14=3, $254=10192, 16, 8
      ld $14=3, $254=10192, 24, 8
      st $14=5, $254=10192, 8, 8
      ld $14=5, $254=10192, 0, 8
  addi64 $14=7, $14, -1
      st $14=6, $254=10192, 0, 8
     jmp -175
      ld $14=6, $254=10192, 16, 8
      ld $16=5, $254=10192, 8, 8
      ld $18=7, $254=10192, 0, 8
   add64 $16=5, $14=3, $16
     jne $18=6, $20=0, 30
      st $16=8, $254=10192, 24, 8
      ld $14=3, $254=10192, 8, 8
      st $14=5, $254=10192, 16, 8
      ld $14=5, $254=10192, 24, 8
      st $14=8, $254=10192, 8, 8
      ld $14=8, $254=10192, 0, 8
  addi64 $14=6, $14, -1
      st $14=5, $254=10192, 0, 8
     jmp -175
      ld $14=5, $254=10192, 16, 8
      ld $16=8, $254=10192, 8, 8
      ld $18=6, $254=10192, 0, 8
   add64 $16=8, $14=5, $16
     jne $18=5, $20=0, 30
      st $16=13, $254=10192, 24, 8
      ld $14=5, $254=10192, 8, 8
      st $14=8, $254=10192, 16, 8
      ld $14=8, $254=10192, 24, 8
      st $14=13, $254=10192, 8, 8
      ld $14=13, $254=10192, 0, 8
  addi64 $14=5, $14, -1
      st $14=4, $254=10192, 0, 8
     jmp -175
      ld $14=4, $254=10192, 16, 8
      ld $16=13, $254=10192, 8, 8
      ld $18=5, $254=10192, 0, 8
   add64 $16=13, $14=8, $16
     jne $18=4, $20=0, 30
      st $16=21, $254=10192, 24, 8
      ld $14=8, $254=10192, 8, 8
      st $14=13, $254=10192, 16, 8
      ld $14=13, $254=10192, 24, 8
      st $14=21, $254=10192, 8, 8
      ld $14=21, $254=10192, 0, 8
  addi64 $14=4, $14, -1
      st $14=3, $254=10192, 0, 8
     jmp -175
      ld $14=3, $254=10192, 16, 8
      ld $16=21, $254=10192, 8, 8
      ld $18=4, $254=10192, 0, 8
   add64 $16=21, $14=13, $16
     jne $18=3, $20=0, 30
      st $16=34, $254=10192, 24, 8
      ld $14=13, $254=10192, 8, 8
      st $14=21, $254=10192, 16, 8
      ld $14=21, $254=10192, 24, 8
      st $14=34, $254=10192, 8, 8
      ld $14=34, $254=10192, 0, 8
  addi64 $14=3, $14, -1
      st $14=2, $254=10192, 0, 8
     jmp -175
      ld $14=2, $254=10192, 16, 8
      ld $16=34, $254=10192, 8, 8
      ld $18=3, $254=10192, 0, 8
   add64 $16=34, $14=21, $16
     jne $18=2, $20=0, 30
      st $16=55, $254=10192, 24, 8
      ld $14=21, $254=10192, 8, 8
      st $14=34, $254=10192, 16, 8
      ld $14=34, $254=10192, 24, 8
      st $14=55, $254=10192, 8, 8
      ld $14=55, $254=10192, 0, 8
  addi64 $14=2, $14, -1
      st $14=1, $254=10192, 0, 8
     jmp -175
      ld $14=1, $254=10192, 16, 8
      ld $16=55, $254=10192, 8, 8
      ld $18=2, $254=10192, 0, 8
   add64 $16=55, $14=34, $16
     jne $18=1, $20=0, 30
      st $16=89, $254=10192, 24, 8
      ld $14=34, $254=10192, 8, 8
      st $14=55, $254=10192, 16, 8
      ld $14=55, $254=10192, 24, 8
      st $14=89, $254=10192, 8, 8
      ld $14=89, $254=10192, 0, 8
  addi64 $14=1, $14, -1
      st $14=0, $254=10192, 0, 8
     jmp -175
      ld $14=0, $254=10192, 16, 8
      ld $16=89, $254=10192, 8, 8
      ld $18=1, $254=10192, 0, 8
   add64 $16=89, $14=55, $16
     jne $18=0, $20=0, 30
      cp $1=0, $14=55
  addi64 $254=10192, $254, 32
    jala $0=0, $31=44, 0
      cp $32=10, $1=55
      cp $1=55, $32=55
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx