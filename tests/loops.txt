======== SOURCE ========
fn(): uint {
    return fib(10)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 10 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 10
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(n: uint): uint {
    b := 1
    a := 0
    loop {
        if n == 0 break
        c := a + b
        a = b
        b = c
        n -= 1
        continue
    }
    return a
}
======== UNSCHEDULED SON ========
%3 = Arg: 0, %0 [, %5]
%38 = Jmp: idepth: 0 [, %39]
%31 = Load: %30, %7 []
%34 = Load: %33, %4 [, %35]
%32 = Load: %30, %26 [, %33]
%37 = Jmp: idepth: 0, %22 [, %39]
%20 = Jmp: idepth: 0 [, %22]
%6 = CInt: 1 [, %8, %35]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3]
%39 = Region: idepth: 0, %37, %38 [, %40]
%21 = Jmp: idepth: 0, %19 [, %22]
%2 = Mem: %0 [, %4, %5, %7, %10, %26]
%30 = Store: %22, %27, %10, %29 [, %31, %32, %33]
%29 = Load: %27, %7 [, %30]
%28 = Load: %27, %10 []
%26 = Local: 8, %2 [, %27, %32]
%7 = Local: 8, %2 [, %8, %24, %29, %31, %33]
%35 = BinOp: -, %34, %6 [, %36]
%4 = Local: 8, %2 [, %5, %15, %34, %36]
%33 = Store: %22, %30, %7, %32 [, %34, %36]
%22 = Region: idepth: 0, %20, %21 [, %27, %30, %33, %36, %37]
%9 = CInt: 0 [, %11, %16]
%8 = Store: %1, %5, %7, %6 [, %11]
%1 = Entry: idepth: 0, %0 [, %5, %8, %11, %12]
%40 = Jmp: idepth: 0, %39 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%19 = Else: idepth: 0, %17 [, %21]
%16 = BinOp: ==, %15, %9 [, %17]
%25 = BinOp: +, %23, %24 [, %27]
%10 = Local: 8, %2 [, %11, %23, %28, %30]
%27 = Store: %22, %14, %26, %25 [, %28, %29, %30]
%24 = Load: %14, %7 [, %25]
%15 = Load: %14, %4 [, %16]
%36 = Store: %22, %33, %4, %35 [, %14]
%11 = Store: %1, %8, %10, %9 [, %14]
%13 = Loop: idepth: 0, %12, %40 [, %14, %17]
%17 = If: idepth: 0, %13, %16 [, %18, %19]
%23 = Load: %14, %10 [, %25, %41]
%14 = Phi: %13, %11, %36 [, %15, %23, %24, %27, %41]
%18 = Then: idepth: 0, %17 [, %41]
%41 = Return: idepth: 0, %18, %14, %23 []

======== OPTIMIZED SON ========
%46 = ImmBinOp: imm: -1, op: addi64, %42 [, %50, %42]
%6 = CInt: 1 [, %45]
%42 = Phi: %13, %3, %46 [, %46]
%40 = Jmp: idepth: 0, %19 [, %13]
%12 = Jmp: idepth: 0, %1 [, %13]
%3 = Arg: 0, %0 [, %50, %42]
%1 = Entry: idepth: 0, %0 [, %12]
%19 = Else: idepth: 0, %53 [, %40]
%50 = Phi: %13, %3, %46 [, %53]
%25 = BinOp: +, %54, %45 [, %45]
%45 = Phi: %13, %6, %25 [, %54, %25]
%9 = CInt: 0 [, %54, %53]
%13 = Loop: idepth: 0, %12, %40 [, %54, %53, %42, %45, %50]
%0 = Start: idepth: 0 [, %1, %2, %3]
%53 = IfOp: swapped: false, op: jne, idepth: 0, %13, %50, %9 [, %18, %19]
%54 = Phi: %13, %9, %45 [, %25, %41]
%2 = Mem: %0 [, %41]
%18 = Then: idepth: 0, %53 [, %41]
%41 = Return: idepth: 0, %18, %2, %54 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %9 = CInt: 0
  %3 = Arg: 0
  %6 = CInt: 1
  %12 = Jmp: idepth: 2
%13 = Loop: idepth: 3, %12, %40
  %54 = Phi: %9, %45
  %42 = Phi: %3, %46
  %45 = Phi: %6, %25
  %50 = Phi: %3, %46
  %46 = ImmBinOp: imm: -1, op: addi64, %42
  %53 = IfOp: swapped: false, op: jne, idepth: 4, %50, %9
%18 = Then: idepth: 0, %53
  %41 = Return: idepth: 0, %2, %54
%19 = Else: idepth: 5, %53
  %25 = BinOp: +, %54, %45
  %40 = Jmp: idepth: 6

======== REGISTER SELECTION ========
{ 1, 2, 3, 1, 4, 5, 6, 7, 8, 1, 1, 7, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 10
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
         cp $14, $2
       li64 $13, 0
       li64 $15, 1
         cp $16, $13
         cp $17, $14
         cp $18, $15
         cp $19, $14
2:   addi64 $20, $17, -1
        jne $19, $13, :1
         cp $1, $16
       jala $0, $31, 0
1:    add64 $19, $16, $18
         cp $16, $18
         cp $17, $20
         cp $18, $19
         cp $19, $20
        jmp :2

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 10
      cp $2=0, $32=10
     jal $31=0, $0=0, 38
      cp $14=0, $2=10
    li64 $13=0, 0
    li64 $15=0, 1
      cp $16=0, $13=0
      cp $17=0, $14=10
      cp $18=0, $15=1
      cp $19=0, $14=10
  addi64 $20=0, $17=10, -1
     jne $19=10, $13=0, 19
   add64 $19=10, $16=0, $18=1
      cp $16=0, $18=1
      cp $17=10, $20=9
      cp $18=1, $19=1
      cp $19=1, $20=9
     jmp -46
  addi64 $20=9, $17=9, -1
     jne $19=9, $13=0, 19
   add64 $19=9, $16=1, $18=1
      cp $16=1, $18=1
      cp $17=9, $20=8
      cp $18=1, $19=2
      cp $19=2, $20=8
     jmp -46
  addi64 $20=8, $17=8, -1
     jne $19=8, $13=0, 19
   add64 $19=8, $16=1, $18=2
      cp $16=1, $18=2
      cp $17=8, $20=7
      cp $18=2, $19=3
      cp $19=3, $20=7
     jmp -46
  addi64 $20=7, $17=7, -1
     jne $19=7, $13=0, 19
   add64 $19=7, $16=2, $18=3
      cp $16=2, $18=3
      cp $17=7, $20=6
      cp $18=3, $19=5
      cp $19=5, $20=6
     jmp -46
  addi64 $20=6, $17=6, -1
     jne $19=6, $13=0, 19
   add64 $19=6, $16=3, $18=5
      cp $16=3, $18=5
      cp $17=6, $20=5
      cp $18=5, $19=8
      cp $19=8, $20=5
     jmp -46
  addi64 $20=5, $17=5, -1
     jne $19=5, $13=0, 19
   add64 $19=5, $16=5, $18=8
      cp $16=5, $18=8
      cp $17=5, $20=4
      cp $18=8, $19=13
      cp $19=13, $20=4
     jmp -46
  addi64 $20=4, $17=4, -1
     jne $19=4, $13=0, 19
   add64 $19=4, $16=8, $18=13
      cp $16=8, $18=13
      cp $17=4, $20=3
      cp $18=13, $19=21
      cp $19=21, $20=3
     jmp -46
  addi64 $20=3, $17=3, -1
     jne $19=3, $13=0, 19
   add64 $19=3, $16=13, $18=21
      cp $16=13, $18=21
      cp $17=3, $20=2
      cp $18=21, $19=34
      cp $19=34, $20=2
     jmp -46
  addi64 $20=2, $17=2, -1
     jne $19=2, $13=0, 19
   add64 $19=2, $16=21, $18=34
      cp $16=21, $18=34
      cp $17=2, $20=1
      cp $18=34, $19=55
      cp $19=55, $20=1
     jmp -46
  addi64 $20=1, $17=1, -1
     jne $19=1, $13=0, 19
   add64 $19=1, $16=34, $18=55
      cp $16=34, $18=55
      cp $17=1, $20=0
      cp $18=55, $19=89
      cp $19=89, $20=0
     jmp -46
  addi64 $20=0, $17=0, -1
     jne $19=0, $13=0, 19
      cp $1=0, $16=55
    jala $0=0, $31=44, 0
      cp $32=10, $1=55
      cp $1=55, $32=55
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx