======== SOURCE ========
fn(): uint {
	i := Color.(0, 0, 0, 0)
	i += .(1, 1, 1, 1)
	if i.r + i.g + i.b + i.a != 4 return 1001

	//if Point.(1, 1) != Point.(1, 1) return 1002
	//if Point.(1, 2) == Point.(1, 1) return 1003

	a := Point.(1, 2)
	b := Point.(3, 4)

	d := Rect.(a + b, b - a)
	zp := Point.(0, 0)
	d2 := Rect.(zp - b, a)
	d2 += d

	c := d2.a + d2.b
	return c.x + c.y
}
======== UNSCHEDULED SON ========
%87 = CInt: 24 [, %88, %124, %125]
%125 = BinOp: iadd, %97, %87 [, %126, %139]
%53 = UnOp: uext, %52 [, %55]
%41 = Load: %38, %22 [, %42]
%40 = Load: %38, %14 [, %42]
%37 = BinOp: iadd, %35, %36 [, %38]
%36 = Load: %33, %20 [, %37]
%35 = Load: %33, %11 [, %37]
%32 = BinOp: iadd, %30, %31 [, %33]
%31 = Load: %28, %18 [, %32]
%30 = Load: %28, %8 [, %32]
%27 = BinOp: iadd, %25, %26 [, %28]
%26 = Load: %23, %16 [, %27]
%22 = BinOp: iadd, %16, %13 [, %23, %41]
%20 = BinOp: iadd, %16, %10 [, %21, %36]
%18 = BinOp: iadd, %16, %7 [, %19, %31]
%16 = Local: 4, %2 [, %17, %18, %20, %22, %26]
%134 = Load: %131, %107 [, %135]
%133 = Load: %131, %97 [, %135]
%130 = CInt: 32 [, %131]
%128 = BinOp: iadd, %126, %127 [, %129]
%124 = BinOp: iadd, %109, %87 [, %129]
%127 = Load: %123, %88 [, %128]
%126 = Load: %123, %125 [, %128]
%122 = BinOp: iadd, %120, %121 [, %123]
%119 = BinOp: iadd, %109, %81 [, %123]
%121 = Load: %118, %82 [, %122]
%120 = Load: %118, %107 [, %122]
%117 = BinOp: iadd, %115, %116 [, %118]
%114 = BinOp: iadd, %109, %64 [, %118]
%116 = Load: %113, %76 [, %117]
%115 = Load: %113, %102 [, %117]
%112 = BinOp: iadd, %110, %111 [, %113]
%109 = Local: 32, %2 [, %113, %114, %119, %124, %131]
%111 = Load: %108, %71 [, %112]
%110 = Load: %108, %97 [, %112]
%81 = CInt: 16 [, %82, %107, %108, %119]
%107 = BinOp: iadd, %97, %81 [, %108, %120, %134]
%105 = BinOp: isub, %103, %104 [, %106]
%102 = BinOp: iadd, %97, %64 [, %106, %115, %138]
%104 = Load: %101, %69 [, %105]
%103 = Load: %101, %95 [, %105]
%100 = BinOp: isub, %98, %99 [, %101]
%97 = Local: 32, %2 [, %101, %102, %107, %133, %110, %125, %131]
%99 = Load: %96, %67 [, %100]
%98 = Load: %96, %93 [, %100]
%95 = BinOp: iadd, %93, %64 [, %96, %103]
%5 = CInt: 0 [, %6, %9, %12, %15, %94, %96]
%93 = Local: 16, %2 [, %94, %95, %98]
%91 = BinOp: isub, %89, %90 [, %92]
%88 = BinOp: iadd, %71, %87 [, %92, %127]
%90 = Load: %86, %65 [, %91]
%89 = Load: %86, %69 [, %91]
%85 = BinOp: isub, %83, %84 [, %86]
%82 = BinOp: iadd, %71, %81 [, %86, %121]
%84 = Load: %80, %62 [, %85]
%83 = Load: %80, %67 [, %85]
%79 = BinOp: iadd, %77, %78 [, %80]
%76 = BinOp: iadd, %71, %64 [, %80, %116]
%78 = Load: %75, %69 [, %79]
%77 = Load: %75, %65 [, %79]
%74 = BinOp: iadd, %72, %73 [, %75]
%71 = Local: 32, %2 [, %75, %76, %82, %88, %111]
%73 = Load: %70, %67 [, %74]
%72 = Load: %70, %62 [, %74]
%69 = BinOp: iadd, %67, %64 [, %70, %78, %89, %104]
%13 = CInt: 3 [, %14, %22, %39, %68]
%67 = Local: 16, %2 [, %68, %69, %99, %73, %83]
%10 = CInt: 2 [, %11, %20, %34, %66]
%65 = BinOp: iadd, %62, %64 [, %66, %77, %90]
%55 = BinOp: ne, %53, %54 [, %57]
%64 = CInt: 8 [, %65, %69, %76, %95, %102, %114, %137]
%139 = Load: %136, %125 [, %140]
%138 = Load: %136, %102 [, %140]
%135 = BinOp: iadd, %133, %134 [, %136]
%132 = Local: 16, %2 [, %136, %137, %142]
%7 = CInt: 1 [, %8, %17, %18, %19, %21, %23, %29, %63]
%62 = Local: 16, %2 [, %63, %65, %108, %72, %84]
%52 = BinOp: iadd, %50, %51 [, %53]
%50 = BinOp: iadd, %48, %49 [, %52]
%48 = BinOp: iadd, %46, %47 [, %50]
%54 = UnOp: uext, %44 [, %55]
%34 = BinOp: iadd, %24, %10 [, %38]
%29 = BinOp: iadd, %24, %7 [, %33]
%25 = Load: %23, %4 [, %27]
%14 = BinOp: iadd, %4, %13 [, %15, %40, %51]
%11 = BinOp: iadd, %4, %10 [, %12, %35, %46]
%8 = BinOp: iadd, %4, %7 [, %9, %30, %47]
%2 = Mem: %0 [, %6, %4, %16, %24, %62, %67, %71, %93, %97, %109, %132]
%42 = BinOp: iadd, %40, %41 [, %43]
%39 = BinOp: iadd, %24, %13 [, %43]
%38 = Store: %1, %33, %34, %37 [, %43, %40, %41]
%33 = Store: %1, %28, %29, %32 [, %38, %35, %36]
%28 = Store: %1, %23, %24, %27 [, %33, %30, %31]
%23 = Store: %1, %21, %22, %7 [, %28, %25, %26]
%21 = Store: %1, %19, %20, %7 [, %23]
%19 = Store: %1, %17, %18, %7 [, %21]
%17 = Store: %1, %15, %16, %7 [, %19]
%15 = Store: %1, %12, %14, %5 [, %17]
%12 = Store: %1, %9, %11, %5 [, %15]
%9 = Store: %1, %6, %8, %5 [, %12]
%6 = Store: %1, %2, %4, %5 [, %9]
%0 = Start: idepth: 0 [, %1, %2]
%131 = MemCpy: %61, %129, %97, %109, %130 [, %136, %133, %134]
%129 = Store: %61, %123, %124, %128 [, %131]
%123 = Store: %61, %118, %119, %122 [, %129, %126, %127]
%118 = Store: %61, %113, %114, %117 [, %123, %120, %121]
%113 = Store: %61, %108, %109, %112 [, %118, %115, %116]
%108 = MemCpy: %61, %106, %107, %62, %81 [, %113, %110, %111]
%106 = Store: %61, %101, %102, %105 [, %108]
%101 = Store: %61, %96, %97, %100 [, %106, %103, %104]
%96 = Store: %61, %94, %95, %5 [, %101, %98, %99]
%94 = Store: %61, %92, %93, %5 [, %96]
%92 = Store: %61, %86, %88, %91 [, %94]
%86 = Store: %61, %80, %82, %85 [, %92, %89, %90]
%80 = Store: %61, %75, %76, %79 [, %86, %83, %84]
%75 = Store: %61, %70, %71, %74 [, %80, %77, %78]
%70 = Store: %61, %68, %69, %44 [, %75, %72, %73]
%68 = Store: %61, %66, %67, %13 [, %70]
%66 = Store: %61, %63, %65, %10 [, %68]
%57 = If: idepth: 0, %1, %55 [, %58, %61]
%143 = Load: %141, %137 [, %144]
%142 = Load: %141, %132 [, %144]
%140 = BinOp: iadd, %138, %139 [, %141]
%137 = BinOp: iadd, %132, %64 [, %141, %143]
%136 = Store: %61, %131, %132, %135 [, %141, %138, %139]
%63 = Store: %61, %45, %62, %7 [, %66]
%51 = Load: %45, %14 [, %52]
%49 = Load: %45, %4 [, %50]
%47 = Load: %45, %8 [, %48]
%46 = Load: %45, %11 [, %48]
%44 = CInt: 4 [, %45, %54, %70]
%24 = Local: 4, %2 [, %28, %29, %34, %39, %45]
%4 = Local: 4, %2 [, %6, %8, %11, %14, %49, %25, %45]
%43 = Store: %1, %38, %39, %42 [, %45]
%1 = Entry: idepth: 0, %0 [, %57, %6, %9, %12, %15, %17, %19, %21, %23, %28, %33, %38, %43, %45]
%61 = Then: idepth: 0, %57 [, %146, %63, %66, %68, %70, %75, %80, %86, %92, %94, %96, %101, %106, %108, %113, %118, %123, %129, %131, %136, %141]
%58 = Then: idepth: 0, %57 [, %145]
%144 = BinOp: iadd, %142, %143 [, %149]
%59 = CInt: 1001 [, %149]
%141 = Store: %61, %136, %137, %140 [, %148, %142, %143]
%45 = MemCpy: %1, %43, %4, %24, %44 [, %148, %46, %47, %49, %51, %63]
%146 = Jmp: idepth: 0, %61 [, %147]
%145 = Jmp: idepth: 0, %58 [, %147]
%149 = Phi: %147, %59, %144 [, %60]
%148 = Phi: %147, %45, %141 [, %60]
%147 = Region: idepth: 0, %145, %146 [, %60, %148, %149]
%60 = Return: idepth: 0, %147, %148, %149 []

======== OPTIMIZED SON ========
%152 = Ld: offset: 3, %192, %16 [, %42]
%37 = BinOp: iadd, %188, %154 [, %192]
%154 = Ld: offset: 2, %193, %16 [, %37]
%32 = BinOp: iadd, %190, %156 [, %193]
%156 = Ld: offset: 1, %28, %16 [, %32]
%27 = BinOp: iadd, %25, %26 [, %28]
%26 = Load: %194, %16 [, %27]
%16 = Local: 4, %2 [, %17, %196, %195, %194, %26, %152, %154, %156]
%162 = Ld: offset: 16, %200, %97 [, %135]
%133 = Load: %200, %97 [, %135]
%128 = BinOp: iadd, %158, %169 [, %201]
%169 = Ld: offset: 24, %202, %71 [, %128]
%158 = Ld: offset: 24, %202, %97 [, %128]
%122 = BinOp: iadd, %163, %171 [, %202]
%171 = Ld: offset: 16, %203, %71 [, %122]
%163 = Ld: offset: 16, %203, %97 [, %122]
%117 = BinOp: iadd, %165, %173 [, %203]
%173 = Ld: offset: 8, %113, %71 [, %117]
%165 = Ld: offset: 8, %113, %97 [, %117]
%112 = BinOp: iadd, %110, %111 [, %113]
%109 = Local: 32, %2 [, %113, %203, %202, %201, %200]
%111 = Load: %204, %71 [, %112]
%110 = Load: %204, %97 [, %112]
%161 = ImmBinOp: imm: 16, op: addi64, %97 [, %204]
%105 = BinOp: isub, %167, %175 [, %205]
%175 = Ld: offset: 8, %101, %67 [, %105]
%167 = Ld: offset: 8, %101, %93 [, %105]
%100 = BinOp: isub, %98, %99 [, %101]
%97 = Local: 32, %2 [, %101, %205, %161, %133, %110, %181, %200, %158, %162, %163, %165, %182]
%99 = Load: %206, %67 [, %100]
%98 = Load: %206, %93 [, %100]
%5 = CInt: 0 [, %6, %199, %198, %197, %94, %206]
%93 = Local: 16, %2 [, %94, %206, %98, %167]
%91 = BinOp: isub, %176, %179 [, %207]
%179 = Ld: offset: 8, %208, %62 [, %91]
%176 = Ld: offset: 8, %208, %67 [, %91]
%85 = BinOp: isub, %83, %84 [, %208]
%84 = Load: %209, %62 [, %85]
%83 = Load: %209, %67 [, %85]
%79 = BinOp: iadd, %180, %177 [, %209]
%177 = Ld: offset: 8, %75, %67 [, %79]
%180 = Ld: offset: 8, %75, %62 [, %79]
%74 = BinOp: iadd, %72, %73 [, %75]
%71 = Local: 32, %2 [, %75, %209, %208, %207, %111, %169, %171, %173]
%73 = Load: %210, %67 [, %74]
%72 = Load: %210, %62 [, %74]
%13 = CInt: 3 [, %68]
%67 = Local: 16, %2 [, %68, %210, %99, %73, %83, %175, %176, %177]
%10 = CInt: 2 [, %211]
%44 = CInt: 4 [, %210, %212]
%53 = UnOp: uext, %52 [, %212]
%181 = Ld: offset: 24, %136, %97 [, %140]
%182 = Ld: offset: 8, %136, %97 [, %140]
%135 = BinOp: iadd, %133, %162 [, %136]
%7 = CInt: 1 [, %194, %17, %63, %196, %195]
%62 = Local: 16, %2 [, %63, %211, %204, %72, %84, %179, %180]
%52 = BinOp: iadd, %50, %215 [, %53]
%50 = BinOp: iadd, %48, %49 [, %52]
%48 = BinOp: iadd, %217, %216 [, %50]
%190 = Ld: offset: 1, %28, %4 [, %32]
%188 = Ld: offset: 2, %193, %4 [, %37]
%186 = Ld: offset: 3, %192, %4 [, %42]
%25 = Load: %194, %4 [, %27]
%2 = Mem: %0 [, %6, %4, %16, %24, %62, %67, %71, %93, %97, %109, %132]
%42 = BinOp: iadd, %186, %152 [, %218]
%192 = St: offset: 2, %1, %193, %24, %37 [, %218, %186, %152]
%193 = St: offset: 1, %1, %28, %24, %32 [, %192, %188, %154]
%28 = Store: %1, %194, %24, %27 [, %193, %190, %156]
%194 = St: offset: 3, %1, %195, %16, %7 [, %28, %25, %26]
%195 = St: offset: 2, %1, %196, %16, %7 [, %194]
%196 = St: offset: 1, %1, %17, %16, %7 [, %195]
%17 = Store: %1, %197, %16, %7 [, %196]
%197 = St: offset: 3, %1, %198, %4, %5 [, %17]
%198 = St: offset: 2, %1, %199, %4, %5 [, %197]
%199 = St: offset: 1, %1, %6, %4, %5 [, %198]
%6 = Store: %1, %2, %4, %5 [, %199]
%0 = Start: idepth: 0 [, %1, %2]
%200 = BlockCpy: size: 32, %61, %201, %97, %109 [, %136, %133, %162]
%201 = St: offset: 24, %61, %202, %109, %128 [, %200]
%202 = St: offset: 16, %61, %203, %109, %122 [, %201, %158, %169]
%203 = St: offset: 8, %61, %113, %109, %117 [, %202, %163, %171]
%113 = Store: %61, %204, %109, %112 [, %203, %165, %173]
%204 = BlockCpy: size: 16, %61, %205, %161, %62 [, %113, %110, %111]
%205 = St: offset: 8, %61, %101, %97, %105 [, %204]
%101 = Store: %61, %206, %97, %100 [, %205, %167, %175]
%206 = St: offset: 8, %61, %94, %93, %5 [, %101, %98, %99]
%94 = Store: %61, %207, %93, %5 [, %206]
%207 = St: offset: 24, %61, %208, %71, %91 [, %94]
%208 = St: offset: 16, %61, %209, %71, %85 [, %207, %176, %179]
%209 = St: offset: 8, %61, %75, %71, %79 [, %208, %83, %84]
%75 = Store: %61, %210, %71, %74 [, %209, %180, %177]
%210 = St: offset: 8, %61, %68, %67, %44 [, %75, %72, %73]
%68 = Store: %61, %211, %67, %13 [, %210]
%211 = St: offset: 8, %61, %63, %62, %10 [, %68]
%212 = IfOp: swapped: false, op: jeq, idepth: 0, %1, %53, %44 [, %58, %61]
%214 = Ld: offset: 8, %219, %132 [, %144]
%142 = Load: %219, %132 [, %144]
%140 = BinOp: iadd, %182, %181 [, %219]
%132 = Local: 16, %2 [, %136, %219, %142, %214]
%136 = Store: %61, %200, %132, %135 [, %219, %182, %181]
%63 = Store: %61, %220, %62, %7 [, %211]
%215 = Ld: offset: 3, %220, %4 [, %52]
%49 = Load: %220, %4 [, %50]
%216 = Ld: offset: 1, %220, %4 [, %48]
%217 = Ld: offset: 2, %220, %4 [, %48]
%24 = Local: 4, %2 [, %28, %193, %192, %218, %220]
%4 = Local: 4, %2 [, %6, %216, %217, %215, %49, %25, %220, %186, %188, %190, %197, %198, %199]
%218 = St: offset: 3, %1, %192, %24, %42 [, %220]
%1 = Entry: idepth: 0, %0 [, %6, %199, %198, %197, %17, %196, %195, %194, %28, %193, %192, %218, %220, %212]
%61 = Then: idepth: 0, %212 [, %63, %211, %68, %210, %75, %209, %208, %207, %94, %206, %101, %205, %204, %113, %203, %202, %201, %200, %136, %219, %146]
%58 = Then: idepth: 0, %212 [, %145]
%144 = BinOp: iadd, %142, %214 [, %149]
%59 = CInt: 1001 [, %149]
%219 = St: offset: 8, %61, %136, %132, %140 [, %148, %142, %214]
%220 = BlockCpy: size: 4, %1, %218, %4, %24 [, %148, %217, %216, %49, %215, %63]
%146 = Jmp: idepth: 0, %61 [, %147]
%145 = Jmp: idepth: 0, %58 [, %147]
%149 = Phi: %147, %59, %144 [, %60]
%148 = Phi: %147, %220, %219 [, %60]
%147 = Region: idepth: 0, %145, %146 [, %148, %149, %60]
%60 = Return: idepth: 0, %147, %148, %149 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = CInt: 0
  %7 = CInt: 1
  %44 = CInt: 4
  %4 = Local: 4, %2
  %6 = Store: %2, %4, %5
  %199 = St: offset: 1, %6, %4, %5
  %198 = St: offset: 2, %199, %4, %5
  %197 = St: offset: 3, %198, %4, %5
  %24 = Local: 4, %2
  %16 = Local: 4, %2
  %17 = Store: %197, %16, %7
  %196 = St: offset: 1, %17, %16, %7
  %195 = St: offset: 2, %196, %16, %7
  %194 = St: offset: 3, %195, %16, %7
  %25 = Load: %194, %4
  %26 = Load: %194, %16
  %27 = BinOp: iadd, %25, %26
  %28 = Store: %194, %24, %27
  %190 = Ld: offset: 1, %28, %4
  %156 = Ld: offset: 1, %28, %16
  %32 = BinOp: iadd, %190, %156
  %193 = St: offset: 1, %28, %24, %32
  %188 = Ld: offset: 2, %193, %4
  %154 = Ld: offset: 2, %193, %16
  %37 = BinOp: iadd, %188, %154
  %192 = St: offset: 2, %193, %24, %37
  %186 = Ld: offset: 3, %192, %4
  %152 = Ld: offset: 3, %192, %16
  %42 = BinOp: iadd, %186, %152
  %218 = St: offset: 3, %192, %24, %42
  %220 = BlockCpy: size: 4, %218, %4, %24
  %217 = Ld: offset: 2, %220, %4
  %216 = Ld: offset: 1, %220, %4
  %49 = Load: %220, %4
  %215 = Ld: offset: 3, %220, %4
  %48 = BinOp: iadd, %217, %216
  %50 = BinOp: iadd, %48, %49
  %52 = BinOp: iadd, %50, %215
  %53 = UnOp: uext, %52
  %212 = IfOp: swapped: false, op: jeq, idepth: 2, %53, %44
%58 = Then: idepth: 3, %212
  %59 = CInt: 1001
  %221 = MachMove: %59
  %145 = Jmp: idepth: 4
%61 = Then: idepth: 3, %212
  %10 = CInt: 2
  %13 = CInt: 3
  %62 = Local: 16, %2
  %63 = Store: %220, %62, %7
  %211 = St: offset: 8, %63, %62, %10
  %71 = Local: 32, %2
  %93 = Local: 16, %2
  %97 = Local: 32, %2
  %161 = ImmBinOp: imm: 16, op: addi64, %97
  %132 = Local: 16, %2
  %67 = Local: 16, %2
  %68 = Store: %211, %67, %13
  %210 = St: offset: 8, %68, %67, %44
  %72 = Load: %210, %62
  %73 = Load: %210, %67
  %74 = BinOp: iadd, %72, %73
  %75 = Store: %210, %71, %74, %73, %72
  %180 = Ld: offset: 8, %75, %62
  %177 = Ld: offset: 8, %75, %67
  %79 = BinOp: iadd, %180, %177
  %209 = St: offset: 8, %75, %71, %79, %177, %180
  %83 = Load: %209, %67
  %84 = Load: %209, %62
  %85 = BinOp: isub, %83, %84
  %208 = St: offset: 16, %209, %71, %85, %84, %83
  %176 = Ld: offset: 8, %208, %67
  %179 = Ld: offset: 8, %208, %62
  %91 = BinOp: isub, %176, %179
  %207 = St: offset: 24, %208, %71, %91, %179, %176
  %94 = Store: %207, %93, %5
  %206 = St: offset: 8, %94, %93, %5
  %98 = Load: %206, %93
  %99 = Load: %206, %67
  %100 = BinOp: isub, %98, %99
  %101 = Store: %206, %97, %100, %99, %98
  %175 = Ld: offset: 8, %101, %67
  %167 = Ld: offset: 8, %101, %93
  %105 = BinOp: isub, %167, %175
  %205 = St: offset: 8, %101, %97, %105, %175, %167
  %204 = BlockCpy: size: 16, %205, %161, %62
  %111 = Load: %204, %71
  %110 = Load: %204, %97
  %112 = BinOp: iadd, %110, %111
  %109 = Local: 32, %2
  %113 = Store: %204, %109, %112, %111, %110
  %165 = Ld: offset: 8, %113, %97
  %173 = Ld: offset: 8, %113, %71
  %117 = BinOp: iadd, %165, %173
  %203 = St: offset: 8, %113, %109, %117, %173, %165
  %171 = Ld: offset: 16, %203, %71
  %163 = Ld: offset: 16, %203, %97
  %122 = BinOp: iadd, %163, %171
  %202 = St: offset: 16, %203, %109, %122, %171, %163
  %169 = Ld: offset: 24, %202, %71
  %158 = Ld: offset: 24, %202, %97
  %128 = BinOp: iadd, %158, %169
  %201 = St: offset: 24, %202, %109, %128, %169, %158
  %200 = BlockCpy: size: 32, %201, %97, %109
  %133 = Load: %200, %97
  %162 = Ld: offset: 16, %200, %97
  %135 = BinOp: iadd, %133, %162
  %136 = Store: %200, %132, %135, %162, %133
  %182 = Ld: offset: 8, %136, %97
  %181 = Ld: offset: 24, %136, %97
  %140 = BinOp: iadd, %182, %181
  %219 = St: offset: 8, %136, %132, %140, %181, %182
  %214 = Ld: offset: 8, %219, %132
  %142 = Load: %219, %132
  %144 = BinOp: iadd, %142, %214
  %222 = MachMove: %144
  %146 = Jmp: idepth: 4
%147 = Region: idepth: 0, %145, %146
  %148 = Phi: %220, %219
  %223 = Phi: %221, %222
  %60 = Return: idepth: 0, %148, %223

======== CODEGEN ========
main:
     addi64 $254, $254, -172
       li64 $13, 0
       li64 $14, 1
       li64 $15, 4
     addi64 $16, $254, 0
         st $13, $254, 0, 1
         st $13, $254, 1, 1
         st $13, $254, 2, 1
         st $13, $254, 3, 1
     addi64 $17, $254, 8
     addi64 $18, $254, 4
         st $14, $254, 4, 1
         st $14, $254, 5, 1
         st $14, $254, 6, 1
         st $14, $254, 7, 1
         ld $19, $254, 0, 1
         ld $20, $254, 4, 1
       add8 $19, $19, $20
         st $19, $254, 8, 1
         ld $19, $254, 1, 1
         ld $20, $254, 5, 1
       add8 $19, $19, $20
         st $19, $254, 9, 1
         ld $19, $254, 2, 1
         ld $20, $254, 6, 1
       add8 $19, $19, $20
         st $19, $254, 10, 1
         ld $19, $254, 3, 1
         ld $18, $254, 7, 1
       add8 $18, $19, $18
         st $18, $254, 11, 1
        bmc $17, $16, 4
         ld $17, $254, 2, 1
         ld $18, $254, 1, 1
         ld $19, $254, 0, 1
         ld $16, $254, 3, 1
       add8 $17, $17, $18
       add8 $17, $17, $19
       add8 $16, $17, $16
       andi $16, $16, 255
        jeq $16, $15, :0
       li64 $13, 1001
        jmp :1
0:     li64 $16, 2
       li64 $17, 3
     addi64 $18, $254, 12
         st $14, $254, 12, 8
         st $16, $254, 20, 8
     addi64 $14, $254, 44
     addi64 $16, $254, 76
     addi64 $19, $254, 92
     addi64 $20, $19, 16
     addi64 $21, $254, 156
     addi64 $22, $254, 28
         st $17, $254, 28, 8
         st $15, $254, 36, 8
         ld $15, $254, 12, 8
         ld $17, $254, 28, 8
      add64 $15, $15, $17
         st $15, $254, 44, 8
         ld $15, $254, 20, 8
         ld $17, $254, 36, 8
      add64 $15, $15, $17
         st $15, $254, 52, 8
         ld $15, $254, 28, 8
         ld $17, $254, 12, 8
      sub64 $15, $15, $17
         st $15, $254, 60, 8
         ld $15, $254, 36, 8
         ld $17, $254, 20, 8
      sub64 $15, $15, $17
         st $15, $254, 68, 8
         st $13, $254, 76, 8
         st $13, $254, 84, 8
         ld $13, $254, 76, 8
         ld $15, $254, 28, 8
      sub64 $13, $13, $15
         st $13, $254, 92, 8
         ld $13, $254, 36, 8
         ld $15, $254, 84, 8
      sub64 $13, $15, $13
         st $13, $254, 100, 8
        bmc $18, $20, 16
         ld $13, $254, 44, 8
         ld $15, $254, 92, 8
      add64 $13, $15, $13
     addi64 $15, $254, 124
         st $13, $254, 124, 8
         ld $13, $254, 100, 8
         ld $16, $254, 52, 8
      add64 $13, $13, $16
         st $13, $254, 132, 8
         ld $13, $254, 60, 8
         ld $16, $254, 108, 8
      add64 $13, $16, $13
         st $13, $254, 140, 8
         ld $13, $254, 68, 8
         ld $14, $254, 116, 8
      add64 $13, $14, $13
         st $13, $254, 148, 8
        bmc $15, $19, 32
         ld $13, $254, 92, 8
         ld $14, $254, 108, 8
      add64 $13, $13, $14
         st $13, $254, 156, 8
         ld $13, $254, 100, 8
         ld $14, $254, 116, 8
      add64 $13, $13, $14
         st $13, $254, 164, 8
         ld $13, $254, 164, 8
         ld $14, $254, 156, 8
      add64 $13, $14, $13
1:       cp $1, $13
     addi64 $254, $254, 172
         tx

======== EXECUTION ========
  addi64 $254=10240, $254, -172
    li64 $13=0, 0
    li64 $14=0, 1
    li64 $15=0, 4
  addi64 $16=0, $254=10068, 0
      st $13=0, $254=10068, 0, 1
      st $13=0, $254=10068, 1, 1
      st $13=0, $254=10068, 2, 1
      st $13=0, $254=10068, 3, 1
  addi64 $17=0, $254=10068, 8
  addi64 $18=0, $254=10068, 4
      st $14=1, $254=10068, 4, 1
      st $14=1, $254=10068, 5, 1
      st $14=1, $254=10068, 6, 1
      st $14=1, $254=10068, 7, 1
      ld $19=0, $254=10068, 0, 1
      ld $20=0, $254=10068, 4, 1
    add8 $19=0, $19, $20=1
      st $19=1, $254=10068, 8, 1
      ld $19=1, $254=10068, 1, 1
      ld $20=1, $254=10068, 5, 1
    add8 $19=0, $19, $20=1
      st $19=1, $254=10068, 9, 1
      ld $19=1, $254=10068, 2, 1
      ld $20=1, $254=10068, 6, 1
    add8 $19=0, $19, $20=1
      st $19=1, $254=10068, 10, 1
      ld $19=1, $254=10068, 3, 1
      ld $18=10072, $254=10068, 7, 1
    add8 $18=9985, $19=0, $18
      st $18=1, $254=10068, 11, 1
     bmc $17=10076, $16=10068, 4
      ld $17=10076, $254=10068, 2, 1
      ld $18=1, $254=10068, 1, 1
      ld $19=0, $254=10068, 0, 1
      ld $16=10068, $254=10068, 3, 1
    add8 $17=9985, $17, $18=1
    add8 $17=2, $17, $19=1
    add8 $16=9985, $17=3, $16
    andi $16=4, $16, 255
     jeq $16=4, $15=4, 20
    li64 $16=4, 2
    li64 $17=3, 3
  addi64 $18=1, $254=10068, 12
      st $14=1, $254=10068, 12, 8
      st $16=2, $254=10068, 20, 8
  addi64 $14=1, $254=10068, 44
  addi64 $16=2, $254=10068, 76
  addi64 $19=1, $254=10068, 92
  addi64 $20=1, $19=10160, 16
  addi64 $21=0, $254=10068, 156
  addi64 $22=0, $254=10068, 28
      st $17=3, $254=10068, 28, 8
      st $15=4, $254=10068, 36, 8
      ld $15=4, $254=10068, 12, 8
      ld $17=3, $254=10068, 28, 8
   add64 $15=1, $15, $17=3
      st $15=4, $254=10068, 44, 8
      ld $15=4, $254=10068, 20, 8
      ld $17=3, $254=10068, 36, 8
   add64 $15=2, $15, $17=4
      st $15=6, $254=10068, 52, 8
      ld $15=6, $254=10068, 28, 8
      ld $17=4, $254=10068, 12, 8
   sub64 $15=3, $15, $17=1
      st $15=2, $254=10068, 60, 8
      ld $15=2, $254=10068, 36, 8
      ld $17=1, $254=10068, 20, 8
   sub64 $15=4, $15, $17=2
      st $15=2, $254=10068, 68, 8
      st $13=0, $254=10068, 76, 8
      st $13=0, $254=10068, 84, 8
      ld $13=0, $254=10068, 76, 8
      ld $15=2, $254=10068, 28, 8
   sub64 $13=0, $13, $15=3
      st $13=-3, $254=10068, 92, 8
      ld $13=-3, $254=10068, 36, 8
      ld $15=3, $254=10068, 84, 8
   sub64 $13=4, $15=0, $13
      st $13=-4, $254=10068, 100, 8
     bmc $18=10080, $20=10176, 16
      ld $13=-4, $254=10068, 44, 8
      ld $15=0, $254=10068, 92, 8
   add64 $13=4, $15=-3, $13
  addi64 $15=-3, $254=10068, 124
      st $13=1, $254=10068, 124, 8
      ld $13=1, $254=10068, 100, 8
      ld $16=10144, $254=10068, 52, 8
   add64 $13=-4, $13, $16=6
      st $13=2, $254=10068, 132, 8
      ld $13=2, $254=10068, 60, 8
      ld $16=6, $254=10068, 108, 8
   add64 $13=2, $16=1, $13
      st $13=3, $254=10068, 140, 8
      ld $13=3, $254=10068, 68, 8
      ld $14=10112, $254=10068, 116, 8
   add64 $13=2, $14=2, $13
      st $13=4, $254=10068, 148, 8
     bmc $15=10192, $19=10160, 32
      ld $13=4, $254=10068, 92, 8
      ld $14=2, $254=10068, 108, 8
   add64 $13=1, $13, $14=3
      st $13=4, $254=10068, 156, 8
      ld $13=4, $254=10068, 100, 8
      ld $14=3, $254=10068, 116, 8
   add64 $13=2, $13, $14=4
      st $13=6, $254=10068, 164, 8
      ld $13=6, $254=10068, 164, 8
      ld $14=4, $254=10068, 156, 8
   add64 $13=6, $14=4, $13
      cp $1=0, $13=10
  addi64 $254=10068, $254, 172
      tx