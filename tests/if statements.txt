======== SOURCE ========
fn(): uint {
    return fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 3
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    if x <= 2 {
        return 1
    } else {
        return fib(x - 1) + fib(x - 2)
    }
}
======== UNSCHEDULED SON ========
%21 = CInt: 2 [, %22]
%34 = Jmp: idepth: 0 [, %35]
%33 = Jmp: idepth: 0 [, %35]
%14 = CInt: 1 [, %15]
%7 = CInt: 2 [, %8]
%22 = BinOp: -, %20, %21 [, %23]
%18 = Mem: %17 [, %20, %23]
%35 = Region: idepth: 0, %33, %34 [, %36]
%17 = CallEnd: idepth: 0, %16 [, %18, %19, %23]
%12 = Else: idepth: 0, %9 [, %16]
%15 = BinOp: -, %13, %14 [, %16]
%8 = BinOp: <=, %6, %7 [, %9]
%20 = Load: %18, %4 [, %22]
%0 = Start: idepth: 0 [, %1, %2, %3]
%23 = Call: id: fn1, idepth: 0, %17, %18, %22 [, %24]
%9 = If: swapped: false, idepth: 0, %1, %8 [, %10, %12]
%26 = Ret: %24 [, %27]
%19 = Ret: %17 [, %27]
%36 = Phi: %35, %5, %25 []
%16 = Call: id: fn1, idepth: 0, %12, %5, %15 [, %17]
%13 = Load: %5, %4 [, %15]
%6 = Load: %5, %4 [, %8]
%3 = Arg: 0, %0 [, %5]
%4 = Local: 8, %2 [, %5, %6, %13, %20]
%2 = Mem: %0 [, %4, %5]
%1 = Entry: idepth: 0, %0 [, %5, %9]
%24 = CallEnd: idepth: 0, %23 [, %25, %26, %29]
%10 = Then: idepth: 0, %9 [, %28]
%27 = BinOp: +, %19, %26 [, %32]
%11 = CInt: 1 [, %32]
%25 = Mem: %24 [, %31, %36]
%5 = Store: %1, %2, %4, %3 [, %6, %13, %16, %31, %36]
%29 = Jmp: idepth: 0, %24 [, %30]
%28 = Jmp: idepth: 0, %10 [, %30]
%32 = Phi: %30, %11, %27 [, %37]
%31 = Phi: %30, %5, %25 [, %37]
%30 = Region: idepth: 0, %28, %29 [, %31, %32, %37]
%37 = Return: idepth: 0, %30, %31, %32 []

======== OPTIMIZED SON ========
%7 = CInt: 2 [, %40]
%38 = ImmBinOp: imm: -2, op: addi64, %20 [, %23]
%18 = Mem: %17 [, %20, %23]
%17 = CallEnd: idepth: 0, %16 [, %18, %19, %23]
%12 = Else: idepth: 0, %9 [, %16]
%39 = ImmBinOp: imm: -1, op: addi64, %6 [, %16]
%40 = CondOp: op: jgtu, %6, %7 [, %9]
%20 = Load: %18, %4 [, %38]
%0 = Start: idepth: 0 [, %1, %2, %3]
%23 = Call: id: fn1, idepth: 0, %17, %18, %38 [, %24]
%9 = If: swapped: true, idepth: 0, %1, %40 [, %10, %12]
%26 = Ret: %24 [, %27]
%19 = Ret: %17 [, %27]
%16 = Call: id: fn1, idepth: 0, %12, %5, %39 [, %17]
%6 = Load: %5, %4 [, %40, %39]
%3 = Arg: 0, %0 [, %5]
%4 = Local: 8, %2 [, %5, %6, %20]
%2 = Mem: %0 [, %4, %5]
%1 = Entry: idepth: 0, %0 [, %5, %9]
%24 = CallEnd: idepth: 0, %23 [, %25, %26, %29]
%10 = Then: idepth: 0, %9 [, %28]
%27 = BinOp: +, %19, %26 [, %32]
%11 = CInt: 1 [, %32]
%25 = Mem: %24 [, %31]
%5 = Store: %1, %2, %4, %3 [, %6, %31, %16]
%29 = Jmp: idepth: 0, %24 [, %30]
%28 = Jmp: idepth: 0, %10 [, %30]
%32 = Phi: %30, %11, %27 [, %37]
%31 = Phi: %30, %5, %25 [, %37]
%30 = Region: idepth: 0, %28, %29 [, %31, %32, %37]
%37 = Return: idepth: 0, %30, %31, %32 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %7 = CInt: 2
  %5 = Store: %2, %4, %3
  %6 = Load: %5, %4
  %40 = CondOp: op: jgtu, %6, %7
  %9 = If: swapped: true, idepth: 2, %40
%10 = Then: idepth: 3, %9
  %11 = CInt: 1
  %28 = Jmp: idepth: 4
%12 = Else: idepth: 3, %9
  %39 = ImmBinOp: imm: -1, op: addi64, %6
  %16 = Call: id: fn1, idepth: 4, %5, %39
%17 = CallEnd: idepth: 5, %16
  %18 = Mem
  %19 = Ret
  %20 = Load: %18, %4
  %38 = ImmBinOp: imm: -2, op: addi64, %20
  %23 = Call: id: fn1, idepth: 6, %18, %38, %20
%24 = CallEnd: idepth: 7, %23
  %25 = Mem
  %26 = Ret
  %27 = BinOp: +, %19, %26
  %29 = Jmp: idepth: 8
%30 = Region: idepth: 0, %28, %29
  %31 = Phi: %5, %25
  %32 = Phi: %11, %27
  %37 = Return: idepth: 0, %31, %32

======== REGISTER SELECTION ========
{ 1, 2, 3, 1, 2, 3, 1, 4, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
         st $31, $254, -48, 48
     addi64 $254, $254, -56
         cp $33, $2
     addi64 $32, $254, 0
       li64 $34, 2
         st $33, $254, 0, 8
         ld $33, $254, 0, 8
       jgtu $33, $34, :1
       li64 $35, 1
         cp $32, $35
        jmp :2
1:   addi64 $33, $33, -1
         cp $2, $33
        jal $31, $0, :fib
         cp $33, $1
         ld $32, $254, 0, 8
     addi64 $32, $32, -2
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
      add64 $36, $33, $32
         cp $32, $36
2:       cp $1, $32
     addi64 $254, $254, 56
         ld $31, $254, -48, 48
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
      st $31=44, $254=10224, -48, 48
  addi64 $254=10224, $254, -56
      cp $33=0, $2=3
  addi64 $32=3, $254=10168, 0
    li64 $34=0, 2
      st $33=3, $254=10168, 0, 8
      ld $33=3, $254=10168, 0, 8
    jgtu $33=3, $34=2, 23
  addi64 $33=3, $33, -1
      cp $2=3, $33=2
     jal $31=44, $0=0, -111
      st $31=193, $254=10168, -48, 48
  addi64 $254=10168, $254, -56
      cp $33=2, $2=2
  addi64 $32=10168, $254=10112, 0
    li64 $34=2, 2
      st $33=2, $254=10112, 0, 8
      ld $33=2, $254=10112, 0, 8
    jgtu $33=2, $34=2, 23
    li64 $35=0, 1
      cp $32=10112, $35=1
     jmp 73
      cp $1=0, $32=1
  addi64 $254=10112, $254, 56
      ld $31=193, $254=10168, -48, 48
    jala $0=0, $31=193, 0
      cp $33=2, $1=1
      ld $32=10168, $254=10168, 0, 8
  addi64 $32=3, $32, -2
      cp $2=2, $32=1
     jal $31=193, $0=0, -148
      st $31=230, $254=10168, -48, 48
  addi64 $254=10168, $254, -56
      cp $33=1, $2=1
  addi64 $32=1, $254=10112, 0
    li64 $34=2, 2
      st $33=1, $254=10112, 0, 8
      ld $33=1, $254=10112, 0, 8
    jgtu $33=1, $34=2, 23
    li64 $35=0, 1
      cp $32=10112, $35=1
     jmp 73
      cp $1=1, $32=1
  addi64 $254=10112, $254, 56
      ld $31=230, $254=10168, -48, 48
    jala $0=0, $31=230, 0
      cp $32=1, $1=1
   add64 $36=0, $33=1, $32=1
      cp $32=1, $36=2
      cp $1=1, $32=2
  addi64 $254=10168, $254, 56
      ld $31=230, $254=10224, -48, 48
    jala $0=0, $31=44, 0
      cp $32=3, $1=2
      cp $1=2, $32=2
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx