======== SOURCE ========
fn(): uint {
    return fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 3
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    if x <= 2 {
        return 1
    } else {
        return fib(x - 1) + fib(x - 2)
    }
}
======== UNSCHEDULED SON ========
%31 = Jmp: idepth: 0 [, %32]
%30 = Jmp: idepth: 0 [, %32]
%7 = CInt: 2 [, %8, %19]
%19 = BinOp: -, %18, %7 [, %20]
%16 = Mem: %15 [, %18, %20]
%32 = Region: idepth: 0, %30, %31 [, %33]
%15 = CallEnd: idepth: 0, %14 [, %16, %17, %20]
%12 = Else: idepth: 0, %9 [, %14]
%8 = BinOp: <=, %6, %7 [, %9]
%18 = Load: %16, %4 [, %19]
%0 = Start: idepth: 0 [, %1, %2, %3]
%20 = Call: id: fn1, idepth: 0, %15, %16, %19 [, %21]
%9 = If: idepth: 0, %1, %8 [, %10, %12]
%23 = Ret: %21 [, %24]
%17 = Ret: %15 [, %24]
%13 = BinOp: -, %6, %11 [, %14]
%33 = Phi: %32, %5, %22 []
%14 = Call: id: fn1, idepth: 0, %12, %5, %13 [, %15]
%6 = Load: %5, %4 [, %8, %13]
%3 = Arg: 0, %0 [, %5]
%4 = Local: 8, %2 [, %5, %6, %18]
%2 = Mem: %0 [, %4, %5]
%1 = Entry: idepth: 0, %0 [, %5, %9]
%21 = CallEnd: idepth: 0, %20 [, %22, %23, %26]
%10 = Then: idepth: 0, %9 [, %25]
%24 = BinOp: +, %17, %23 [, %29]
%11 = CInt: 1 [, %13, %29]
%22 = Mem: %21 [, %28, %33]
%5 = Store: %1, %2, %4, %3 [, %6, %14, %28, %33]
%26 = Jmp: idepth: 0, %21 [, %27]
%25 = Jmp: idepth: 0, %10 [, %27]
%29 = Phi: %27, %11, %24 [, %34]
%28 = Phi: %27, %5, %22 [, %34]
%27 = Region: idepth: 0, %25, %26 [, %28, %29, %34]
%34 = Return: idepth: 0, %27, %28, %29 []

======== OPTIMIZED SON ========
%35 = ImmBinOp: imm: -2, op: addi64, %3 [, %20]
%16 = Mem: %15 [, %20]
%7 = CInt: 2 [, %36]
%15 = CallEnd: idepth: 0, %14 [, %16, %17, %20]
%37 = ImmBinOp: imm: -1, op: addi64, %3 [, %14]
%12 = Else: idepth: 0, %36 [, %14]
%3 = Arg: 0, %0 [, %35, %36, %37]
%1 = Entry: idepth: 0, %0 [, %36]
%20 = Call: id: fn1, idepth: 0, %15, %16, %35 [, %21]
%36 = IfOp: swapped: true, op: jgtu, idepth: 0, %1, %3, %7 [, %10, %12]
%23 = Ret: %21 [, %24]
%17 = Ret: %15 [, %24]
%14 = Call: id: fn1, idepth: 0, %12, %2, %37 [, %15]
%0 = Start: idepth: 0 [, %1, %2, %3]
%21 = CallEnd: idepth: 0, %20 [, %22, %23, %26]
%10 = Then: idepth: 0, %36 [, %25]
%24 = BinOp: +, %17, %23 [, %29]
%11 = CInt: 1 [, %29]
%22 = Mem: %21 [, %28]
%2 = Mem: %0 [, %28, %14]
%26 = Jmp: idepth: 0, %21 [, %27]
%25 = Jmp: idepth: 0, %10 [, %27]
%29 = Phi: %27, %11, %24 [, %34]
%28 = Phi: %27, %2, %22 [, %34]
%27 = Region: idepth: 0, %25, %26 [, %28, %29, %34]
%34 = Return: idepth: 0, %27, %28, %29 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %3 = Arg: 0
  %7 = CInt: 2
  %36 = IfOp: swapped: true, op: jgtu, idepth: 2, %3, %7
%12 = Else: idepth: 3, %36
  %37 = ImmBinOp: imm: -1, op: addi64, %3
  %14 = Call: id: fn1, idepth: 4, %2, %37
%15 = CallEnd: idepth: 5, %14
  %16 = Mem
  %17 = Ret
  %35 = ImmBinOp: imm: -2, op: addi64, %3
  %20 = Call: id: fn1, idepth: 6, %16, %35
%21 = CallEnd: idepth: 7, %20
  %22 = Mem
  %23 = Ret
  %24 = BinOp: +, %17, %23
  %39 = MachMove: %24
  %26 = Jmp: idepth: 8
%10 = Then: idepth: 3, %36
  %11 = CInt: 1
  %38 = MachMove: %11
  %25 = Jmp: idepth: 4
%27 = Region: idepth: 0, %25, %26
  %28 = Phi: %2, %22
  %40 = Phi: %38, %39
  %34 = Return: idepth: 0, %28, %40

======== REGISTER SELECTION ========
{ 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
         st $31, $254, -24, 24
     addi64 $254, $254, -24
         cp $32, $2
       li64 $33, 2
       jgtu $32, $33, :1
        jmp :2
1:   addi64 $33, $32, -1
         cp $2, $33
        jal $31, $0, :fib
         cp $33, $1
     addi64 $32, $32, -2
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
      add64 $32, $33, $32
        jmp :3
2:     li64 $32, 1
3:       cp $1, $32
     addi64 $254, $254, 24
         ld $31, $254, -24, 24
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
      st $31=44, $254=10224, -24, 24
  addi64 $254=10224, $254, -24
      cp $32=3, $2=3
    li64 $33=0, 2
    jgtu $32=3, $33=2, 10
  addi64 $33=2, $32=3, -1
      cp $2=3, $33=2
     jal $31=44, $0=0, -61
      st $31=143, $254=10200, -24, 24
  addi64 $254=10200, $254, -24
      cp $32=3, $2=2
    li64 $33=2, 2
    jgtu $32=2, $33=2, 10
     jmp 62
    li64 $32=2, 1
      cp $1=0, $32=1
  addi64 $254=10176, $254, 24
      ld $31=143, $254=10200, -24, 24
    jala $0=0, $31=143, 0
      cp $33=2, $1=1
  addi64 $32=3, $32, -2
      cp $2=2, $32=1
     jal $31=143, $0=0, -85
      st $31=167, $254=10200, -24, 24
  addi64 $254=10200, $254, -24
      cp $32=1, $2=1
    li64 $33=1, 2
    jgtu $32=1, $33=2, 10
     jmp 62
    li64 $32=1, 1
      cp $1=1, $32=1
  addi64 $254=10176, $254, 24
      ld $31=167, $254=10200, -24, 24
    jala $0=0, $31=167, 0
      cp $32=1, $1=1
   add64 $32=1, $33=1, $32
     jmp 15
      cp $1=1, $32=2
  addi64 $254=10200, $254, 24
      ld $31=167, $254=10224, -24, 24
    jala $0=0, $31=44, 0
      cp $32=3, $1=2
      cp $1=2, $32=2
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx