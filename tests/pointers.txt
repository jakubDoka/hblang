======== SOURCE ========
fn(): uint {
    a := 1
    b := &a
    modify(b)
    drop(a);
    *b += 2
    stack_reclamation_edge_case := 0
    return *b - 4
}
======== UNSCHEDULED SON ========
%3 = CInt: 1 [, %5]
%6 = Load: %5, %4 []
%1 = Entry: idepth: 0, %0 [, %5, %8, %10]
%9 = Load: %8, %7 [, %10]
%8 = Store: %1, %5, %7, %4 [, %9, %10]
%5 = Store: %1, %2, %4, %3 [, %6, %8]
%0 = Start: idepth: 0 [, %1, %2]
%21 = CInt: 2 [, %22]
%4 = Local: 8, %2 [, %5, %6, %8, %14]
%13 = Ret: %11 []
%10 = Call: id: fn1, idepth: 0, %1, %8, %9 [, %11]
%7 = Local: 8, %2 [, %8, %9, %19, %27]
%2 = Mem: %0 [, %4, %5, %7, %25]
%22 = BinOp: +, %20, %21 [, %23]
%20 = Load: %17, %19 [, %22]
%19 = Load: %17, %7 [, %20, %23]
%14 = Load: %12, %4 [, %15]
%12 = Mem: %11 [, %14, %15]
%11 = CallEnd: idepth: 0, %10 [, %12, %13, %15]
%29 = CInt: 4 [, %30]
%28 = Load: %26, %27 [, %30]
%27 = Load: %26, %7 [, %28]
%24 = CInt: 0 [, %26]
%25 = Local: 8, %2 [, %26]
%23 = Store: %16, %17, %19, %22 [, %26]
%18 = Ret: %16 []
%17 = Mem: %16 [, %19, %20, %23]
%15 = Call: id: fn2, idepth: 0, %11, %12, %14 [, %16]
%30 = BinOp: -, %28, %29 [, %31]
%26 = Store: %16, %23, %25, %24 [, %27, %28, %31]
%16 = CallEnd: idepth: 0, %15 [, %17, %18, %23, %26, %31]
%31 = Return: idepth: 0, %16, %26, %30 []

======== OPTIMIZED SON ========
%3 = CInt: 1 [, %33]
%32 = Store: %33, %7, %4 [, %10]
%1 = Entry: idepth: 0, %0 [, %10]
%33 = Store: %2, %4, %3 [, %32]
%0 = Start: idepth: 0 [, %1, %2]
%7 = Local: 8, %2 [, %32, %35, %19]
%4 = Local: 8, %2 [, %33, %14, %32, %10]
%10 = Call: id: fn1, idepth: 0, %1, %32, %4 [, %11]
%2 = Mem: %0 [, %4, %33, %7, %25]
%35 = Load: %23, %7 [, %28]
%34 = ImmBinOp: imm: 2, op: addi64, %20 [, %23]
%20 = Load: %17, %19 [, %34]
%19 = Load: %17, %7 [, %20, %23]
%14 = Load: %12, %4 [, %15]
%12 = Mem: %11 [, %14, %15]
%11 = CallEnd: idepth: 0, %10 [, %12, %15]
%28 = Load: %37, %35 [, %36]
%24 = CInt: 0 [, %37]
%25 = Local: 8, %2 [, %37]
%23 = Store: %16, %17, %19, %34 [, %37, %35]
%17 = Mem: %16 [, %19, %20, %23]
%15 = Call: id: fn2, idepth: 0, %11, %12, %14 [, %16]
%36 = ImmBinOp: imm: -4, op: addi64, %28 [, %31]
%37 = Store: %23, %25, %24 [, %31, %28]
%16 = CallEnd: idepth: 0, %15 [, %17, %31, %23]
%31 = Return: idepth: 0, %16, %37, %36 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = CInt: 1
  %7 = Local: 8, %2
  %33 = Store: %2, %4, %3
  %32 = Store: %33, %7, %4
  %10 = Call: id: fn1, idepth: 2, %32, %4
%11 = CallEnd: idepth: 3, %10
  %12 = Mem
  %14 = Load: %12, %4
  %15 = Call: id: fn2, idepth: 4, %12, %14, %14
%16 = CallEnd: idepth: 5, %15
  %17 = Mem
  %24 = CInt: 0
  %25 = Local: 8, %2
  %19 = Load: %17, %7
  %20 = Load: %17, %19
  %34 = ImmBinOp: imm: 2, op: addi64, %20
  %23 = Store: %17, %19, %34
  %35 = Load: %23, %7
  %37 = Store: %23, %25, %24
  %28 = Load: %37, %35
  %36 = ImmBinOp: imm: -4, op: addi64, %28
  %31 = Return: idepth: 0, %37, %36

======== REGISTER SELECTION ========
{ 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 5, 1, 3, 1, 1, 1, 1 }

======== SOURCE ========
fn(a: uint): void {
    return
}
======== UNSCHEDULED SON ========
%3 = Arg: 0, %0 [, %5]
%4 = Local: 8, %2 [, %5]
%2 = Mem: %0 [, %4, %5]
%0 = Start: idepth: 0 [, %1, %2, %3]
%5 = Store: %1, %2, %4, %3 [, %6]
%1 = Entry: idepth: 0, %0 [, %5, %6]
%6 = Return: idepth: 0, %1, %5 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%2 = Mem: %0 [, %6]
%1 = Entry: idepth: 0, %0 [, %6]
%6 = Return: idepth: 0, %1, %2 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %6 = Return: idepth: 0, %2

======== REGISTER SELECTION ========
{ 1 }

======== SOURCE ========
fn(a: ^uint): void {
    *a = 2
    return
}
======== UNSCHEDULED SON ========
%7 = Load: %5, %6 []
%4 = Local: 8, %2 [, %5, %6]
%3 = Arg: 0, %0 [, %5]
%2 = Mem: %0 [, %4, %5]
%8 = CInt: 2 [, %9]
%6 = Load: %5, %4 [, %7, %9]
%5 = Store: %1, %2, %4, %3 [, %6, %7, %9]
%0 = Start: idepth: 0 [, %1, %2, %3]
%9 = Store: %1, %5, %6, %8 [, %10]
%1 = Entry: idepth: 0, %0 [, %5, %9, %10]
%10 = Return: idepth: 0, %1, %9 []

======== OPTIMIZED SON ========
%4 = Local: 8, %2 [, %11]
%2 = Mem: %0 [, %4, %11]
%8 = CInt: 2 [, %9]
%3 = Arg: 0, %0 [, %11, %9]
%11 = Store: %2, %4, %3 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %3]
%9 = Store: %1, %11, %3, %8 [, %10]
%1 = Entry: idepth: 0, %0 [, %10, %9]
%10 = Return: idepth: 0, %1, %9 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %8 = CInt: 2
  %11 = Store: %2, %4, %3
  %9 = Store: %11, %3, %8
  %10 = Return: idepth: 0, %9

======== REGISTER SELECTION ========
{ 1, 2, 3, 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -48, 48
     addi64 $254, $254, -72
     addi64 $32, $254, 0
       li64 $33, 1
     addi64 $34, $254, 8
         st $33, $254, 0, 8
         st $32, $254, 8, 8
         cp $2, $32
        jal $31, $0, :modify
         ld $32, $254, 0, 8
         cp $2, $32
        jal $31, $0, :drop
       li64 $32, 0
     addi64 $33, $254, 16
         ld $35, $254, 8, 8
         ld $36, $35, 0, 8
     addi64 $36, $36, 2
         st $36, $35, 0, 8
         ld $34, $254, 8, 8
         st $32, $254, 16, 8
         ld $32, $34, 0, 8
     addi64 $32, $32, -4
         cp $1, $32
     addi64 $254, $254, 72
         ld $31, $254, -48, 48
         tx
drop:
       jala $0, $31, 0
modify:
     addi64 $254, $254, -8
         cp $14, $2
     addi64 $13, $254, 0
       li64 $15, 2
         st $14, $254, 0, 8
         st $15, $14, 0, 8
     addi64 $254, $254, 8
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -48, 48
  addi64 $254=10240, $254, -72
  addi64 $32=0, $254=10168, 0
    li64 $33=0, 1
  addi64 $34=0, $254=10168, 8
      st $33=1, $254=10168, 0, 8
      st $32=10168, $254=10168, 8, 8
      cp $2=0, $32=10168
     jal $31=0, $0=0, 190
  addi64 $254=10168, $254, -8
      cp $14=0, $2=10168
  addi64 $13=0, $254=10160, 0
    li64 $15=0, 2
      st $14=10168, $254=10160, 0, 8
      st $15=2, $14=10168, 0, 8
  addi64 $254=10160, $254, 8
    jala $0=0, $31=92, 0
      ld $32=10168, $254=10168, 0, 8
      cp $2=10168, $32=2
     jal $31=92, $0=0, 156
    jala $0=0, $31=115, 0
    li64 $32=2, 0
  addi64 $33=1, $254=10168, 16
      ld $35=0, $254=10168, 8, 8
      ld $36=0, $35=10168, 0, 8
  addi64 $36=2, $36, 2
      st $36=4, $35=10168, 0, 8
      ld $34=10176, $254=10168, 8, 8
      st $32=0, $254=10168, 16, 8
      ld $32=0, $34=10168, 0, 8
  addi64 $32=4, $32, -4
      cp $1=0, $32=0
  addi64 $254=10168, $254, 72
      ld $31=115, $254=10240, -48, 48
      tx