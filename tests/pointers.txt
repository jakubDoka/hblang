======== SOURCE ========
fn(): uint {
    a := 1
    b := &a
    modify(b)
    drop(a);
    *b += 2
    stack_reclamation_edge_case := 0
    return *b - 4
}
======== UNSCHEDULED SON ========
%3 = CInt: 1 [, %5]
%6 = Load: %5, %4 []
%1 = Entry: idepth: 0, %0 [, %5, %8, %10]
%9 = Load: %8, %7 [, %10]
%8 = Store: %1, %5, %7, %4 [, %9, %10]
%5 = Store: %1, %2, %4, %3 [, %6, %8]
%0 = Start: idepth: 0 [, %1, %2]
%23 = CInt: 2 [, %24]
%4 = Local: 8, %2 [, %5, %6, %8, %14]
%13 = Ret: %11 []
%10 = Call: id: fn1, idepth: 0, %1, %8, %9 [, %11]
%7 = Local: 8, %2 [, %8, %9, %19, %21, %29]
%2 = Mem: %0 [, %4, %5, %7, %27]
%24 = BinOp: +, %22, %23 [, %25]
%22 = Load: %17, %21 [, %24]
%21 = Load: %17, %7 [, %22]
%20 = Load: %17, %19 []
%19 = Load: %17, %7 [, %20, %25]
%14 = Load: %12, %4 [, %15]
%12 = Mem: %11 [, %14, %15]
%11 = CallEnd: idepth: 0, %10 [, %12, %13, %15]
%31 = CInt: 4 [, %32]
%30 = Load: %28, %29 [, %32]
%29 = Load: %28, %7 [, %30]
%26 = CInt: 0 [, %28]
%27 = Local: 8, %2 [, %28]
%25 = Store: %16, %17, %19, %24 [, %28]
%18 = Ret: %16 []
%17 = Mem: %16 [, %19, %20, %21, %22, %25]
%15 = Call: id: fn2, idepth: 0, %11, %12, %14 [, %16]
%32 = BinOp: -, %30, %31 [, %33]
%28 = Store: %16, %25, %27, %26 [, %29, %30, %33]
%16 = CallEnd: idepth: 0, %15 [, %17, %18, %25, %28, %33]
%33 = Return: idepth: 0, %16, %28, %32 []

======== OPTIMIZED SON ========
%3 = CInt: 1 [, %5]
%1 = Entry: idepth: 0, %0 [, %5, %8, %10]
%9 = Load: %8, %7 [, %10]
%8 = Store: %1, %5, %7, %4 [, %9, %10]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2]
%4 = Local: 8, %2 [, %5, %14, %8]
%10 = Call: id: fn1, idepth: 0, %1, %8, %9 [, %11]
%7 = Local: 8, %2 [, %8, %9, %19, %29]
%2 = Mem: %0 [, %4, %5, %7, %27]
%34 = ImmBinOp: imm: 2, op: addi64, %20 [, %25]
%20 = Load: %17, %19 [, %34]
%19 = Load: %17, %7 [, %20, %25]
%14 = Load: %12, %4 [, %15]
%12 = Mem: %11 [, %14, %15]
%11 = CallEnd: idepth: 0, %10 [, %12, %15]
%30 = Load: %28, %29 [, %35]
%29 = Load: %28, %7 [, %30]
%26 = CInt: 0 [, %28]
%27 = Local: 8, %2 [, %28]
%25 = Store: %16, %17, %19, %34 [, %28]
%17 = Mem: %16 [, %19, %20, %25]
%15 = Call: id: fn2, idepth: 0, %11, %12, %14 [, %16]
%35 = ImmBinOp: imm: -4, op: addi64, %30 [, %33]
%28 = Store: %16, %25, %27, %26 [, %29, %30, %33]
%16 = CallEnd: idepth: 0, %15 [, %17, %33, %25, %28]
%33 = Return: idepth: 0, %16, %28, %35 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = CInt: 1
  %7 = Local: 8, %2
  %5 = Store: %2, %4, %3
  %8 = Store: %5, %7, %4
  %9 = Load: %8, %7
  %10 = Call: id: fn1, idepth: 2, %8, %9, %9
%11 = CallEnd: idepth: 3, %10
  %12 = Mem
  %14 = Load: %12, %4
  %15 = Call: id: fn2, idepth: 4, %12, %14, %14
%16 = CallEnd: idepth: 5, %15
  %17 = Mem
  %26 = CInt: 0
  %27 = Local: 8, %2
  %19 = Load: %17, %7
  %20 = Load: %17, %19
  %34 = ImmBinOp: imm: 2, op: addi64, %20
  %25 = Store: %17, %19, %34
  %28 = Store: %25, %27, %26
  %29 = Load: %28, %7
  %30 = Load: %28, %29
  %35 = ImmBinOp: imm: -4, op: addi64, %30
  %33 = Return: idepth: 0, %28, %35

======== REGISTER SELECTION ========
{ 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 4, 5, 5, 1, 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(a: uint): void {
    return
}
======== UNSCHEDULED SON ========
%3 = Arg: 0, %0 [, %5]
%4 = Local: 8, %2 [, %5]
%2 = Mem: %0 [, %4, %5]
%0 = Start: idepth: 0 [, %1, %2, %3]
%5 = Store: %1, %2, %4, %3 [, %6]
%1 = Entry: idepth: 0, %0 [, %5, %6]
%6 = Return: idepth: 0, %1, %5 []

======== OPTIMIZED SON ========
%3 = Arg: 0, %0 [, %5]
%4 = Local: 8, %2 [, %5]
%2 = Mem: %0 [, %4, %5]
%0 = Start: idepth: 0 [, %1, %2, %3]
%5 = Store: %1, %2, %4, %3 [, %6]
%1 = Entry: idepth: 0, %0 [, %5, %6]
%6 = Return: idepth: 0, %1, %5 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %5 = Store: %2, %4, %3
  %6 = Return: idepth: 0, %5

======== REGISTER SELECTION ========
{ 1, 2, 1, 1 }

======== SOURCE ========
fn(a: ^uint): void {
    *a = 2
    return
}
======== UNSCHEDULED SON ========
%7 = Load: %5, %6 []
%4 = Local: 8, %2 [, %5, %6]
%3 = Arg: 0, %0 [, %5]
%2 = Mem: %0 [, %4, %5]
%8 = CInt: 2 [, %9]
%6 = Load: %5, %4 [, %7, %9]
%5 = Store: %1, %2, %4, %3 [, %6, %7, %9]
%0 = Start: idepth: 0 [, %1, %2, %3]
%9 = Store: %1, %5, %6, %8 [, %10]
%1 = Entry: idepth: 0, %0 [, %5, %9, %10]
%10 = Return: idepth: 0, %1, %9 []

======== OPTIMIZED SON ========
%4 = Local: 8, %2 [, %5, %6]
%3 = Arg: 0, %0 [, %5]
%2 = Mem: %0 [, %4, %5]
%8 = CInt: 2 [, %9]
%6 = Load: %5, %4 [, %9]
%5 = Store: %1, %2, %4, %3 [, %6, %9]
%0 = Start: idepth: 0 [, %1, %2, %3]
%9 = Store: %1, %5, %6, %8 [, %10]
%1 = Entry: idepth: 0, %0 [, %5, %9, %10]
%10 = Return: idepth: 0, %1, %9 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %8 = CInt: 2
  %5 = Store: %2, %4, %3
  %6 = Load: %5, %4
  %9 = Store: %5, %6, %8
  %10 = Return: idepth: 0, %9

======== REGISTER SELECTION ========
{ 1, 2, 3, 1, 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -48, 48
     addi64 $254, $254, -72
     addi64 $32, $254, 0
       li64 $33, 1
     addi64 $34, $254, 8
         st $33, $254, 0, 8
         st $32, $254, 8, 8
         ld $33, $254, 8, 8
         cp $2, $33
        jal $31, $0, :modify
         ld $32, $254, 0, 8
         cp $2, $32
        jal $31, $0, :drop
       li64 $32, 0
     addi64 $33, $254, 16
         ld $35, $254, 8, 8
         ld $36, $35, 0, 8
     addi64 $36, $36, 2
         st $36, $35, 0, 8
         st $32, $254, 16, 8
         ld $32, $254, 8, 8
         ld $32, $32, 0, 8
     addi64 $32, $32, -4
         cp $1, $32
     addi64 $254, $254, 72
         ld $31, $254, -48, 48
         tx
drop:
     addi64 $254, $254, -8
         cp $14, $2
     addi64 $13, $254, 0
         st $14, $254, 0, 8
     addi64 $254, $254, 8
       jala $0, $31, 0
modify:
     addi64 $254, $254, -8
         cp $14, $2
     addi64 $13, $254, 0
       li64 $15, 2
         st $14, $254, 0, 8
         ld $13, $254, 0, 8
         st $15, $13, 0, 8
     addi64 $254, $254, 8
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -48, 48
  addi64 $254=10240, $254, -72
  addi64 $32=0, $254=10168, 0
    li64 $33=0, 1
  addi64 $34=0, $254=10168, 8
      st $33=1, $254=10168, 0, 8
      st $32=10168, $254=10168, 8, 8
      ld $33=1, $254=10168, 8, 8
      cp $2=0, $33=10168
     jal $31=0, $0=0, 239
  addi64 $254=10168, $254, -8
      cp $14=0, $2=10168
  addi64 $13=0, $254=10160, 0
    li64 $15=0, 2
      st $14=10168, $254=10160, 0, 8
      ld $13=10160, $254=10160, 0, 8
      st $15=2, $13=10168, 0, 8
  addi64 $254=10160, $254, 8
    jala $0=0, $31=105, 0
      ld $32=10168, $254=10168, 0, 8
      cp $2=10168, $32=2
     jal $31=105, $0=0, 156
  addi64 $254=10168, $254, -8
      cp $14=10168, $2=2
  addi64 $13=10168, $254=10160, 0
      st $14=2, $254=10160, 0, 8
  addi64 $254=10160, $254, 8
    jala $0=0, $31=128, 0
    li64 $32=2, 0
  addi64 $33=10168, $254=10168, 16
      ld $35=0, $254=10168, 8, 8
      ld $36=0, $35=10168, 0, 8
  addi64 $36=2, $36, 2
      st $36=4, $35=10168, 0, 8
      st $32=0, $254=10168, 16, 8
      ld $32=0, $254=10168, 8, 8
      ld $32=10168, $32, 0, 8
  addi64 $32=4, $32, -4
      cp $1=0, $32=0
  addi64 $254=10168, $254, 72
      ld $31=128, $254=10240, -48, 48
      tx