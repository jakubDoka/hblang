======== SOURCE ========
fn(): uint {
    a := 1
    b := &a
    modify(b)
    drop(a);
    *b += 2
    stack_reclamation_edge_case := 0
    return *b - 4
}
======== UNSCHEDULED SON ========
%2 = Entry: idepth: 0, %0 [, %6]
%0 = Start: idepth: 0 [, %1, %2]
%9 = Ret: %7 []
%16 = CInt: 2 [, %17]
%6 = Call: id: fn1, idepth: 0, %2, %5, %4 [, %7]
%5 = Store: %1, %4, %3 [, %6]
%1 = Mem: %0 [, %4, %5]
%15 = Load: %12, %4 [, %17]
%14 = Load: %12, %4 []
%3 = CInt: 1 [, %5, %10]
%8 = Mem: %7 [, %10]
%7 = CallEnd: idepth: 0, %6 [, %8, %9, %10]
%21 = CInt: 4 [, %22]
%20 = Load: %18, %4 [, %22]
%17 = BinOp: +, %15, %16 [, %18]
%4 = Local: 8, %1 [, %5, %6, %14, %15, %18, %20]
%13 = Ret: %11 []
%12 = Mem: %11 [, %14, %15, %18]
%10 = Call: id: fn2, idepth: 0, %7, %8, %3 [, %11]
%22 = BinOp: -, %20, %21 [, %23]
%18 = Store: %12, %4, %17 [, %20, %23]
%11 = CallEnd: idepth: 0, %10 [, %12, %13, %23]
%23 = Return: idepth: 0, %11, %18, %22 []

======== OPTIMIZED SON ========
%2 = Entry: idepth: 0, %0 [, %6]
%0 = Start: idepth: 0 [, %1, %2]
%6 = Call: id: fn1, idepth: 0, %2, %5, %4 [, %7]
%5 = Store: %1, %4, %3 [, %6]
%1 = Mem: %0 [, %4, %5]
%15 = Load: %12, %4 [, %24]
%3 = CInt: 1 [, %5, %10]
%8 = Mem: %7 [, %10]
%7 = CallEnd: idepth: 0, %6 [, %8, %10]
%20 = Load: %18, %4 [, %25]
%24 = ImmBinOp: imm: 2, op: addi64, %15 [, %18]
%4 = Local: 8, %1 [, %5, %6, %20, %15, %18]
%12 = Mem: %11 [, %18, %15]
%10 = Call: id: fn2, idepth: 0, %7, %8, %3 [, %11]
%25 = ImmBinOp: imm: -4, op: addi64, %20 [, %23]
%18 = Store: %12, %4, %24 [, %20, %23]
%11 = CallEnd: idepth: 0, %10 [, %12, %23]
%23 = Return: idepth: 0, %11, %18, %25 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%2 = Entry: idepth: 1, %0
  %4 = Local: 8, %1
  %3 = CInt: 1
  %5 = Store: %1, %4, %3
  %6 = Call: id: fn1, idepth: 2, %5, %4
%7 = CallEnd: idepth: 3, %6
  %8 = Mem
  %10 = Call: id: fn2, idepth: 4, %8, %3
%11 = CallEnd: idepth: 5, %10
  %12 = Mem
  %15 = Load: %12, %4
  %24 = ImmBinOp: imm: 2, op: addi64, %15
  %18 = Store: %12, %4, %24
  %20 = Load: %18, %4
  %25 = ImmBinOp: imm: -4, op: addi64, %20
  %23 = Return: idepth: 0, %18, %25

======== REGISTER SELECTION ========
{ 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1 }

======== SOURCE ========
fn(a: uint): void {
    return
}
======== UNSCHEDULED SON ========
%2 = Arg: 0, %0 []
%0 = Start: idepth: 0 [, %1, %2, %3]
%1 = Mem: %0 [, %4]
%3 = Entry: idepth: 0, %0 [, %4]
%4 = Return: idepth: 0, %3, %1 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %3]
%1 = Mem: %0 [, %4]
%3 = Entry: idepth: 0, %0 [, %4]
%4 = Return: idepth: 0, %3, %1 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%3 = Entry: idepth: 0, %0
  %4 = Return: idepth: 0, %1

======== REGISTER SELECTION ========
{ 1 }

======== SOURCE ========
fn(a: ^uint): void {
    *a = 2
    return
}
======== UNSCHEDULED SON ========
%4 = Load: %1, %2 []
%5 = CInt: 2 [, %6]
%2 = Arg: 0, %0 [, %4, %6]
%1 = Mem: %0 [, %4, %6]
%0 = Start: idepth: 0 [, %1, %2, %3]
%6 = Store: %1, %2, %5 [, %7]
%3 = Entry: idepth: 0, %0 [, %7]
%7 = Return: idepth: 0, %3, %6 []

======== OPTIMIZED SON ========
%5 = CInt: 2 [, %6]
%2 = Arg: 0, %0 [, %6]
%1 = Mem: %0 [, %6]
%0 = Start: idepth: 0 [, %1, %2, %3]
%6 = Store: %1, %2, %5 [, %7]
%3 = Entry: idepth: 0, %0 [, %7]
%7 = Return: idepth: 0, %3, %6 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%3 = Entry: idepth: 1, %0
  %2 = Arg: 0
  %5 = CInt: 2
  %6 = Store: %1, %2, %5
  %7 = Return: idepth: 0, %6

======== REGISTER SELECTION ========
{ 1, 2, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -24, 24
     addi64 $254, $254, -32
     addi64 $32, $254, 0
       li64 $33, 1
         st $33, $32, 0, 8
         cp $2, $32
        jal $31, $0, :modify
         cp $2, $33
        jal $31, $0, :drop
         ld $33, $32, 0, 8
     addi64 $33, $33, 2
         st $33, $32, 0, 8
         ld $32, $32, 0, 8
     addi64 $32, $32, -4
         cp $1, $32
     addi64 $254, $254, 32
         ld $31, $254, -24, 24
         tx
drop:
       jala $0, $31, 0
modify:
         cp $13, $2
       li64 $14, 2
         st $14, $13, 0, 8
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -24, 24
  addi64 $254=10240, $254, -32
  addi64 $32=0, $254=10208, 0
    li64 $33=0, 1
      st $33=1, $32=10208, 0, 8
      cp $2=0, $32=10208
     jal $31=0, $0=0, 117
      cp $13=0, $2=10208
    li64 $14=0, 2
      st $14=2, $13=10208, 0, 8
    jala $0=0, $31=68, 0
      cp $2=10208, $33=1
     jal $31=68, $0=0, 96
    jala $0=0, $31=78, 0
      ld $33=1, $32=10208, 0, 8
  addi64 $33=2, $33, 2
      st $33=4, $32=10208, 0, 8
      ld $32=10208, $32, 0, 8
  addi64 $32=4, $32, -4
      cp $1=0, $32=0
  addi64 $254=10208, $254, 32
      ld $31=78, $254=10240, -24, 24
      tx