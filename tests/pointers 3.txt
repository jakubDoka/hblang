======== SOURCE ========
fn(): uint {
	a := 1
	_ = do_stuff(&a)
	return a
}
======== UNSCHEDULED SON ========
%5 = CInt: 1 [, %6]
%0 = Start: idepth: 0 [, %1, %2]
%2 = Mem: %0 [, %6, %4]
%6 = Store: %1, %2, %4, %5 [, %7]
%1 = Entry: idepth: 0, %0 [, %7, %6]
%4 = Local: 8, %2 [, %6, %11, %7]
%10 = Ret: 0, %8 []
%7 = Call: ret_count: 1, id: 1, idepth: 0, %1, %6, %4 [, %8]
%11 = Load: %9, %4 [, %12]
%9 = Mem: %8 [, %12, %11]
%8 = CallEnd: idepth: 0, %7 [, %12, %9, %10]
%12 = Return: idepth: 0, %8, %9, %11 []

======== OPTIMIZED SON ========
%5 = CInt: 1 [, %6]
%0 = Start: idepth: 0 [, %1, %2]
%2 = Mem: %0 [, %6, %4]
%6 = Store: %1, %2, %4, %5 [, %7]
%1 = Entry: idepth: 0, %0 [, %6, %7]
%4 = Local: 8, %2 [, %6, %11, %7]
%7 = Call: ret_count: 1, id: 1, idepth: 0, %1, %6, %4 [, %8]
%11 = Load: %9, %4 [, %12]
%9 = Mem: %8 [, %12, %11]
%8 = CallEnd: idepth: 0, %7 [, %9, %12]
%12 = Return: idepth: 0, %8, %9, %11 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = CInt: 1
  %4 = Local: 8, %2
  %6 = Store: %2, %4, %5
  %7 = Call: ret_count: 1, id: 1, idepth: 2, %6, %4
%8 = CallEnd: idepth: 3, %7
  %9 = Mem
  %11 = Load: %9, %4
  %12 = Return: idepth: 0, %9, %11

======== SOURCE ========
fn(v: ^uint): uint {
	if *v == 0 {
		return 0;
		*v = 2
	} else {
		return 1;
		*v = 3
	}
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2, %4]
%12 = If: idepth: 0, %1, %10 [, %13, %15]
%10 = BinOp: eq, %9, %8 [, %12]
%9 = Load: %6, %7 [, %10]
%7 = Load: %6, %5 [, %9]
%4 = Arg: 0, %0 [, %6]
%5 = Local: 8, %2 [, %6, %7]
%2 = Mem: %0 [, %6, %5]
%1 = Entry: idepth: 0, %0 [, %12, %6]
%15 = Then: idepth: 0, %12 [, %18]
%13 = Then: idepth: 0, %12 [, %17]
%16 = CInt: 1 [, %21]
%8 = CInt: 0 [, %10, %21]
%6 = Store: %1, %2, %5, %4 [, %20, %7, %9, %20]
%18 = Jmp: idepth: 0, %15 [, %19]
%17 = Jmp: idepth: 0, %13 [, %19]
%21 = Phi: %19, %8, %16 [, %14]
%20 = Phi: %19, %6, %6 [, %14]
%19 = Region: idepth: 0, %17, %18 [, %14, %20, %21]
%14 = Return: idepth: 0, %19, %20, %21 []

======== OPTIMIZED SON ========
%22 = IfOp: swapped: false, op: jne, idepth: 0, %1, %9, %8 [, %13, %15]
%4 = Arg: 0, %0 [, %9]
%1 = Entry: idepth: 0, %0 [, %22]
%15 = Then: idepth: 0, %22 [, %18]
%13 = Then: idepth: 0, %22 [, %17]
%16 = CInt: 1 [, %21]
%8 = CInt: 0 [, %22, %21]
%9 = Load: %2, %4 [, %22]
%0 = Start: idepth: 0 [, %1, %2, %4]
%18 = Jmp: idepth: 0, %15 [, %19]
%17 = Jmp: idepth: 0, %13 [, %19]
%21 = Phi: %19, %8, %16 [, %14]
%2 = Mem: %0 [, %9, %14]
%19 = Region: idepth: 0, %17, %18 [, %21, %14]
%14 = Return: idepth: 0, %19, %2, %21 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Arg: 0
  %8 = CInt: 0
  %9 = Load: %2, %4
  %22 = IfOp: swapped: false, op: jne, idepth: 2, %9, %8
%13 = Then: idepth: 3, %22
  %23 = MachMove: %8
  %17 = Jmp: idepth: 4
%15 = Then: idepth: 3, %22
  %16 = CInt: 1
  %24 = MachMove: %16
  %18 = Jmp: idepth: 4
%19 = Region: idepth: 0, %17, %18
  %25 = Phi: %23, %24
  %14 = Return: idepth: 0, %2, %25

======== CODEGEN ========
main:
         st $31, $254, -24, 24
     addi64 $254, $254, -32
       li64 $32, 1
     addi64 $33, $254, 0
         st $32, $254, 0, 8
         cp $2, $33
        jal $31, $0, :do_stuff
         ld $32, $254, 0, 8
         cp $1, $32
     addi64 $254, $254, 32
         ld $31, $254, -24, 24
         tx
do_stuff:
         cp $13, $2
       li64 $14, 0
         ld $13, $13, 0, 8
        jne $13, $14, :1
         cp $13, $14
        jmp :2
1:     li64 $13, 1
2:       cp $1, $13
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -24, 24
  addi64 $254=10240, $254, -32
    li64 $32=0, 1
  addi64 $33=0, $254=10208, 0
      st $32=1, $254=10208, 0, 8
      cp $2=0, $33=10208
     jal $31=0, $0=0, 48
      cp $13=0, $2=10208
    li64 $14=0, 0
      ld $13=10208, $13, 0, 8
     jne $13=1, $14=0, 13
    li64 $13=1, 1
      cp $1=0, $13=1
    jala $0=0, $31=68, 0
      ld $32=1, $254=10208, 0, 8
      cp $1=1, $32=1
  addi64 $254=10208, $254, 32
      ld $31=68, $254=10240, -24, 24
      tx