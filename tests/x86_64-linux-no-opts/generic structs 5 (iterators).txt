generic structs 5 (iterators).main.Chars.next:
	sub rsp, 0x10
	mov [rsp], rdi
	mov rcx, [rsp]
	mov rax, [rcx+0x08]
	cmp rax, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov byte ptr [rsp+0x08], 0x00
	mov ax, [rsp+0x08]
	jmp :1
0:	mov rax, [rcx]
	mov byte ptr [rsp+0x0A], 0x01
	mov al, [rax]
	mov [rsp+0x0B], al
	mov rsi, [rsp]
	mov rdx, [rsi+0x08]
	dec rdx
	mov rcx, [rsi]
	inc rcx
	mov ax, [rsp+0x0A]
	mov [rsi], rcx
	mov [rsi+0x08], rdx
1:	add rsp, 0x10
	ret
generic structs 5 (iterators).main.Chain(.Chars, .Chars).next:
	sub rsp, 0x18
	mov [rsp], rdi
7:	mov rdi, [rsp]
	mov al, [rdi]
	movsx rcx, al
	cmp rcx, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	add rdi, 0x08
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x0A], ax
	mov ax, [rsp+0x0A]
	mov [rsp+0x08], ax
	mov al, [rsp+0x08]
	test al, al
	jz :1
	mov ax, [rsp+0x08]
	jmp :2
1:	mov rax, [rsp]
	mov byte ptr [rax], 0x01
	jmp :3
0:	cmp rcx, 0x01
	setz al
	movzx rax, al
	test al, al
	jz :4
	add rdi, 0x18
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x0E], ax
	mov ax, [rsp+0x0E]
	mov [rsp+0x0C], ax
	mov al, [rsp+0x0C]
	test al, al
	jz :5
	mov ax, [rsp+0x0C]
2:	jmp :6
5:	mov rax, [rsp]
	mov byte ptr [rax], 0x02
3:	jmp :7
4:	mov byte ptr [rsp+0x10], 0x00
	mov ax, [rsp+0x10]
6:	add rsp, 0x18
	ret
main:
	push rbx
	sub rsp, 0xA0
	lea rax, [0x0000000000000007]
	mov [rsp], rax
	mov qword ptr [rsp+0x08], 0x04
	lea rdx, [0x0000000000000007]
	mov rcx, 0x90000002
	lea rax, [0x0000000000000007]
	mov [rsp+0x10], rax
	mov qword ptr [rsp+0x18], 0x02
	mov [rsp+0x20], rdx
	mov qword ptr [rsp+0x28], 0x02
	mov dword ptr [rsp+0x78], 0x7000000F
	mov [rsp+0x7C], ecx
	mov rax, [rsp+0x10]
	mov [rsp+0x30], rax
	mov rax, [rsp+0x18]
	mov [rsp+0x38], rax
	mov rax, [rsp]
	mov [rsp+0x40], rax
	mov rax, [rsp+0x08]
	mov [rsp+0x48], rax
	mov dword ptr [rsp+0x80], 0x70000010
	mov byte ptr [rsp+0x50], 0x00
	mov rax, [rsp+0x10]
	mov [rsp+0x58], rax
	mov rax, [rsp+0x18]
	mov [rsp+0x60], rax
	mov rax, [rsp+0x20]
	mov [rsp+0x68], rax
	mov rax, [rsp+0x28]
	mov [rsp+0x70], rax
	xor rbx, rbx
8:	lea rdi, [rsp+0x30]
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x86], ax
	mov ax, [rsp+0x86]
	mov [rsp+0x84], ax
	mov al, [rsp+0x84]
	cmp al, bl
	jnz :0
	mov rax, [rsp]
	mov [rsp+0x40], rax
	mov rax, [rsp+0x08]
	mov [rsp+0x48], rax
5:	lea rdi, [rsp+0x40]
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x8E], ax
	mov ax, [rsp+0x8E]
	mov [rsp+0x8C], ax
	mov al, [rsp+0x8C]
	cmp al, bl
	jnz :1
	xor rax, rax
	jmp :7
1:	lea rdi, [rsp+0x50]
	call :generic structs 5 (iterators).main.Chain(.Chars, .Chars).next
	mov [rsp+0x92], ax
	mov ax, [rsp+0x92]
	mov [rsp+0x90], ax
	mov al, [rsp+0x90]
	cmp al, bl
	jnz :3
	mov rax, 0x03
	jmp :7
3:	mov cl, [rsp+0x8D]
	mov al, [rsp+0x91]
	cmp al, cl
	jz :4
	mov rax, 0x04
	jmp :7
4:	jmp :5
0:	lea rdi, [rsp+0x40]
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x8A], ax
	mov ax, [rsp+0x8A]
	mov [rsp+0x88], ax
	mov al, [rsp+0x88]
	cmp al, bl
	jnz :6
	mov rax, 0x01
	jmp :7
6:	mov cl, [rsp+0x89]
	mov al, [rsp+0x85]
	cmp al, cl
	jz :7
	mov rax, 0x02
7:	add rsp, 0xA0
	pop rbx
	ret
7:	jmp :8