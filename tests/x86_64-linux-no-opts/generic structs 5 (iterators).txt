generic structs 5 (iterators).main.Chars.next:
	sub rsp, 0x10
	mov [rsp], rdi
	mov rcx, [rsp]
	mov rax, [rcx+0x08]
	cmp rax, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov byte ptr [rsp+0x08], 0x00
	mov ax, [rsp+0x08]
	jmp :1
0:	mov rax, [rcx]
	mov byte ptr [rsp+0x0A], 0x01
	mov al, [rax]
	mov [rsp+0x0B], al
	mov rsi, [rsp]
	mov rdx, [rsi+0x08]
	dec rdx
	mov rcx, [rsi]
	inc rcx
	mov ax, [rsp+0x0A]
	mov [rsi], rcx
	mov [rsi+0x08], rdx
1:	add rsp, 0x10
	ret
main:
	push rbx
	sub rsp, 0x80
	lea rax, [0x0000000000000007]
	mov [rsp], rax
	mov qword ptr [rsp+0x08], 0x04
	lea rcx, [0x0000000000000007]
	lea rax, [0x0000000000000007]
	mov [rsp+0x10], rax
	mov qword ptr [rsp+0x18], 0x02
	mov [rsp+0x20], rcx
	mov qword ptr [rsp+0x28], 0x02
	mov rax, [rsp+0x10]
	mov [rsp+0x30], rax
	mov rax, [rsp+0x18]
	mov [rsp+0x38], rax
	mov rax, [rsp]
	mov [rsp+0x40], rax
	mov rax, [rsp+0x08]
	mov [rsp+0x48], rax
	mov byte ptr [rsp+0x50], 0x00
	mov rax, [rsp+0x10]
	mov [rsp+0x58], rax
	mov rax, [rsp+0x18]
	mov [rsp+0x60], rax
	mov rax, [rsp+0x20]
	mov [rsp+0x68], rax
	mov rax, [rsp+0x28]
	mov [rsp+0x70], rax
	xor rbx, rbx
4:	lea rdi, [rsp+0x30]
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x78], ax
	mov ax, [rsp+0x78]
	mov [rsp+0x7E], ax
	mov al, [rsp+0x7E]
	cmp al, bl
	jnz :0
	xor rax, rax
	jmp :3
0:	lea rdi, [rsp+0x40]
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x7C], ax
	mov ax, [rsp+0x7C]
	mov [rsp+0x7A], ax
	mov al, [rsp+0x7A]
	cmp al, bl
	jnz :2
	mov rax, 0x01
	jmp :3
2:	mov cl, [rsp+0x7B]
	mov al, [rsp+0x7F]
	cmp al, cl
	jz :3
	mov rax, 0x02
3:	add rsp, 0x80
	pop rbx
	ret
3:	jmp :4