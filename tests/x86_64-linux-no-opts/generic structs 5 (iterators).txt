generic structs 5 (iterators).main.next:
	sub rsp, 0x10
	mov [rsp], rsi
	mov rcx, [rsp]
	mov rax, [rcx+0x08]
	cmp rax, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov byte ptr [rdi], 0x00
	jmp :1
0:	mov rax, [rcx]
	mov byte ptr [rsp+0x08], 0x01
	mov al, [rax]
	mov [rsp+0x09], al
	mov ax, [rsp+0x08]
	mov [rdi], ax
	mov rdx, [rsp]
	mov rax, [rdx+0x08]
	mov rcx, [rdx]
	add rcx, 0x01
	mov [rdx], rcx
	sub rax, 0x01
	mov [rdx+0x08], rax
1:	add rsp, 0x10
	ret
generic structs 5 (iterators).main.Chain(A = generic structs 5 (iterators).main, B = generic structs 5 (iterators).main).next:
	push rbx
	push rbp
	push r12
	sub rsp, 0x18
	mov r12, rdi
	mov [rsp], rsi
	lea rax, [rsp+0x08]
	mov rbp, rax
	lea rax, [rsp+0x0A]
	mov rbx, rax
7:	mov rsi, [rsp]
	mov al, [rsi]
	movsx rcx, al
	cmp rcx, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	add rsi, 0x08
	mov rdi, rbp
	call :generic structs 5 (iterators).main.next
	mov al, [rsp+0x08]
	test al, al
	jz :1
	mov cx, [rsp+0x08]
	mov rax, r12
	mov [rax], cx
	jmp :2
1:	mov rax, [rsp]
	mov byte ptr [rax], 0x01
	jmp :3
0:	cmp rcx, 0x01
	setz al
	movzx rax, al
	test al, al
	jz :4
	add rsi, 0x18
	mov rdi, rbx
	call :generic structs 5 (iterators).main.next
	mov al, [rsp+0x0A]
	test al, al
	jz :5
	mov cx, [rsp+0x0A]
	mov rax, r12
	mov [rax], cx
2:	jmp :6
5:	mov rax, [rsp]
	mov byte ptr [rax], 0x02
3:	jmp :7
4:	mov rax, r12
	mov byte ptr [rax], 0x00
6:	add rsp, 0x18
	pop r12
	pop rbp
	pop rbx
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	push r15
	sub rsp, 0x88
	lea rax, [0x0000000000000007]
	mov [rsp], rax
	mov qword ptr [rsp+0x08], 0x04
	lea rax, [0x0000000000000007]
	mov [rsp+0x10], rax
	mov qword ptr [rsp+0x18], 0x02
	lea rax, [rsp+0x50]
	mov r15, rax
	lea rax, [0x0000000000000007]
	mov [rsp+0x20], rax
	mov qword ptr [rsp+0x28], 0x02
	mov dword ptr [rsp+0x78], 0x70000002
	mov rax, 0x90000002
	mov [rsp+0x7C], eax
	lea rax, [rsp+0x30]
	mov r14, rax
	mov rax, [rsp+0x10]
	mov [rsp+0x30], rax
	mov rax, [rsp+0x18]
	mov [rsp+0x38], rax
	lea rax, [rsp+0x40]
	mov r13, rax
	mov rax, [rsp]
	mov [rsp+0x40], rax
	mov rax, [rsp+0x08]
	mov [rsp+0x48], rax
	mov byte ptr [rsp+0x50], 0x00
	mov rax, [rsp+0x10]
	mov [rsp+0x58], rax
	mov rax, [rsp+0x18]
	mov [rsp+0x60], rax
	mov rax, [rsp+0x20]
	mov [rsp+0x68], rax
	mov rax, [rsp+0x28]
	mov [rsp+0x70], rax
	lea rax, [rsp+0x82]
	mov r12, rax
	mov rbx, 0x00
	lea rax, [rsp+0x80]
	mov rbp, rax
8:	mov rdi, rbp
	mov rsi, r14
	call :generic structs 5 (iterators).main.next
	mov al, [rsp+0x80]
	cmp al, bl
	jnz :0
	mov rax, [rsp]
	mov [rsp+0x40], rax
	mov rax, [rsp+0x08]
	mov [rsp+0x48], rax
	lea rax, [rsp+0x84]
	mov r12, rax
	lea rax, [rsp+0x86]
	mov rbp, rax
5:	mov rdi, r12
	mov rsi, r13
	call :generic structs 5 (iterators).main.next
	mov al, [rsp+0x84]
	cmp al, bl
	jnz :1
	mov rax, 0x00
	jmp :7
1:	mov rdi, rbp
	mov rsi, r15
	call :generic structs 5 (iterators).main.Chain(A = generic structs 5 (iterators).main, B = generic structs 5 (iterators).main).next
	mov al, [rsp+0x86]
	cmp al, bl
	jnz :3
	mov rax, 0x03
	jmp :7
3:	mov cl, [rsp+0x85]
	mov al, [rsp+0x87]
	cmp al, cl
	jz :4
	mov rax, 0x04
	jmp :7
4:	jmp :5
0:	mov rsi, r13
	mov rdi, r12
	call :generic structs 5 (iterators).main.next
	mov al, [rsp+0x82]
	cmp al, bl
	jnz :6
	mov rax, 0x01
	jmp :7
6:	mov cl, [rsp+0x83]
	mov al, [rsp+0x81]
	cmp al, cl
	jz :7
	mov rax, 0x02
7:	add rsp, 0x88
	pop r15
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
7:	jmp :8