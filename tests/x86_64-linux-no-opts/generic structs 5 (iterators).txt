generic structs 5 (iterators).main.next:
	sub rsp, 0x10
	mov [rsp], rsi
	mov rcx, [rsp]
	mov rax, [rcx+0x08]
	cmp rax, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov byte ptr [rdi], 0x00
	jmp :1
0:	mov rax, [rcx]
	mov byte ptr [rsp+0x08], 0x01
	mov al, [rax]
	mov [rsp+0x09], al
	mov ax, [rsp+0x08]
	mov [rdi], ax
	mov rdx, [rsp]
	mov rcx, [rdx+0x08]
	mov rax, [rdx]
	add rax, 0x01
	mov [rdx], rax
	mov rax, rcx
	sub rax, 0x01
	mov [rdx+0x08], rax
1:	add rsp, 0x10
	ret
generic structs 5 (iterators).main.Chain(A = generic structs 5 (iterators).main, B = generic structs 5 (iterators).main).next:
	push rbx
	push rbp
	push r12
	sub rsp, 0x18
	mov r12, rdi
	mov [rsp], rsi
	lea rbp, [rsp+0x08]
	lea rbx, [rsp+0x0A]
7:	mov rdx, [rsp]
	mov al, [rdx]
	movsx rcx, al
	cmp rcx, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov rsi, rdx
	add rsi, 0x08
	mov rdi, rbp
	call :generic structs 5 (iterators).main.next
	mov cl, [rsp+0x08]
	mov rax, [rsp]
	test cl, cl
	jz :1
	mov ax, [rsp+0x08]
	mov [r12], ax
	jmp :2
1:	mov byte ptr [rax], 0x01
	jmp :3
0:	cmp rcx, 0x01
	setz al
	movzx rax, al
	test al, al
	jz :4
	mov rsi, rdx
	add rsi, 0x18
	mov rdi, rbx
	call :generic structs 5 (iterators).main.next
	mov cl, [rsp+0x0A]
	mov rax, [rsp]
	test cl, cl
	jz :5
	mov ax, [rsp+0x0A]
	mov [r12], ax
2:	jmp :6
5:	mov byte ptr [rax], 0x02
3:	jmp :7
4:	mov byte ptr [r12], 0x00
6:	add rsp, 0x18
	pop r12
	pop rbp
	pop rbx
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	push r15
	sub rsp, 0xA8
	lea rax, [0x0000000000000007]
	mov [rsp+0x20], rax
	mov qword ptr [rsp+0x18], 0x04
	mov r15, [rsp+0x18]
	mov [rsp+0x28], r15
	lea rax, [0x0000000000000007]
	mov [rsp+0x30], rax
	mov qword ptr [rsp+0x10], 0x02
	mov r15, [rsp+0x10]
	mov [rsp+0x38], r15
	lea r15, [rsp+0x70]
	mov [rsp+0x08], r15
	lea rax, [0x0000000000000007]
	mov [rsp+0x40], rax
	mov r15, [rsp+0x10]
	mov [rsp+0x48], r15
	mov dword ptr [rsp+0x98], 0x70000002
	mov rax, 0x90000002
	mov [rsp+0x9C], eax
	lea r15, [rsp+0x50]
	mov [rsp], r15
	mov rax, [rsp+0x30]
	mov [rsp+0x50], rax
	mov rax, [rsp+0x38]
	mov [rsp+0x58], rax
	lea r13, [rsp+0x60]
	mov rax, [rsp+0x20]
	mov [rsp+0x60], rax
	mov rax, [rsp+0x28]
	mov [rsp+0x68], rax
	mov byte ptr [rsp+0x70], 0x00
	mov rax, [rsp+0x30]
	mov [rsp+0x78], rax
	mov rax, [rsp+0x38]
	mov [rsp+0x80], rax
	mov rax, [rsp+0x40]
	mov [rsp+0x88], rax
	mov rax, [rsp+0x48]
	mov [rsp+0x90], rax
	lea rbp, [rsp+0xA2]
	mov r12, 0x00
	lea rbx, [rsp+0xA0]
8:	mov rdi, rbx
	mov rsi, [rsp]
	call :generic structs 5 (iterators).main.next
	mov al, [rsp+0xA0]
	cmp al, r12b
	jnz :0
	mov rax, [rsp+0x20]
	mov [rsp+0x60], rax
	mov rax, [rsp+0x28]
	mov [rsp+0x68], rax
	lea rbp, [rsp+0xA4]
	lea rbx, [rsp+0xA6]
5:	mov rdi, rbp
	mov rsi, r13
	call :generic structs 5 (iterators).main.next
	mov al, [rsp+0xA4]
	cmp al, r12b
	jnz :1
	mov rax, 0x00
	jmp :7
1:	mov rdi, rbx
	mov rsi, [rsp+0x08]
	call :generic structs 5 (iterators).main.Chain(A = generic structs 5 (iterators).main, B = generic structs 5 (iterators).main).next
	mov al, [rsp+0xA6]
	cmp al, r12b
	jnz :3
	mov rax, 0x03
	jmp :7
3:	mov cl, [rsp+0xA7]
	mov al, [rsp+0xA5]
	cmp cl, al
	jz :4
	mov rax, [rsp+0x18]
	jmp :7
4:	jmp :5
0:	mov rdi, rbp
	mov rsi, r13
	call :generic structs 5 (iterators).main.next
	mov al, [rsp+0xA2]
	cmp al, r12b
	jnz :6
	mov rax, 0x01
	jmp :7
6:	mov cl, [rsp+0xA1]
	mov al, [rsp+0xA3]
	cmp cl, al
	jz :7
	mov rax, [rsp+0x10]
7:	add rsp, 0xA8
	pop r15
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
7:	jmp :8