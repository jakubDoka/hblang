deep dedup 4 (mutuali recursive).fib:
	sub rsp, 0x18
	mov [rsp], rdi
	mov rdi, [rsp]
	cmp rdi, 0x02
	setbe al
	movzx rax, al
	test al, al
	jz :0
	mov rax, 0x01
	jmp :1
0:	call :deep dedup 4 (mutuali recursive).fib_body
	mov [rsp+0x08], rax
	mov rax, [rsp+0x08]
1:	add rsp, 0x18
	ret
deep dedup 4 (mutuali recursive).fib2:
	sub rsp, 0x18
	mov [rsp], rdi
	mov rdi, [rsp]
	cmp rdi, 0x02
	setbe al
	movzx rax, al
	test al, al
	jz :0
	mov rax, 0x01
	jmp :1
0:	call :deep dedup 4 (mutuali recursive).fib_body2
	mov [rsp+0x08], rax
	mov rax, [rsp+0x08]
1:	add rsp, 0x18
	ret
deep dedup 4 (mutuali recursive).fib_body2:
	sub rsp, 0x18
	mov [rsp], rdi
	mov rdi, [rsp]
	dec rdi
	call :deep dedup 4 (mutuali recursive).fib2
	mov [rsp+0x08], rax
	mov rdi, [rsp]
	sub rdi, 0x02
	call :deep dedup 4 (mutuali recursive).fib2
	mov [rsp+0x10], rax
	mov rax, [rsp+0x08]
	mov rcx, [rsp+0x10]
	add rax, rcx
	add rsp, 0x18
	ret
deep dedup 4 (mutuali recursive).fib_body:
	sub rsp, 0x18
	mov [rsp], rdi
	mov rdi, [rsp]
	dec rdi
	call :deep dedup 4 (mutuali recursive).fib
	mov [rsp+0x08], rax
	mov rdi, [rsp]
	sub rdi, 0x02
	call :deep dedup 4 (mutuali recursive).fib
	mov [rsp+0x10], rax
	mov rax, [rsp+0x08]
	mov rcx, [rsp+0x10]
	add rax, rcx
	add rsp, 0x18
	ret
main:
	sub rsp, 0x18
	mov rdi, 0x03
	call :deep dedup 4 (mutuali recursive).fib
	mov [rsp], rax
	mov rdi, 0x03
	call :deep dedup 4 (mutuali recursive).fib2
	mov [rsp+0x08], rax
	mov rax, [rsp]
	mov rcx, [rsp+0x08]
	sub rax, rcx
	add rsp, 0x18
	ret