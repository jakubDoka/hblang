cstring indexing.slice_ioob:
	ud2
cstring indexing.cstr:
	sub rsp, 0x10
	mov [rsp], rsi
	mov qword ptr [rsp+0x08], 0x00
	xor rdx, rdx
1:	mov rcx, [rsp]
	mov rax, rcx
	add rax, [rsp+0x08]
	mov al, [rax]
	cmp al, dl
	jz :0
	add qword ptr [rsp+0x08], 0x01
	jmp :1
0:	mov rax, [rsp+0x08]
	mov [rdi], rcx
	mov [rdi+0x08], rax
	add rsp, 0x10
	ret
main:
	push rbx
	push rbp
	sub rsp, 0x88
	lea rax, [0x0000000000000007]
	mov [rsp+0x50], rax
	mov qword ptr [rsp+0x58], 0x03
	lea rcx, [0x0000000000000007]
	mov rax, [rsp+0x50]
	mov [rsp+0x40], rax
	mov [rsp+0x60], rcx
	mov qword ptr [rsp+0x68], 0x03
	mov rax, [rsp+0x60]
	mov [rsp+0x48], rax
	mov qword ptr [rsp+0x80], 0x00
	mov rbp, 0x08
2:	mov rbx, [rsp+0x80]
	cmp rbx, 0x02
	setb al
	movzx rax, al
	test al, al
	jz :0
	mov rax, 0x02
	cmp rbx, rax
	jb :1
	lea rax, [0x0000000000000007]
	mov [rsp+0x20], rax
	mov qword ptr [rsp+0x28], 0x10
	mov rax, 0x1100000010
	mov [rsp+0x30], rax
	lea rsi, [rsp+0x20]
	mov rdx, 0x20
	lea rdi, [rsp]
	call :memcpy
	mov rsi, rbx
	mov rdx, rbx
	mov rdi, 0x02
	call :cstring indexing.slice_ioob
1:	imul rbx, rbp
	lea rax, [rsp+0x40]
	add rax, rbx
	mov rsi, [rax]
	lea rdi, [rsp+0x70]
	call :cstring indexing.cstr
	mov rax, [rsp+0x80]
	inc rax
	mov [rsp+0x80], rax
	jmp :2
0:	xor rax, rax
	add rsp, 0x88
	pop rbp
	pop rbx
	ret
memcpy: