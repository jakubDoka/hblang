directives 20 (@handler, @SourceLoc).main:
	push rbx
	sub rsp, 0x68
	mov byte ptr [rsp+0x64], 0x00
	lea rax, [rsp+0x64]
	mov [rsp+0x40], rax
	mov qword ptr [rsp+0x48], 0x01
	mov byte ptr [rsp+0x60], 0x01
	mov byte ptr [rsp+0x61], 0x02
	mov byte ptr [rsp+0x62], 0x03
	mov byte ptr [rsp+0x63], 0x04
	mov eax, [rsp+0x60]
	mov [rsp+0x60], eax
	mov edi, [rsp+0x60]
	call :directives 20 (@handler, @SourceLoc).produce_memcpy
	mov rax, [rsp+0x48]
	mov rbx, rax
	xor dl, dl
	xor rcx, rcx
	mov rax, rbx
	cmp rcx, rax
	setnbe al
	movzx rax, al
	or eax, edx
	test al, al
	jz :0
	lea rax, [0x0000000000000007]
	mov [rsp+0x20], rax
	mov qword ptr [rsp+0x28], 0x24
	mov rax, 0x100000001
	mov [rsp+0x30], rax
	lea rdi, [rsp]
	lea rsi, [rsp+0x20]
	mov rdx, 0x20
	call :memcpy
	xor rsi, rsi
	xor rdx, rdx
	mov rdi, rbx
	call :directives 20 (@handler, @SourceLoc).slice_ioob
0:	mov rax, [rsp+0x40]
	mov [rsp+0x50], rax
	mov qword ptr [rsp+0x58], 0x00
	mov rdi, [rsp+0x50]
	mov rsi, [rsp+0x58]
	call :directives 20 (@handler, @SourceLoc).use_slice
	add rsp, 0x68
	pop rbx
	ret
directives 20 (@handler, @SourceLoc).produce_memcpy:
	sub rsp, 0x10
	mov [rsp], edi
	add rsp, 0x10
	ret
memcpy:
	sub rsp, 0x20
	mov [rsp], rdi
	mov [rsp+0x08], rsi
	mov [rsp+0x10], rdx
1:	mov rax, [rsp+0x10]
	cmp rax, 0x00
	setnz al
	movzx rax, al
	test al, al
	jz :0
	mov rax, [rsp+0x08]
	mov rcx, [rsp]
	mov al, [rax]
	mov [rcx], al
	mov rax, [rsp]
	inc rax
	mov [rsp], rax
	mov rax, [rsp+0x08]
	inc rax
	mov [rsp+0x08], rax
	mov rax, [rsp+0x10]
	dec rax
	mov [rsp+0x10], rax
	jmp :1
0:	add rsp, 0x20
	ret
directives 20 (@handler, @SourceLoc).slice_ioob:
	ud2
directives 20 (@handler, @SourceLoc).use_slice:
	push rbx
	sub rsp, 0x58
	mov [rsp+0x40], rdi
	mov [rsp+0x48], rsi
	mov rbx, [rsp+0x48]
	xor rcx, rcx
	mov rax, rbx
	cmp rcx, rax
	jb :0
	lea rax, [0x0000000000000007]
	mov [rsp+0x20], rax
	mov qword ptr [rsp+0x28], 0x24
	mov rax, 0xF00000012
	mov [rsp+0x30], rax
	lea rdi, [rsp]
	lea rsi, [rsp+0x20]
	mov rdx, 0x20
	call :memcpy
	xor rsi, rsi
	xor rdx, rdx
	mov rdi, rbx
	call :directives 20 (@handler, @SourceLoc).slice_ioob
0:	mov rax, [rsp+0x40]
	mov al, [rax]
	movzx rax, al
	add rsp, 0x58
	pop rbx
	ret
_start:
	sub rsp, 0x08
	call :directives 20 (@handler, @SourceLoc).main
	add rsp, 0x08
	ret