directives 20 (@handler, @SourceLoc).slice_ioob:
	ud2
directives 20 (@handler, @SourceLoc).use_slice:
	push rbx
	push rbp
	push r12
	sub rsp, 0x58
	mov [rsp+0x40], rdi
	mov [rsp+0x48], rsi
	mov r12, 0x00
	mov rbp, [rsp+0x48]
	cmp r12, rbp
	jb :0
	lea rcx, [rsp+0x20]
	lea rax, [0x0000000000000007]
	mov [rsp+0x20], rax
	mov rax, 0x24
	mov [rsp+0x28], rax
	mov rax, 0xF00000012
	mov [rsp+0x30], rax
	lea rbx, [rsp]
	mov rax, 0x20
	mov rdi, rbx
	mov rsi, rcx
	mov rdx, rax
	call :memcpy
	mov rdi, rbp
	mov rsi, r12
	mov rdx, r12
	call :directives 20 (@handler, @SourceLoc).slice_ioob
0:	mov rax, [rsp+0x40]
	mov al, [rax]
	movzx rax, al
	add rsp, 0x58
	pop r12
	pop rbp
	pop rbx
	ret
main:
	push rbx
	push rbp
	push r12
	sub rsp, 0x68
	mov r12, 0x00
	lea rax, [rsp+0x60]
	mov rcx, 0x00
	mov [rsp+0x60], cl
	mov [rsp+0x40], rax
	mov rax, 0x01
	mov [rsp+0x48], rax
	mov rbp, [rsp+0x48]
	cmp r12, rbp
	setnb dl
	movzx rdx, dl
	or rdx, rcx
	test dl, dl
	jz :0
	lea rcx, [rsp+0x20]
	lea rax, [0x0000000000000007]
	mov [rsp+0x20], rax
	mov rax, 0x24
	mov [rsp+0x28], rax
	mov rax, 0x100000001
	mov [rsp+0x30], rax
	lea rbx, [rsp]
	mov rax, 0x20
	mov rdi, rbx
	mov rsi, rcx
	mov rdx, rax
	call :memcpy
	mov rdi, rbp
	mov rsi, r12
	mov rdx, r12
	call :directives 20 (@handler, @SourceLoc).slice_ioob
0:	mov rax, [rsp+0x40]
	mov [rsp+0x50], rax
	mov [rsp+0x58], r12
	mov rdi, [rsp+0x50]
	mov rsi, [rsp+0x58]
	call :directives 20 (@handler, @SourceLoc).use_slice
	add rsp, 0x68
	pop r12
	pop rbp
	pop rbx
	ret
memcpy: