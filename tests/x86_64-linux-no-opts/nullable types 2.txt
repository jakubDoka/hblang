nullable types 2.take:
	sub rsp, 0x10
	mov [rsp], rdi
	mov rcx, [rsp]
	mov rax, [rcx]
	inc rax
	mov [rcx], rax
	add rsp, 0x10
	ret
main:
	sub rsp, 0x68
	mov byte ptr [rsp+0x10], 0x01
	mov qword ptr [rsp+0x18], 0x00
	mov qword ptr [rsp+0x20], 0x00
	mov byte ptr [rsp+0x28], 0x01
	mov qword ptr [rsp+0x30], 0x00
	mov qword ptr [rsp+0x38], 0x00
	mov dword ptr [rsp+0x58], 0x20000001
	mov byte ptr [rsp+0x40], 0x01
	mov qword ptr [rsp+0x48], 0x00
	mov qword ptr [rsp+0x50], 0x00
	lea rax, [0x0000000000000007]
	mov [rsp], rax
	mov qword ptr [rsp+0x08], 0x00
	xor rcx, rcx
	mov al, [rsp+0x10]
	cmp al, cl
	jnz :0
	mov rax, 0x01
	jmp :1
0:	mov al, [rsp+0x28]
	cmp al, cl
	jnz :2
	mov rax, 0x02
1:	jmp :3
2:	mov al, [rsp+0x40]
	cmp al, cl
	jnz :4
	mov rax, 0x03
3:	jmp :5
4:	mov rax, [rsp]
	cmp rax, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :6
	mov rax, 0x04
5:	jmp :7
6:	mov qword ptr [rsp+0x20], 0x01
	lea rdi, [rsp+0x18]
	call :nullable types 2.take
	mov rax, [rsp+0x18]
	sub rax, [rsp+0x20]
7:	add rsp, 0x68
	ret