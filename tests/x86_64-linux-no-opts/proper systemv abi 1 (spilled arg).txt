proper systemv abi 1 (spilled arg).load_of_args:
	push rbx
	push rbp
	sub rsp, 0x30
	mov [rsp], rdi
	mov [rsp+0x08], rsi
	mov [rsp+0x10], rdx
	mov [rsp+0x18], rcx
	mov [rsp+0x20], r8
	mov [rsp+0x28], r9
	mov rax, [rsp]
	mov rcx, [rsp+0x08]
	mov rdi, [rsp+0x10]
	add rax, rcx
	mov rsi, [rsp+0x20]
	mov rbp, [rsp+0x28]
	mov rbx, [rsp+0x48]
	mov rdx, [rsp+0x50]
	mov rcx, [rsp+0x18]
	add rax, rdi
	add rax, rcx
	add rax, rsi
	add rax, rbp
	add rax, rbx
	add rax, rdx
	add rsp, 0x30
	pop rbp
	pop rbx
	ret
proper systemv abi 1 (spilled arg).stack_args:
	push rbx
	push rbp
	sub rsp, 0x10
	mov rdx, rdi
	mov rcx, rsi
	mov [rsp], rdx
	mov [rsp+0x08], rcx
	mov rsi, [rsp+0x48]
	mov rbp, [rsp+0x50]
	mov rbx, [rsp+0x38]
	mov rdx, [rsp+0x40]
	mov rax, [rsp+0x28]
	mov rcx, [rsp+0x30]
	add rax, rcx
	add rax, rbx
	add rax, rdx
	add rax, rsi
	mov rdx, [rsp]
	add rax, rbp
	mov rcx, [rsp+0x08]
	add rax, rdx
	add rax, rcx
	add rsp, 0x10
	pop rbp
	pop rbx
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	push r15
	sub rsp, 0xA8
	mov qword ptr [rsp+0x50], 0x06
	mov r15, [rsp+0x50]
	mov [rsp+0x68], r15
	mov qword ptr [rsp+0x48], 0x07
	mov r15, [rsp+0x48]
	mov [rsp+0x70], r15
	lea rdx, [rsp]
	mov rax, [rsp+0x68]
	mov [rdx], rax
	lea rcx, [rsp+0x08]
	mov rax, [rsp+0x70]
	mov [rcx], rax
	mov qword ptr [rsp+0x38], 0x00
	mov qword ptr [rsp+0x30], 0x03
	mov r13, 0x01
	mov r12, 0x02
	mov rbp, 0x04
	mov rbx, 0x05
	mov rdi, [rsp+0x38]
	mov rsi, r13
	mov rdx, r12
	mov rcx, [rsp+0x30]
	mov r8, rbp
	mov r9, rbx
	call :proper systemv abi 1 (spilled arg).load_of_args
	mov [rsp+0x40], rax
	lea rax, [rsp+0x78]
	mov r15, [rsp+0x38]
	mov [rsp+0x78], r15
	mov [rsp+0x80], r13
	mov [rsp+0x88], r12
	lea r15, [rsp+0x90]
	mov [rsp+0x38], r15
	mov r15, [rsp+0x30]
	mov [rsp+0x90], r15
	mov [rsp+0x98], rbp
	mov [rsp+0xA0], rbx
	mov r15, [rsp+0x50]
	mov [rsp+0x58], r15
	mov r15, [rsp+0x48]
	mov [rsp+0x60], r15
	lea r15, [rsp+0x18]
	mov [rsp+0x30], r15
	mov r13, 0x18
	lea r12, [rsp]
	mov rbp, [rsp+0x58]
	mov rbx, [rsp+0x60]
	mov rdi, r12
	mov rsi, rax
	mov rdx, r13
	call :memcpy
	mov rdi, [rsp+0x30]
	mov rsi, [rsp+0x38]
	mov rdx, r13
	call :memcpy
	mov rdi, rbp
	mov rsi, rbx
	call :proper systemv abi 1 (spilled arg).stack_args
	mov rcx, rax
	mov rax, [rsp+0x40]
	sub rax, rcx
	add rsp, 0xA8
	pop r15
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
memcpy: