proper systemv abi 1 (spilled arg).load_of_args:
	sub rsp, 0x30
	lea rax, [rsp+0x40]
	lea rax, [rsp+0x38]
	mov [rsp], rdi
	mov [rsp+0x08], rsi
	mov [rsp+0x10], rdx
	mov [rsp+0x18], rcx
	mov [rsp+0x20], r8
	mov [rsp+0x28], r9
	mov rax, [rsp]
	add rax, [rsp+0x08]
	add rax, [rsp+0x10]
	add rax, [rsp+0x18]
	add rax, [rsp+0x20]
	add rax, [rsp+0x28]
	add rax, [rsp+0x38]
	add rax, [rsp+0x40]
	add rsp, 0x30
	ret
proper systemv abi 1 (spilled arg).stack_args:
	sub rsp, 0x10
	lea rax, [rsp+0x30]
	lea rax, [rsp+0x18]
	mov [rsp], rdi
	mov [rsp+0x08], rsi
	mov rax, [rsp+0x18]
	add rax, [rsp+0x20]
	add rax, [rsp+0x28]
	add rax, [rsp+0x30]
	add rax, [rsp+0x38]
	add rax, [rsp+0x40]
	add rax, [rsp]
	add rax, [rsp+0x08]
	add rsp, 0x10
	ret
main:
	push rbx
	push rbp
	push r12
	sub rsp, 0x90
	mov qword ptr [rsp+0x40], 0x06
	mov qword ptr [rsp+0x48], 0x07
	mov r10, [rsp+0x40]
	xor rdi, rdi
	mov rsi, 0x01
	mov rdx, 0x02
	mov rcx, 0x03
	mov r8, 0x04
	mov r9, 0x05
	lea rax, [rsp]
	mov [rax], r10
	mov r10, [rsp+0x48]
	lea rax, [rsp+0x08]
	mov [rax], r10
	call :proper systemv abi 1 (spilled arg).load_of_args
	mov [rsp+0x50], rax
	mov qword ptr [rsp+0x58], 0x00
	mov qword ptr [rsp+0x60], 0x01
	mov qword ptr [rsp+0x68], 0x02
	mov qword ptr [rsp+0x70], 0x03
	mov qword ptr [rsp+0x78], 0x04
	mov qword ptr [rsp+0x80], 0x05
	mov qword ptr [rsp+0x30], 0x06
	mov qword ptr [rsp+0x38], 0x07
	lea rsi, [rsp+0x58]
	lea r12, [rsp+0x18]
	lea rdi, [rsp]
	mov rbp, [rsp+0x38]
	mov rbx, [rsp+0x30]
	mov rdx, 0x18
	call :memcpy
	mov rdi, r12
	lea rsi, [rsp+0x70]
	mov rdx, 0x18
	call :memcpy
	mov rdi, rbx
	mov rsi, rbp
	call :proper systemv abi 1 (spilled arg).stack_args
	mov [rsp+0x88], rax
	mov rax, [rsp+0x50]
	sub rax, [rsp+0x88]
	add rsp, 0x90
	pop r12
	pop rbp
	pop rbx
	ret
memcpy: