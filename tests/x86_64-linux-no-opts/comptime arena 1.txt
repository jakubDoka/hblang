comptime arena 1.something:
	push rbx
	sub rsp, 0x30
	mov [rsp+0x20], rdi
	lea rdi, [rsp]
	lea rsi, [0x0000000000000007]
	call :comptime arena 1.Arena.checkpoint
	lea rdi, [rsp+0x10]
	mov rsi, [rsp]
	mov rdx, [rsp+0x20]
	call :comptime arena 1.Arena.alloc(u8)
	mov rdx, 0x01
	mov rcx, [rsp+0x10]
	mov [rsp+0x28], rcx
	mov rax, [rsp+0x18]
	imul rax, rdx
	add rcx, rax
1:	mov rax, [rsp+0x28]
	cmp rax, rcx
	jnb :0
	mov byte ptr [rax], 0x01
	mov rax, [rsp+0x28]
	inc rax
	mov [rsp+0x28], rax
	jmp :1
0:	mov rbx, [rsp+0x18]
	lea rdi, [rsp]
	call :comptime arena 1.CheckPoint.restore
	mov rax, rbx
	add rsp, 0x30
	pop rbx
	ret
comptime arena 1.Arena.checkpoint:
	sub rsp, 0x10
	mov [rsp], rsi
	mov rax, [rsp]
	mov [rdi], rax
	mov rax, [rsp]
	mov rax, [rax]
	mov [rdi+0x08], rax
	add rsp, 0x10
	ret
comptime arena 1.Arena.alloc(u8):
	sub rsp, 0x10
	mov [rsp], rsi
	mov [rsp+0x08], rdx
	xor rdx, rdx
	mov rax, [rsp]
	mov rcx, [rsp+0x08]
	mov rax, [rax]
	mov [rdi], rax
	mov [rdi+0x08], rcx
	mov rcx, [rsp]
	mov rax, [rcx]
	add rdx, rax
	and rdx, 0x00
	add rax, rdx
	mov [rcx], rax
	add rsp, 0x10
	ret
comptime arena 1.CheckPoint.restore:
	sub rsp, 0x10
	mov [rsp], rdi
	mov rax, [rsp]
	mov rcx, [rax+0x08]
	mov rax, [rax]
	mov [rax], rcx
	add rsp, 0x10
	ret
main:
	mov rax, 0x0A
	ret