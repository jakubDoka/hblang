defer 1.main.ret_defer:
	sub rsp, 0x10
	mov [rsp], rdi
	mov rcx, [rsp]
	mov rax, [rcx]
	inc rax
	mov [rcx], rax
	add rsp, 0x10
	ret
main:
	sub rsp, 0x18
	mov qword ptr [rsp], 0x00
	mov rax, [rsp]
	mov rcx, rax
	inc rcx
	cmp rax, 0x01
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov [rsp], rcx
	mov rax, 0x01
	jmp :1
0:	mov [rsp], rcx
	mov rax, [rsp]
	cmp rax, 0x01
	setnz al
	movzx rax, al
	test al, al
	jz :2
	mov rax, 0x02
1:	jmp :8
2:	mov rsi, 0x03
	mov rdx, 0x04
b:	mov rcx, [rsp]
	mov rax, rcx
	inc rax
	cmp rcx, rsi
	jnz :4
	mov [rsp], rax
	jmp :5
4:	cmp rcx, rdx
	jnz :6
	mov [rsp], rax
	mov rax, [rsp]
	cmp rax, 0x05
	setnz al
	movzx rax, al
	test al, al
	jz :7
	mov rax, 0x03
	jmp :8
7:	mov qword ptr [rsp+0x08], 0x00
	lea rdi, [rsp+0x08]
	call :defer 1.main.ret_defer
	mov rax, [rsp+0x08]
	cmp rax, 0x01
	setnz al
	movzx rax, al
	test al, al
	jz :8
	mov rax, 0x04
	jmp :12
8:	xor rax, rax
	jmp :12
6:	mov [rsp], rax
5:	jmp :11
c:	add rsp, 0x18
	ret
c:	jmp :12
8:	jmp :12