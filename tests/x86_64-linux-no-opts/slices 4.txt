slices 4.equals:
	sub rsp, 0x30
	mov [rsp], rdi
	mov [rsp+0x08], rsi
	mov [rsp+0x10], rdx
	mov [rsp+0x18], rcx
	mov rsi, [rsp+0x18]
	mov rdx, [rsp+0x08]
	mov r8, 0x00
	mov rcx, [rsp]
	mov rax, [rsp+0x10]
	cmp rdx, rsi
	jz :0
	mov rax, r8
	jmp :1
0:	mov rdi, 0x01
	cmp rcx, rax
	jnz :2
	mov rax, rdi
1:	jmp :5
2:	mov qword ptr [rsp+0x20], 0x00
6:	mov rax, [rsp+0x20]
	mov rsi, [rsp+0x08]
	mov rdx, [rsp]
	mov rcx, [rsp+0x10]
	add rdx, rax
	add rcx, rax
	cmp rax, rsi
	jnz :4
	mov rax, rdi
	jmp :5
4:	mov dl, [rdx]
	mov cl, [rcx]
	cmp dl, cl
	jz :5
	mov rax, r8
5:	add rsp, 0x30
	ret
5:	add rax, 0x01
	mov [rsp+0x20], rax
	jmp :6
main:
	sub rsp, 0x28
	lea rax, [0x0000000000000007]
	mov [rsp], rax
	mov qword ptr [rsp+0x08], 0x03
	lea rax, [rsp+0x20]
	mov byte ptr [rsp+0x20], 0x61
	mov byte ptr [rsp+0x21], 0x62
	mov byte ptr [rsp+0x22], 0x63
	mov [rsp+0x10], rax
	mov qword ptr [rsp+0x18], 0x03
	mov rax, [rsp]
	mov rcx, rax
	mov rax, [rsp+0x08]
	mov rdi, rcx
	mov rdx, rcx
	mov rsi, rax
	mov rcx, rax
	call :slices 4.equals
	xor al, 0x01
	mov rsi, [rsp+0x18]
	mov rdx, [rsp]
	mov rcx, [rsp+0x08]
	mov rdi, [rsp+0x10]
	test al, al
	jz :0
	jmp :1
0:	call :slices 4.equals
	xor al, 0x01
	test al, al
	jz :2
1:	mov rax, 0x01
	jmp :3
2:	mov rax, 0x00
3:	add rsp, 0x28
	ret