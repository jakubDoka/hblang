if statements 4 (short circuit).effectfull:
	sub rsp, 0x10
	mov [rsp], rdi
	mov rax, 0x01
	mov rcx, [rsp]
	mov [0x0000000000000007], rcx
	add rsp, 0x10
	ret
main:
	sub rsp, 0x08
	mov byte ptr [rsp+0x01], 0x01
	mov al, [rsp+0x01]
	test al, al
	jz :0
	mov byte ptr [rsp+0x02], 0x01
	jmp :1
0:	mov rdi, 0x01
	call :if statements 4 (short circuit).effectfull
	mov [rsp+0x02], al
1:	mov byte ptr [rsp+0x04], 0x00
	mov al, [rsp+0x04]
	test al, al
	jz :2
	mov rdi, 0x02
	call :if statements 4 (short circuit).effectfull
	mov [rsp+0x03], al
	jmp :3
2:	mov byte ptr [rsp+0x03], 0x00
3:	mov al, [rsp+0x03]
	test al, al
	jz :5
	jmp :5
5:	mov byte ptr [rsp+0x05], 0x00
	mov al, [rsp+0x05]
	test al, al
	jz :5
	mov rdi, 0x04
	call :if statements 4 (short circuit).effectfull
	mov [rsp+0x06], al
	jmp :6
5:	mov byte ptr [rsp+0x06], 0x00
6:	mov al, [rsp+0x06]
	mov [rsp+0x05], al
	mov byte ptr [rsp+0x05], 0x01
	mov al, [rsp+0x05]
	test al, al
	jz :7
	mov byte ptr [rsp], 0x01
	jmp :8
7:	mov rdi, 0x05
	call :if statements 4 (short circuit).effectfull
	mov [rsp], al
8:	mov al, [rsp]
	mov [rsp+0x05], al
	mov rax, [0x0000000000000007]
	add rsp, 0x08
	ret