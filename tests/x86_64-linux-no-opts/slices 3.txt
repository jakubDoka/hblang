slices 3.reverse:
	push rbx
	sub rsp, 0x30
	mov [rsp], rsi
	mov [rsp+0x08], rdx
	mov rcx, [rsp+0x08]
	cmp rcx, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov rax, [rsp]
	mov [rdi], rax
	mov rax, [rsp+0x08]
	mov [rdi+0x08], rax
	jmp :1
0:	mov rax, rcx
	sub rax, 0x01
	mov [rsp+0x10], rax
	mov rax, 0x00
	mov [rsp+0x18], rax
	mov byte ptr [rsp+0x20], 0x00
3:	mov rax, [rsp+0x10]
	mov rcx, [rsp+0x18]
	cmp rcx, rax
	jnb :2
	mov rax, [rsp]
	add rax, rcx
	mov al, [rax]
	mov [rsp+0x20], al
	mov rbx, [rsp]
	mov rdx, [rsp+0x18]
	mov rcx, [rsp+0x10]
	mov rax, rbx
	add rax, rcx
	mov rcx, rbx
	add rcx, rdx
	mov al, [rax]
	mov [rcx], al
	mov rax, [rsp]
	mov rdx, [rsp+0x10]
	mov cl, [rsp+0x20]
	add rax, rdx
	mov [rax], cl
	mov rax, [rsp+0x18]
	add rax, 0x01
	mov [rsp+0x18], rax
	mov rax, [rsp+0x10]
	sub rax, 0x01
	mov [rsp+0x10], rax
	jmp :3
2:	mov rax, [rsp]
	mov [rdi], rax
	mov rax, [rsp+0x08]
	mov [rdi+0x08], rax
1:	add rsp, 0x30
	pop rbx
	ret
main:
	push rbx
	sub rsp, 0x48
	lea rbx, [rsp+0x40]
	mov byte ptr [rsp+0x40], 0x01
	mov byte ptr [rsp+0x41], 0x02
	mov byte ptr [rsp+0x42], 0x03
	mov rax, 0x01
	mov [rsp+0x10], rax
	mov rax, 0x00
	mov [rsp+0x18], rax
	lea rdi, [rsp]
	mov rsi, [rsp+0x10]
	mov rdx, [rsp+0x18]
	call :slices 3.reverse
	mov [rsp+0x30], rbx
	mov rax, 0x03
	mov [rsp+0x38], rax
	lea rdi, [rsp+0x20]
	mov rsi, [rsp+0x30]
	mov rdx, [rsp+0x38]
	call :slices 3.reverse
	mov al, [rsp+0x40]
	mov dl, [rsp+0x41]
	mov cl, [rsp+0x42]
	movzx rax, al
	movzx rdx, dl
	movzx rcx, cl
	sub rax, rdx
	sub rax, rcx
	add rsp, 0x48
	pop rbx
	ret