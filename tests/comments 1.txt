======== SOURCE ========
fn(): uint {
	// comment is a statement
	foo(/* comment is an exprression /* if you are crazy */ */)
	return 0
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: 1, idepth: 0, %1, %2 [, %5]
%7 = CInt: 0 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %8, %6]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: 1, idepth: 0, %1, %2 [, %5]
%7 = CInt: 0 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Call: id: 1, idepth: 2, %2
%5 = CallEnd: idepth: 3, %4
  %6 = Mem
  %7 = CInt: 0
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1 }

======== SOURCE ========
fn(comment: void): void return /* comment evaluates to void */
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Return: idepth: 0, %1, %2 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Return: idepth: 0, %1, %2 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %4 = Return: idepth: 0, %2

======== REGISTER SELECTION ========
{ 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
        jal $31, $0, :foo
       li64 $32, 0
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
foo:
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
     jal $31=0, $0=0, 45
    jala $0=0, $31=31, 0
    li64 $32=0, 0
      cp $1=0, $32=0
  addi64 $254=10224, $254, 16
      ld $31=31, $254=10240, -16, 16
      tx