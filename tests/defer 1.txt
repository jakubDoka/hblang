main:
         st $31, $254, -80, 80
     addi64 $254, $254, -88
       li64 $32, 0
       li64 $33, 1
       cmpu $34, $32, $33
      cmpui $34, $34, 0
        not $34, $34
       andi $34, $34, 255
        jeq $34, $0, :0
         cp $32, $33
        jmp :1
0:   addi64 $34, $32, 1
       cmpu $35, $34, $33
      cmpui $35, $35, 0
       andi $35, $35, 255
        jeq $35, $0, :2
       li64 $32, 2
1:      jmp :3
2:     li64 $35, 3
       li64 $36, 4
       li64 $37, 5
     addi64 $38, $254, 0
b:     cmpu $39, $34, $35
      cmpui $39, $39, 0
        not $39, $39
     addi64 $40, $34, 1
       andi $39, $39, 255
        jeq $39, $0, :4
         cp $34, $40
        jmp :5
4:     cmpu $34, $34, $36
      cmpui $34, $34, 0
        not $34, $34
       andi $34, $34, 255
        jeq $34, $0, :6
       cmpu $34, $40, $37
      cmpui $34, $34, 0
       andi $34, $34, 255
        jeq $34, $0, :7
         cp $32, $35
3:      jmp :8
7:       st $32, $254, 0, 8
         cp $1, $38
        jal $31, $0, :main.ret_defer
         ld $34, $254, 0, 8
       cmpu $33, $34, $33
      cmpui $33, $33, 0
       andi $33, $33, 255
        jeq $33, $0, :a
         cp $32, $36
8:      jmp :a
a:       cp $1, $32
     addi64 $254, $254, 88
         ld $31, $254, -80, 80
         tx
6:       cp $34, $40
5:      jmp :b
main.ret_defer:
         cp $13, $1
         ld $14, $13, 0, 8
     addi64 $14, $14, 1
         st $14, $13, 0, 8
       jala $0, $31, 0