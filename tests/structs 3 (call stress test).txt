======== SOURCE ========
fn(): uint {
	pr := return_pair()
	tpl := return_triple()

	if take_pair(pr) != take_triple(tpl) return 1

	return 0
}
======== UNSCHEDULED SON ========
%11 = CInt: 8 [, %12]
%9 = Ret: 1, %6 [, %13]
%8 = Ret: 0, %6 [, %10]
%7 = Mem: %6 [, %10]
%10 = Store: %6, %7, %4, %8 [, %13]
%1 = Entry: idepth: 0, %0 [, %5]
%12 = BinOp: iadd, %4, %11 [, %13, %19]
%13 = Store: %6, %10, %12, %9 [, %15]
%6 = CallEnd: idepth: 0, %5 [, %15, %7, %8, %9, %10, %13]
%4 = Local: 16, %2 [, %10, %12, %18]
%5 = Call: ret_count: 2, id: 1, idepth: 0, %1, %2 [, %6]
%0 = Start: idepth: 0 [, %1, %2]
%19 = Load: %17, %12 [, %20]
%18 = Load: %17, %4 [, %20]
%17 = Mem: %16 [, %20, %18, %19]
%16 = CallEnd: idepth: 0, %15 [, %20, %17]
%15 = Call: ret_count: 0, id: 2, idepth: 0, %6, %13, %14 [, %16]
%2 = Mem: %0 [, %5, %4, %14]
%20 = Call: ret_count: 1, id: 3, idepth: 0, %16, %17, %18, %19 [, %21]
%23 = Ret: 0, %21 [, %28]
%14 = Local: 24, %2 [, %15, %24]
%22 = Mem: %21 [, %24]
%21 = CallEnd: idepth: 0, %20 [, %24, %22, %23]
%28 = BinOp: ne, %23, %27 [, %30]
%27 = Ret: 0, %25 [, %28]
%24 = Call: ret_count: 1, id: 4, idepth: 0, %21, %22, %14 [, %25]
%30 = If: idepth: 0, %25, %28 [, %31, %34]
%25 = CallEnd: idepth: 0, %24 [, %30, %26, %27]
%34 = Then: idepth: 0, %30 [, %37]
%31 = Then: idepth: 0, %30 [, %36]
%35 = CInt: 0 [, %40]
%32 = CInt: 1 [, %40]
%26 = Mem: %25 [, %39, %39]
%37 = Jmp: idepth: 0, %34 [, %38]
%36 = Jmp: idepth: 0, %31 [, %38]
%40 = Phi: %38, %32, %35 [, %33]
%39 = Phi: %38, %26, %26 [, %33]
%38 = Region: idepth: 0, %36, %37 [, %33, %39, %40]
%33 = Return: idepth: 0, %38, %39, %40 []

======== OPTIMIZED SON ========
%9 = Ret: 1, %6 [, %42]
%8 = Ret: 0, %6 [, %10]
%7 = Mem: %6 [, %10]
%10 = Store: %6, %7, %4, %8 [, %42]
%1 = Entry: idepth: 0, %0 [, %5]
%42 = St: offset: 8, %6, %10, %4, %9 [, %15]
%6 = CallEnd: idepth: 0, %5 [, %7, %8, %9, %10, %42, %15]
%4 = Local: 16, %2 [, %10, %43, %18, %42]
%5 = Call: ret_count: 2, id: 1, idepth: 0, %1, %2 [, %6]
%0 = Start: idepth: 0 [, %1, %2]
%43 = Ld: offset: 8, %17, %4 [, %20]
%18 = Load: %17, %4 [, %20]
%17 = Mem: %16 [, %20, %18, %43]
%16 = CallEnd: idepth: 0, %15 [, %17, %20]
%15 = Call: ret_count: 0, id: 2, idepth: 0, %6, %42, %14 [, %16]
%2 = Mem: %0 [, %5, %4, %14]
%20 = Call: ret_count: 1, id: 3, idepth: 0, %16, %17, %18, %43 [, %21]
%23 = Ret: 0, %21 [, %44]
%14 = Local: 24, %2 [, %15, %24]
%22 = Mem: %21 [, %24]
%21 = CallEnd: idepth: 0, %20 [, %22, %23, %24]
%44 = IfOp: swapped: false, op: jeq, idepth: 0, %25, %23, %27 [, %31, %34]
%27 = Ret: 0, %25 [, %44]
%24 = Call: ret_count: 1, id: 4, idepth: 0, %21, %22, %14 [, %25]
%34 = Then: idepth: 0, %44 [, %37]
%31 = Then: idepth: 0, %44 [, %36]
%35 = CInt: 0 [, %40]
%32 = CInt: 1 [, %40]
%25 = CallEnd: idepth: 0, %24 [, %26, %27, %44]
%37 = Jmp: idepth: 0, %34 [, %38]
%36 = Jmp: idepth: 0, %31 [, %38]
%40 = Phi: %38, %32, %35 [, %33]
%26 = Mem: %25 [, %33]
%38 = Region: idepth: 0, %36, %37 [, %40, %33]
%33 = Return: idepth: 0, %38, %26, %40 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = Call: ret_count: 2, id: 1, idepth: 2, %2
%6 = CallEnd: idepth: 3, %5
  %7 = Mem
  %8 = Ret: 0
  %9 = Ret: 1
  %4 = Local: 16, %2
  %10 = Store: %7, %4, %8
  %42 = St: offset: 8, %10, %4, %9
  %14 = Local: 24, %2
  %15 = Call: ret_count: 0, id: 2, idepth: 4, %42, %14
%16 = CallEnd: idepth: 5, %15
  %17 = Mem
  %18 = Load: %17, %4
  %43 = Ld: offset: 8, %17, %4
  %20 = Call: ret_count: 1, id: 3, idepth: 6, %17, %18, %43, %43, %18
%21 = CallEnd: idepth: 7, %20
  %22 = Mem
  %23 = Ret: 0
  %24 = Call: ret_count: 1, id: 4, idepth: 8, %22, %14
%25 = CallEnd: idepth: 9, %24
  %26 = Mem
  %27 = Ret: 0
  %44 = IfOp: swapped: false, op: jeq, idepth: 10, %23, %27
%31 = Then: idepth: 11, %44
  %32 = CInt: 1
  %45 = MachMove: %32
  %36 = Jmp: idepth: 12
%34 = Then: idepth: 11, %44
  %35 = CInt: 0
  %46 = MachMove: %35
  %37 = Jmp: idepth: 12
%38 = Region: idepth: 0, %36, %37
  %47 = Phi: %45, %46
  %33 = Return: idepth: 0, %26, %47

======== SOURCE ========
fn(triple: Triple): uint {
	return triple.a + triple.b + triple.c
}
======== UNSCHEDULED SON ========
%10 = CInt: 16 [, %11]
%5 = CInt: 8 [, %6]
%11 = BinOp: iadd, %4, %10 [, %12]
%6 = BinOp: iadd, %4, %5 [, %8]
%4 = Arg: 0, %0 [, %11, %6, %7]
%13 = UnOp: uext, %12 [, %14]
%9 = BinOp: iadd, %7, %8 [, %14]
%12 = Load: %2, %11 [, %13]
%8 = Load: %2, %6 [, %9]
%7 = Load: %2, %4 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %4]
%14 = BinOp: iadd, %9, %13 [, %15]
%2 = Mem: %0 [, %15, %7, %8, %12]
%1 = Entry: idepth: 0, %0 [, %15]
%15 = Return: idepth: 0, %1, %2, %14 []

======== OPTIMIZED SON ========
%4 = Arg: 0, %0 [, %18, %19, %7]
%13 = UnOp: uext, %18 [, %14]
%9 = BinOp: iadd, %7, %19 [, %14]
%18 = Ld: offset: 16, %2, %4 [, %13]
%19 = Ld: offset: 8, %2, %4 [, %9]
%7 = Load: %2, %4 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %4]
%14 = BinOp: iadd, %9, %13 [, %15]
%2 = Mem: %0 [, %15, %7, %19, %18]
%1 = Entry: idepth: 0, %0 [, %15]
%15 = Return: idepth: 0, %1, %2, %14 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Arg: 0
  %7 = Load: %2, %4
  %19 = Ld: offset: 8, %2, %4
  %18 = Ld: offset: 16, %2, %4
  %9 = BinOp: iadd, %7, %19
  %13 = UnOp: uext, %18
  %14 = BinOp: iadd, %9, %13
  %15 = Return: idepth: 0, %2, %14

======== SOURCE ========
fn(pair: Pair): uint {
	return pair.a + pair.b
}
======== UNSCHEDULED SON ========
%8 = CInt: 8 [, %9]
%4 = Local: 16, %2 [, %6, %9, %11]
%5 = Arg: 0, %0 [, %6]
%2 = Mem: %0 [, %6, %4]
%13 = UnOp: uext, %11 [, %14]
%12 = Load: %10, %9 [, %14]
%11 = Load: %10, %4 [, %13]
%7 = Arg: 1, %0 [, %10]
%9 = BinOp: iadd, %4, %8 [, %10, %12]
%6 = Store: %1, %2, %4, %5 [, %10]
%0 = Start: idepth: 0 [, %1, %2, %5, %7]
%14 = BinOp: iadd, %13, %12 [, %15]
%10 = Store: %1, %6, %9, %7 [, %15, %11, %12]
%1 = Entry: idepth: 0, %0 [, %15, %6, %10]
%15 = Return: idepth: 0, %1, %10, %14 []

======== OPTIMIZED SON ========
%5 = Arg: 0, %0 [, %6]
%2 = Mem: %0 [, %6, %4]
%13 = UnOp: uext, %11 [, %14]
%17 = Ld: offset: 8, %18, %4 [, %14]
%11 = Load: %18, %4 [, %13]
%7 = Arg: 1, %0 [, %18]
%4 = Local: 16, %2 [, %6, %18, %11, %17]
%6 = Store: %1, %2, %4, %5 [, %18]
%0 = Start: idepth: 0 [, %1, %2, %5, %7]
%14 = BinOp: iadd, %13, %17 [, %15]
%18 = St: offset: 8, %1, %6, %4, %7 [, %15, %11, %17]
%1 = Entry: idepth: 0, %0 [, %6, %18, %15]
%15 = Return: idepth: 0, %1, %18, %14 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = Arg: 0
  %7 = Arg: 1
  %4 = Local: 16, %2
  %6 = Store: %2, %4, %5
  %18 = St: offset: 8, %6, %4, %7
  %11 = Load: %18, %4
  %17 = Ld: offset: 8, %18, %4
  %13 = UnOp: uext, %11
  %14 = BinOp: iadd, %13, %17
  %15 = Return: idepth: 0, %18, %14

======== SOURCE ========
fn(): Triple {
	return .{a: 1, b: 2, c: 3}
}
======== UNSCHEDULED SON ========
%7 = CInt: 8 [, %8]
%11 = CInt: 16 [, %12]
%9 = CInt: 2 [, %10]
%8 = BinOp: iadd, %4, %7 [, %10]
%5 = CInt: 1 [, %6]
%4 = Arg: 0, %0 [, %6, %8, %12]
%2 = Mem: %0 [, %6]
%13 = CInt: 3 [, %14]
%12 = BinOp: iadd, %4, %11 [, %14]
%10 = Store: %1, %6, %8, %9 [, %14]
%6 = Store: %1, %2, %4, %5 [, %10]
%0 = Start: idepth: 0 [, %1, %2, %4]
%14 = Store: %1, %10, %12, %13 [, %15]
%1 = Entry: idepth: 0, %0 [, %15, %6, %10, %14]
%15 = Return: idepth: 0, %1, %14 []

======== OPTIMIZED SON ========
%9 = CInt: 2 [, %18]
%5 = CInt: 1 [, %6]
%2 = Mem: %0 [, %6]
%13 = CInt: 3 [, %19]
%4 = Arg: 0, %0 [, %6, %18, %19]
%18 = St: offset: 8, %1, %6, %4, %9 [, %19]
%6 = Store: %1, %2, %4, %5 [, %18]
%0 = Start: idepth: 0 [, %1, %2, %4]
%19 = St: offset: 16, %1, %18, %4, %13 [, %15]
%1 = Entry: idepth: 0, %0 [, %6, %18, %19, %15]
%15 = Return: idepth: 0, %1, %19 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Arg: 0
  %5 = CInt: 1
  %9 = CInt: 2
  %13 = CInt: 3
  %6 = Store: %2, %4, %5
  %18 = St: offset: 8, %6, %4, %9
  %19 = St: offset: 16, %18, %4, %13
  %15 = Return: idepth: 0, %19

======== SOURCE ========
fn(): Pair {
	return .{a: 1, b: 5}
}
======== UNSCHEDULED SON ========
%7 = CInt: 8 [, %8]
%5 = CInt: 1 [, %6]
%2 = Mem: %0 [, %6, %4]
%4 = Local: 16, %2 [, %6, %8, %11]
%9 = CInt: 5 [, %10]
%8 = BinOp: iadd, %4, %7 [, %10, %12]
%6 = Store: %1, %2, %4, %5 [, %10]
%0 = Start: idepth: 0 [, %1, %2]
%12 = Load: %10, %8 [, %13]
%11 = Load: %10, %4 [, %13]
%10 = Store: %1, %6, %8, %9 [, %13, %11, %12]
%1 = Entry: idepth: 0, %0 [, %13, %6, %10]
%13 = Return: idepth: 0, %1, %10, %11, %12 []

======== OPTIMIZED SON ========
%5 = CInt: 1 [, %6]
%2 = Mem: %0 [, %6, %4]
%9 = CInt: 5 [, %16]
%4 = Local: 16, %2 [, %6, %16, %11, %15]
%6 = Store: %1, %2, %4, %5 [, %16]
%0 = Start: idepth: 0 [, %1, %2]
%15 = Ld: offset: 8, %16, %4 [, %13]
%11 = Load: %16, %4 [, %13]
%16 = St: offset: 8, %1, %6, %4, %9 [, %13, %11, %15]
%1 = Entry: idepth: 0, %0 [, %6, %16, %13]
%13 = Return: idepth: 0, %1, %16, %11, %15 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = CInt: 1
  %9 = CInt: 5
  %4 = Local: 16, %2
  %6 = Store: %2, %4, %5
  %16 = St: offset: 8, %6, %4, %9
  %11 = Load: %16, %4
  %15 = Ld: offset: 8, %16, %4
  %13 = Return: idepth: 0, %16, %11, %15

======== CODEGEN ========
main:
         st $31, $254, -32, 32
     addi64 $254, $254, -72
        jal $31, $0, :return_pair
         cp $32, $1
         cp $33, $2
     addi64 $34, $254, 0
         st $32, $254, 0, 1
         st $33, $254, 8, 8
     addi64 $32, $254, 16
         cp $1, $32
        jal $31, $0, :return_triple
         ld $33, $254, 0, 1
         ld $34, $254, 8, 8
         cp $2, $33
         cp $3, $34
        jal $31, $0, :take_pair
         cp $33, $1
         cp $2, $32
        jal $31, $0, :take_triple
         cp $32, $1
        jeq $33, $32, :4
       li64 $32, 1
        jmp :5
4:     li64 $32, 0
5:       cp $1, $32
     addi64 $254, $254, 72
         ld $31, $254, -32, 32
         tx
take_triple:
         cp $13, $2
         ld $14, $13, 0, 8
         ld $15, $13, 8, 8
         ld $13, $13, 16, 1
      add64 $14, $14, $15
       andi $13, $13, 255
      add64 $13, $14, $13
         cp $1, $13
       jala $0, $31, 0
take_pair:
     addi64 $254, $254, -16
         cp $13, $2
         cp $14, $3
     addi64 $15, $254, 0
         st $13, $254, 0, 1
         st $14, $254, 8, 8
         ld $13, $254, 0, 1
         ld $14, $254, 8, 8
       andi $13, $13, 255
      add64 $13, $13, $14
         cp $1, $13
     addi64 $254, $254, 16
       jala $0, $31, 0
return_triple:
         cp $13, $1
       li64 $14, 1
       li64 $15, 2
       li64 $16, 3
         st $14, $13, 0, 8
         st $15, $13, 8, 8
         st $16, $13, 16, 1
       jala $0, $31, 0
return_pair:
     addi64 $254, $254, -16
       li64 $13, 1
       li64 $14, 5
     addi64 $15, $254, 0
         st $13, $254, 0, 1
         st $14, $254, 8, 8
         ld $13, $254, 0, 1
         ld $14, $254, 8, 8
         cp $1, $13
         cp $2, $14
     addi64 $254, $254, 16
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -32, 32
  addi64 $254=10240, $254, -72
     jal $31=0, $0=0, 462
  addi64 $254=10168, $254, -16
    li64 $13=0, 1
    li64 $14=0, 5
  addi64 $15=0, $254=10152, 0
      st $13=1, $254=10152, 0, 1
      st $14=5, $254=10152, 8, 8
      ld $13=1, $254=10152, 0, 1
      ld $14=5, $254=10152, 8, 8
      cp $1=0, $13=1
      cp $2=0, $14=5
  addi64 $254=10152, $254, 16
    jala $0=0, $31=31, 0
      cp $32=0, $1=1
      cp $33=0, $2=5
  addi64 $34=0, $254=10168, 0
      st $32=1, $254=10168, 0, 1
      st $33=5, $254=10168, 8, 8
  addi64 $32=1, $254=10168, 16
      cp $1=1, $32=10184
     jal $31=31, $0=0, 315
      cp $13=1, $1=10184
    li64 $14=5, 1
    li64 $15=10152, 2
    li64 $16=0, 3
      st $14=1, $13=10184, 0, 8
      st $15=2, $13=10184, 8, 8
      st $16=3, $13=10184, 16, 1
    jala $0=0, $31=95, 0
      ld $33=5, $254=10168, 0, 1
      ld $34=10168, $254=10168, 8, 8
      cp $2=5, $33=1
      cp $3=0, $34=5
     jal $31=95, $0=0, 156
  addi64 $254=10168, $254, -16
      cp $13=10184, $2=1
      cp $14=1, $3=5
  addi64 $15=2, $254=10152, 0
      st $13=1, $254=10152, 0, 1
      st $14=5, $254=10152, 8, 8
      ld $13=1, $254=10152, 0, 1
      ld $14=5, $254=10152, 8, 8
    andi $13=1, $13, 255
   add64 $13=1, $13, $14=5
      cp $1=10184, $13=6
  addi64 $254=10152, $254, 16
    jala $0=0, $31=134, 0
      cp $33=1, $1=6
      cp $2=1, $32=10184
     jal $31=134, $0=0, 68
      cp $13=6, $2=10184
      ld $14=5, $13=10184, 0, 8
      ld $15=10152, $13=10184, 8, 8
      ld $13=10184, $13, 16, 1
   add64 $14=1, $14, $15=2
    andi $13=9987, $13, 255
   add64 $13=3, $14=3, $13
      cp $1=6, $13=6
    jala $0=0, $31=147, 0
      cp $32=10184, $1=6
     jeq $33=6, $32=6, 20
    li64 $32=6, 0
      cp $1=6, $32=0
  addi64 $254=10168, $254, 72
      ld $31=147, $254=10240, -32, 32
      tx