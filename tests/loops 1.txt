======== SOURCE ========
fn(): uint {
	return fib(10)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%4 = CInt: 10 [, %5]
%2 = Mem: %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5]
%5 = Call: id: 1, idepth: 0, %1, %2, %4 [, %6]
%8 = Ret: 0, %6 [, %9]
%7 = Mem: %6 [, %9]
%6 = CallEnd: idepth: 0, %5 [, %9, %7, %8]
%9 = Return: idepth: 0, %6, %7, %8 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%4 = CInt: 10 [, %5]
%2 = Mem: %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5]
%5 = Call: id: 1, idepth: 0, %1, %2, %4 [, %6]
%8 = Ret: 0, %6 [, %9]
%7 = Mem: %6 [, %9]
%6 = CallEnd: idepth: 0, %5 [, %7, %8, %9]
%9 = Return: idepth: 0, %6, %7, %8 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %4 = CInt: 10
  %5 = Call: id: 1, idepth: 0, %2, %4
%6 = CallEnd: idepth: 0, %5
  %7 = Mem
  %8 = Ret: 0
  %9 = Return: idepth: 0, %7, %8

======== SOURCE ========
fn(n: uint): uint {
	b := 1
	a := 0
	loop {
		if n == 0 break
		c := a + b
		a = b
		b = c
		n -= 1
		continue
	}
	return a
}
======== UNSCHEDULED SON ========
%5 = Arg: 0, %0 [, %6]
%33 = Load: %32, %24 [, %34]
%2 = Mem: %0 [, %6, %4, %7, %10, %24]
%8 = CInt: 1 [, %9, %36]
%6 = Store: %1, %2, %4, %5 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %5]
%35 = Load: %34, %16 [, %36]
%4 = Local: 8, %2 [, %6, %16]
%7 = Local: 8, %2 [, %9, %26]
%31 = Load: %30, %26 [, %32]
%32 = Store: %23, %30, %25, %31 [, %34, %33]
%24 = Local: 8, %2 [, %30, %33]
%36 = BinOp: isub, %35, %8 [, %37]
%34 = Store: %23, %32, %26, %33 [, %37, %35]
%11 = CInt: 0 [, %12, %19]
%10 = Local: 8, %2 [, %12, %25]
%9 = Store: %1, %6, %7, %8 [, %12]
%1 = Entry: idepth: 0, %0 [, %13, %6, %9, %12]
%16 = Phi: %14, %4, %16 [, %37, %35, %18, %16]
%26 = Phi: %14, %7, %26 [, %34, %26, %28, %31]
%38 = Jmp: idepth: 0, %23 [, %14]
%13 = Jmp: idepth: 0, %1 [, %14]
%23 = Then: idepth: 0, %21 [, %38, %30, %32, %34, %37]
%19 = BinOp: eq, %18, %11 [, %21]
%29 = BinOp: iadd, %27, %28 [, %30]
%25 = Phi: %14, %10, %25 [, %32, %25, %27]
%30 = Store: %23, %17, %24, %29 [, %32, %31]
%18 = Load: %17, %16 [, %19]
%28 = Load: %17, %26 [, %29]
%37 = Store: %23, %34, %16, %36 [, %17]
%12 = Store: %1, %9, %10, %11 [, %17]
%14 = Loop: idepth: 0, %13, %38 [, %21, %26, %16, %17, %25]
%21 = If: idepth: 0, %14, %19 [, %22, %23]
%27 = Load: %17, %25 [, %29, %39]
%17 = Phi: %14, %12, %37 [, %28, %39, %18, %30, %27]
%22 = Then: idepth: 0, %21 [, %39]
%39 = Return: idepth: 0, %22, %17, %27 []

======== OPTIMIZED SON ========
%43 = ImmBinOp: imm: -1, op: addi64, %41 [, %41]
%8 = CInt: 1 [, %40]
%38 = Jmp: idepth: 0, %23 [, %14]
%13 = Jmp: idepth: 0, %1 [, %14]
%5 = Arg: 0, %0 [, %41]
%1 = Entry: idepth: 0, %0 [, %13]
%23 = Then: idepth: 0, %44 [, %38]
%41 = Phi: %14, %5, %43 [, %44, %43]
%29 = BinOp: iadd, %42, %40 [, %40]
%40 = Phi: %14, %8, %29 [, %29, %42]
%11 = CInt: 0 [, %42, %44]
%14 = Loop: idepth: 0, %13, %38 [, %42, %44, %40, %41]
%0 = Start: idepth: 0 [, %1, %2, %5]
%44 = IfOp: swapped: false, op: jne, idepth: 0, %14, %41, %11 [, %22, %23]
%42 = Phi: %14, %11, %40 [, %29, %39]
%2 = Mem: %0 [, %39]
%22 = Then: idepth: 0, %44 [, %39]
%39 = Return: idepth: 0, %22, %2, %42 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %11 = CInt: 0
  %8 = CInt: 1
  %5 = Arg: 0
  %45 = MachMove: %11
  %48 = MachMove: %8
  %51 = MachMove: %5
  %13 = Jmp: idepth: 2
%14 = Loop: idepth: 3, %13, %38
  %47 = Phi: %45, %46
  %50 = Phi: %48, %49
  %53 = Phi: %51, %52
  %44 = IfOp: swapped: false, op: jne, idepth: 4, %53, %11
%22 = Then: idepth: 0, %44
  %39 = Return: idepth: 0, %2, %47
%23 = Then: idepth: 5, %44
  %29 = BinOp: iadd, %47, %50
  %43 = ImmBinOp: imm: -1, op: addi64, %53
  %46 = MachMove: %50
  %49 = MachMove: %29
  %52 = MachMove: %43
  %38 = Jmp: idepth: 6

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 10
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
         cp $15, $2
       li64 $13, 0
       li64 $14, 1
         cp $16, $15
         cp $15, $14
         cp $14, $13
2:      jne $16, $13, :1
         cp $1, $14
       jala $0, $31, 0
1:    add64 $14, $14, $15
     addi64 $16, $16, -1
        swa $14, $15
        jmp :2

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 10
      cp $2=0, $32=10
     jal $31=0, $0=0, 38
      cp $15=0, $2=10
    li64 $13=0, 0
    li64 $14=0, 1
      cp $16=0, $15=10
      cp $15=10, $14=1
      cp $14=1, $13=0
     jne $16=10, $13=0, 19
   add64 $14=0, $14, $15=1
  addi64 $16=10, $16, -1
     swa $14=1, $15=1
     jmp -37
     jne $16=9, $13=0, 19
   add64 $14=1, $14, $15=1
  addi64 $16=9, $16, -1
     swa $14=2, $15=1
     jmp -37
     jne $16=8, $13=0, 19
   add64 $14=1, $14, $15=2
  addi64 $16=8, $16, -1
     swa $14=3, $15=2
     jmp -37
     jne $16=7, $13=0, 19
   add64 $14=2, $14, $15=3
  addi64 $16=7, $16, -1
     swa $14=5, $15=3
     jmp -37
     jne $16=6, $13=0, 19
   add64 $14=3, $14, $15=5
  addi64 $16=6, $16, -1
     swa $14=8, $15=5
     jmp -37
     jne $16=5, $13=0, 19
   add64 $14=5, $14, $15=8
  addi64 $16=5, $16, -1
     swa $14=13, $15=8
     jmp -37
     jne $16=4, $13=0, 19
   add64 $14=8, $14, $15=13
  addi64 $16=4, $16, -1
     swa $14=21, $15=13
     jmp -37
     jne $16=3, $13=0, 19
   add64 $14=13, $14, $15=21
  addi64 $16=3, $16, -1
     swa $14=34, $15=21
     jmp -37
     jne $16=2, $13=0, 19
   add64 $14=21, $14, $15=34
  addi64 $16=2, $16, -1
     swa $14=55, $15=34
     jmp -37
     jne $16=1, $13=0, 19
   add64 $14=34, $14, $15=55
  addi64 $16=1, $16, -1
     swa $14=89, $15=55
     jmp -37
     jne $16=0, $13=0, 19
      cp $1=0, $14=55
    jala $0=0, $31=44, 0
      cp $32=10, $1=55
      cp $1=55, $32=55
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx