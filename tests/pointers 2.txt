======== SOURCE ========
fn(): uint {
    a := 1
    b := 2

    c := &a
    d := &b

    swap(c, d)

    return a - b
}
======== UNSCHEDULED SON ========
%6 = CInt: 2 [, %8]
%3 = CInt: 1 [, %5]
%12 = Load: %11, %7 []
%9 = Load: %8, %4 []
%2 = Mem: %0 [, %4, %5, %7, %10, %13]
%10 = Local: 8, %2 [, %11, %15]
%13 = Local: 8, %2 [, %14, %16]
%11 = Store: %1, %8, %10, %4 [, %12, %14]
%8 = Store: %1, %5, %7, %6 [, %9, %11]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2]
%7 = Local: 8, %2 [, %8, %12, %14, %22]
%4 = Local: 8, %2 [, %5, %9, %11, %21]
%16 = Load: %14, %13 [, %17]
%15 = Load: %14, %10 [, %17]
%14 = Store: %1, %11, %13, %7 [, %15, %16, %17]
%1 = Entry: idepth: 0, %0 [, %5, %8, %11, %14, %17]
%22 = Load: %19, %7 [, %23]
%21 = Load: %19, %4 [, %23]
%20 = Ret: %18 []
%17 = Call: id: fn1, idepth: 0, %1, %14, %15, %16 [, %18]
%23 = BinOp: -, %21, %22 [, %24]
%19 = Mem: %18 [, %21, %22, %24]
%18 = CallEnd: idepth: 0, %17 [, %19, %20, %24]
%24 = Return: idepth: 0, %18, %19, %23 []

======== OPTIMIZED SON ========
%6 = CInt: 2 [, %26]
%3 = CInt: 1 [, %27]
%10 = Local: 8, %2 [, %25]
%26 = Store: %27, %7, %6 [, %25]
%27 = Store: %2, %4, %3 [, %26]
%2 = Mem: %0 [, %4, %27, %7, %10, %13]
%13 = Local: 8, %2 [, %28]
%25 = Store: %26, %10, %4 [, %28]
%0 = Start: idepth: 0 [, %1, %2]
%7 = Local: 8, %2 [, %26, %22, %28, %17]
%4 = Local: 8, %2 [, %27, %21, %25, %17]
%28 = Store: %25, %13, %7 [, %17]
%1 = Entry: idepth: 0, %0 [, %17]
%22 = Load: %19, %7 [, %23]
%21 = Load: %19, %4 [, %23]
%17 = Call: id: fn1, idepth: 0, %1, %28, %4, %7 [, %18]
%23 = BinOp: -, %21, %22 [, %24]
%19 = Mem: %18 [, %21, %22, %24]
%18 = CallEnd: idepth: 0, %17 [, %19, %24]
%24 = Return: idepth: 0, %18, %19, %23 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = CInt: 1
  %7 = Local: 8, %2
  %6 = CInt: 2
  %10 = Local: 8, %2
  %13 = Local: 8, %2
  %27 = Store: %2, %4, %3
  %26 = Store: %27, %7, %6
  %25 = Store: %26, %10, %4
  %28 = Store: %25, %13, %7
  %17 = Call: id: fn1, idepth: 2, %28, %4, %7
%18 = CallEnd: idepth: 3, %17
  %19 = Mem
  %21 = Load: %19, %4
  %22 = Load: %19, %7
  %23 = BinOp: -, %21, %22
  %24 = Return: idepth: 0, %19, %23

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1 }

======== SOURCE ========
fn(a: ^uint, b: ^uint): void {
    tmp := *b;
    *b = *a;
    *a = tmp
}
======== UNSCHEDULED SON ========
%19 = Load: %17, %18 []
%16 = Load: %12, %15 [, %17]
%15 = Load: %12, %4 [, %16]
%14 = Load: %12, %13 []
%13 = Load: %12, %7 [, %14, %17]
%11 = Local: 8, %2 [, %12, %20]
%10 = Load: %8, %9 [, %12]
%9 = Load: %8, %7 [, %10]
%7 = Local: 8, %2 [, %8, %9, %13]
%4 = Local: 8, %2 [, %5, %15, %18]
%6 = Arg: 1, %0 [, %8]
%3 = Arg: 0, %0 [, %5]
%2 = Mem: %0 [, %4, %5, %7, %11]
%20 = Load: %17, %11 [, %21]
%18 = Load: %17, %4 [, %19, %21]
%17 = Store: %1, %12, %13, %16 [, %18, %19, %20, %21]
%12 = Store: %1, %8, %11, %10 [, %13, %14, %15, %16, %17]
%8 = Store: %1, %5, %7, %6 [, %9, %10, %12]
%5 = Store: %1, %2, %4, %3 [, %8]
%0 = Start: idepth: 0 [, %1, %2, %3, %6]
%21 = Store: %1, %17, %18, %20 [, %22]
%1 = Entry: idepth: 0, %0 [, %5, %8, %12, %17, %21, %22]
%22 = Return: idepth: 0, %1, %21 []

======== OPTIMIZED SON ========
%10 = Load: %24, %6 [, %23]
%24 = Store: %25, %7, %6 [, %23, %10]
%7 = Local: 8, %2 [, %24]
%25 = Store: %2, %4, %3 [, %24]
%11 = Local: 8, %2 [, %23, %20]
%4 = Local: 8, %2 [, %25, %18]
%16 = Load: %23, %3 [, %17]
%23 = Store: %24, %11, %10 [, %17, %16]
%6 = Arg: 1, %0 [, %24, %17, %10]
%3 = Arg: 0, %0 [, %25, %16]
%2 = Mem: %0 [, %4, %25, %7, %11]
%20 = Load: %17, %11 [, %21]
%18 = Load: %17, %4 [, %21]
%17 = Store: %1, %23, %6, %16 [, %18, %21, %20]
%0 = Start: idepth: 0 [, %1, %2, %3, %6]
%21 = Store: %1, %17, %18, %20 [, %22]
%1 = Entry: idepth: 0, %0 [, %17, %21, %22]
%22 = Return: idepth: 0, %1, %21 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %7 = Local: 8, %2
  %6 = Arg: 1
  %11 = Local: 8, %2
  %25 = Store: %2, %4, %3
  %24 = Store: %25, %7, %6
  %10 = Load: %24, %6
  %23 = Store: %24, %11, %10, %10
  %16 = Load: %23, %3
  %17 = Store: %23, %6, %16, %16
  %18 = Load: %17, %4
  %20 = Load: %17, %11
  %21 = Store: %17, %18, %20, %20, %18
  %22 = Return: idepth: 0, %21

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 5, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -56, 56
     addi64 $254, $254, -88
     addi64 $32, $254, 0
       li64 $33, 1
     addi64 $34, $254, 8
       li64 $35, 2
     addi64 $36, $254, 16
     addi64 $37, $254, 24
         st $33, $254, 0, 8
         st $35, $254, 8, 8
         st $32, $254, 16, 8
         st $34, $254, 24, 8
         cp $2, $32
         cp $3, $34
        jal $31, $0, :swap
         ld $32, $254, 0, 8
         ld $33, $254, 8, 8
      sub64 $32, $32, $33
         cp $1, $32
     addi64 $254, $254, 88
         ld $31, $254, -56, 56
         tx
swap:
     addi64 $254, $254, -24
         cp $14, $2
         cp $16, $3
     addi64 $13, $254, 0
     addi64 $15, $254, 8
     addi64 $17, $254, 16
         st $14, $254, 0, 8
         st $16, $254, 8, 8
         ld $15, $16, 0, 8
         st $15, $254, 16, 8
         ld $14, $14, 0, 8
         st $14, $16, 0, 8
         ld $13, $254, 0, 8
         ld $14, $254, 16, 8
         st $14, $13, 0, 8
     addi64 $254, $254, 24
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -56, 56
  addi64 $254=10240, $254, -88
  addi64 $32=0, $254=10152, 0
    li64 $33=0, 1
  addi64 $34=0, $254=10152, 8
    li64 $35=0, 2
  addi64 $36=0, $254=10152, 16
  addi64 $37=0, $254=10152, 24
      st $33=1, $254=10152, 0, 8
      st $35=2, $254=10152, 8, 8
      st $32=10152, $254=10152, 16, 8
      st $34=10160, $254=10152, 24, 8
      cp $2=0, $32=10152
      cp $3=0, $34=10160
     jal $31=0, $0=0, 65
  addi64 $254=10152, $254, -24
      cp $14=0, $2=10152
      cp $16=0, $3=10160
  addi64 $13=0, $254=10128, 0
  addi64 $15=0, $254=10128, 8
  addi64 $17=0, $254=10128, 16
      st $14=10152, $254=10128, 0, 8
      st $16=10160, $254=10128, 8, 8
      ld $15=10136, $16=10160, 0, 8
      st $15=2, $254=10128, 16, 8
      ld $14=10152, $14, 0, 8
      st $14=1, $16=10160, 0, 8
      ld $13=10128, $254=10128, 0, 8
      ld $14=1, $254=10128, 16, 8
      st $14=2, $13=10152, 0, 8
  addi64 $254=10128, $254, 24
    jala $0=0, $31=153, 0
      ld $32=10152, $254=10152, 0, 8
      ld $33=1, $254=10152, 8, 8
   sub64 $32=2, $32, $33=1
      cp $1=0, $32=1
  addi64 $254=10152, $254, 88
      ld $31=153, $254=10240, -56, 56
      tx