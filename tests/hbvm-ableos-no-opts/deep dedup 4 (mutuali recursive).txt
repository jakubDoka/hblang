main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $1, 3
        jal $31, $0, :deep dedup 4 (mutuali recursive).fib
         cp $32, $1
       li64 $1, 3
        jal $31, $0, :deep dedup 4 (mutuali recursive).fib2
      sub64 $1, $32, $1
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
deep dedup 4 (mutuali recursive).fib:
         st $31, $254, -8, 8
     addi64 $254, $254, -16
         st $1, $254, 0, 8
       li64 $2, 2
         ld $1, $254, 0, 8
       jgtu $1, $2, :2
       li64 $1, 1
        jmp :3
2:      jal $31, $0, :deep dedup 4 (mutuali recursive).fib_body
3:   addi64 $254, $254, 16
         ld $31, $254, -8, 8
       jala $0, $31, 0
deep dedup 4 (mutuali recursive).fib2:
         st $31, $254, -8, 8
     addi64 $254, $254, -16
         st $1, $254, 0, 8
       li64 $2, 2
         ld $1, $254, 0, 8
       jgtu $1, $2, :5
       li64 $1, 1
        jmp :6
5:      jal $31, $0, :deep dedup 4 (mutuali recursive).fib_body2
6:   addi64 $254, $254, 16
         ld $31, $254, -8, 8
       jala $0, $31, 0
deep dedup 4 (mutuali recursive).fib_body2:
         st $31, $254, -16, 16
     addi64 $254, $254, -24
         st $1, $254, 0, 8
         ld $1, $254, 0, 8
     addi64 $1, $1, -1
        jal $31, $0, :deep dedup 4 (mutuali recursive).fib2
         cp $32, $1
         ld $1, $254, 0, 8
     addi64 $1, $1, -2
        jal $31, $0, :deep dedup 4 (mutuali recursive).fib2
      add64 $1, $32, $1
     addi64 $254, $254, 24
         ld $31, $254, -16, 16
       jala $0, $31, 0
deep dedup 4 (mutuali recursive).fib_body:
         st $31, $254, -16, 16
     addi64 $254, $254, -24
         st $1, $254, 0, 8
         ld $1, $254, 0, 8
     addi64 $1, $1, -1
        jal $31, $0, :deep dedup 4 (mutuali recursive).fib
         cp $32, $1
         ld $1, $254, 0, 8
     addi64 $1, $1, -2
        jal $31, $0, :deep dedup 4 (mutuali recursive).fib
      add64 $1, $32, $1
     addi64 $254, $254, 24
         ld $31, $254, -16, 16
       jala $0, $31, 0