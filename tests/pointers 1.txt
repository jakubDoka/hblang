======== SOURCE ========
fn(): uint {
	a := 1
	b := &a
	modify(b)
	drop(a);
	*b += 2
	stack_reclamation_edge_case := 0
	return *b - 4
}
======== UNSCHEDULED SON ========
%4 = CInt: 1 [, %6]
%7 = Load: %6, %5 []
%1 = Entry: idepth: 0, %0 [, %11, %6, %9]
%10 = Load: %9, %8 [, %11]
%9 = Store: %1, %6, %8, %5 [, %11, %10]
%6 = Store: %1, %2, %5, %4 [, %9, %7]
%0 = Start: idepth: 0 [, %1, %2]
%20 = CInt: 2 [, %21]
%5 = Local: 8, %2 [, %6, %14, %7, %9]
%11 = Call: id: 1, idepth: 0, %1, %9, %10 [, %12]
%8 = Local: 8, %2 [, %9, %26, %10, %18]
%2 = Mem: %0 [, %6, %5, %8, %24]
%21 = BinOp: iadd, %19, %20 [, %22]
%19 = Load: %17, %18 [, %21]
%18 = Load: %17, %8 [, %19, %22]
%14 = Load: %13, %5 [, %15]
%13 = Mem: %12 [, %15, %14]
%12 = CallEnd: idepth: 0, %11 [, %15, %13]
%28 = CInt: 4 [, %29]
%27 = Load: %25, %26 [, %29]
%26 = Load: %25, %8 [, %27]
%23 = CInt: 0 [, %25]
%24 = Local: 8, %2 [, %25]
%22 = Store: %16, %17, %18, %21 [, %25]
%17 = Mem: %16 [, %22, %18, %19]
%15 = Call: id: 2, idepth: 0, %12, %13, %14 [, %16]
%29 = BinOp: isub, %27, %28 [, %30]
%25 = Store: %16, %22, %24, %23 [, %30, %26, %27]
%16 = CallEnd: idepth: 0, %15 [, %30, %17, %22, %25]
%30 = Return: idepth: 0, %16, %25, %29 []

======== OPTIMIZED SON ========
%4 = CInt: 1 [, %6]
%1 = Entry: idepth: 0, %0 [, %6, %11]
%0 = Start: idepth: 0 [, %1, %2]
%11 = Call: id: 1, idepth: 0, %1, %6, %5 [, %12]
%6 = Store: %1, %2, %5, %4 [, %11]
%2 = Mem: %0 [, %6, %5]
%19 = Load: %17, %5 [, %31]
%14 = Load: %13, %5 [, %15]
%13 = Mem: %12 [, %15, %14]
%12 = CallEnd: idepth: 0, %11 [, %13, %15]
%27 = Load: %22, %5 [, %32]
%31 = ImmBinOp: imm: 2, op: addi64, %19 [, %22]
%5 = Local: 8, %2 [, %6, %14, %27, %11, %19, %22]
%17 = Mem: %16 [, %22, %19]
%15 = Call: id: 2, idepth: 0, %12, %13, %14 [, %16]
%32 = ImmBinOp: imm: -4, op: addi64, %27 [, %30]
%22 = Store: %16, %17, %5, %31 [, %27, %30]
%16 = CallEnd: idepth: 0, %15 [, %17, %22, %30]
%30 = Return: idepth: 0, %16, %22, %32 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = Local: 8, %2
  %4 = CInt: 1
  %6 = Store: %2, %5, %4
  %11 = Call: id: 1, idepth: 2, %6, %5
%12 = CallEnd: idepth: 3, %11
  %13 = Mem
  %14 = Load: %13, %5
  %15 = Call: id: 2, idepth: 4, %13, %14, %14
%16 = CallEnd: idepth: 5, %15
  %17 = Mem
  %19 = Load: %17, %5
  %31 = ImmBinOp: imm: 2, op: addi64, %19
  %22 = Store: %17, %5, %31, %19
  %27 = Load: %22, %5
  %32 = ImmBinOp: imm: -4, op: addi64, %27
  %30 = Return: idepth: 0, %22, %32

======== REGISTER SELECTION ========
{ 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1 }

======== SOURCE ========
fn(a: uint): void {
	return
}
======== UNSCHEDULED SON ========
%4 = Arg: 0, %0 [, %6]
%5 = Local: 8, %2 [, %6]
%2 = Mem: %0 [, %6, %5]
%0 = Start: idepth: 0 [, %1, %2, %4]
%6 = Store: %1, %2, %5, %4 [, %7]
%1 = Entry: idepth: 0, %0 [, %7, %6]
%7 = Return: idepth: 0, %1, %6 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%2 = Mem: %0 [, %7]
%1 = Entry: idepth: 0, %0 [, %7]
%7 = Return: idepth: 0, %1, %2 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %7 = Return: idepth: 0, %2

======== REGISTER SELECTION ========
{ 1 }

======== SOURCE ========
fn(a: ^uint): void {
	*a = 2
	return
}
======== UNSCHEDULED SON ========
%8 = Load: %6, %7 []
%5 = Local: 8, %2 [, %6, %7]
%4 = Arg: 0, %0 [, %6]
%2 = Mem: %0 [, %6, %5]
%9 = CInt: 2 [, %10]
%7 = Load: %6, %5 [, %8, %10]
%6 = Store: %1, %2, %5, %4 [, %10, %7, %8]
%0 = Start: idepth: 0 [, %1, %2, %4]
%10 = Store: %1, %6, %7, %9 [, %11]
%1 = Entry: idepth: 0, %0 [, %11, %6, %10]
%11 = Return: idepth: 0, %1, %10 []

======== OPTIMIZED SON ========
%9 = CInt: 2 [, %10]
%4 = Arg: 0, %0 [, %10]
%2 = Mem: %0 [, %10]
%0 = Start: idepth: 0 [, %1, %2, %4]
%10 = Store: %1, %2, %4, %9 [, %11]
%1 = Entry: idepth: 0, %0 [, %11, %10]
%11 = Return: idepth: 0, %1, %10 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Arg: 0
  %9 = CInt: 2
  %10 = Store: %2, %4, %9
  %11 = Return: idepth: 0, %10

======== REGISTER SELECTION ========
{ 1, 2, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -24, 24
     addi64 $254, $254, -32
     addi64 $32, $254, 0
       li64 $33, 1
         st $33, $254, 0, 8
         cp $2, $32
        jal $31, $0, :modify
         ld $33, $254, 0, 8
         cp $2, $33
        jal $31, $0, :drop
         ld $33, $254, 0, 8
     addi64 $33, $33, 2
         st $33, $254, 0, 8
         ld $32, $254, 0, 8
     addi64 $32, $32, -4
         cp $1, $32
     addi64 $254, $254, 32
         ld $31, $254, -24, 24
         tx
drop:
       jala $0, $31, 0
modify:
         cp $13, $2
       li64 $14, 2
         st $14, $13, 0, 8
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -24, 24
  addi64 $254=10240, $254, -32
  addi64 $32=0, $254=10208, 0
    li64 $33=0, 1
      st $33=1, $254=10208, 0, 8
      cp $2=0, $32=10208
     jal $31=0, $0=0, 130
      cp $13=0, $2=10208
    li64 $14=0, 2
      st $14=2, $13=10208, 0, 8
    jala $0=0, $31=68, 0
      ld $33=1, $254=10208, 0, 8
      cp $2=10208, $33=2
     jal $31=68, $0=0, 96
    jala $0=0, $31=91, 0
      ld $33=2, $254=10208, 0, 8
  addi64 $33=2, $33, 2
      st $33=4, $254=10208, 0, 8
      ld $32=10208, $254=10208, 0, 8
  addi64 $32=4, $32, -4
      cp $1=0, $32=0
  addi64 $254=10208, $254, 32
      ld $31=91, $254=10240, -24, 24
      tx