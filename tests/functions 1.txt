======== SOURCE ========
fn(): uint {
	return add_one(10) + add_two(20)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%4 = CInt: 10 [, %5]
%2 = Mem: %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5]
%5 = Call: id: 1, idepth: 0, %1, %2, %4 [, %6]
%9 = CInt: 20 [, %10]
%7 = Mem: %6 [, %10]
%6 = CallEnd: idepth: 0, %5 [, %10, %7, %8]
%8 = Ret: 0, %6 [, %14]
%13 = Ret: 0, %11 [, %14]
%10 = Call: id: 2, idepth: 0, %6, %7, %9 [, %11]
%14 = BinOp: iadd, %8, %13 [, %15]
%12 = Mem: %11 [, %15]
%11 = CallEnd: idepth: 0, %10 [, %15, %12, %13]
%15 = Return: idepth: 0, %11, %12, %14 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%4 = CInt: 10 [, %5]
%2 = Mem: %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5]
%5 = Call: id: 1, idepth: 0, %1, %2, %4 [, %6]
%9 = CInt: 20 [, %10]
%7 = Mem: %6 [, %10]
%6 = CallEnd: idepth: 0, %5 [, %7, %8, %10]
%8 = Ret: 0, %6 [, %14]
%13 = Ret: 0, %11 [, %14]
%10 = Call: id: 2, idepth: 0, %6, %7, %9 [, %11]
%14 = BinOp: iadd, %8, %13 [, %15]
%12 = Mem: %11 [, %15]
%11 = CallEnd: idepth: 0, %10 [, %12, %13, %15]
%15 = Return: idepth: 0, %11, %12, %14 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = CInt: 10
  %5 = Call: id: 1, idepth: 2, %2, %4
%6 = CallEnd: idepth: 3, %5
  %7 = Mem
  %8 = Ret: 0
  %9 = CInt: 20
  %10 = Call: id: 2, idepth: 4, %7, %9
%11 = CallEnd: idepth: 5, %10
  %12 = Mem
  %13 = Ret: 0
  %14 = BinOp: iadd, %8, %13
  %15 = Return: idepth: 0, %12, %14

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 2, 1, 1, 2, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
	return x + 2
}
======== UNSCHEDULED SON ========
%7 = CInt: 2 [, %9]
%8 = Load: %6, %4 [, %9]
%5 = Arg: 0, %0 [, %6]
%4 = Local: 8, %2 [, %6, %8]
%2 = Mem: %0 [, %6, %4]
%0 = Start: idepth: 0 [, %1, %2, %5]
%9 = BinOp: iadd, %8, %7 [, %10]
%6 = Store: %1, %2, %4, %5 [, %10, %8]
%1 = Entry: idepth: 0, %0 [, %10, %6]
%10 = Return: idepth: 0, %1, %6, %9 []

======== OPTIMIZED SON ========
%5 = Arg: 0, %0 [, %11]
%0 = Start: idepth: 0 [, %1, %2, %5]
%11 = ImmBinOp: imm: 2, op: addi64, %5 [, %10]
%2 = Mem: %0 [, %10]
%1 = Entry: idepth: 0, %0 [, %10]
%10 = Return: idepth: 0, %1, %2, %11 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = Arg: 0
  %11 = ImmBinOp: imm: 2, op: addi64, %5
  %10 = Return: idepth: 0, %2, %11

======== REGISTER SELECTION ========
{ 1, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
	return x + 1
}
======== UNSCHEDULED SON ========
%7 = CInt: 1 [, %9]
%8 = Load: %6, %4 [, %9]
%5 = Arg: 0, %0 [, %6]
%4 = Local: 8, %2 [, %6, %8]
%2 = Mem: %0 [, %6, %4]
%0 = Start: idepth: 0 [, %1, %2, %5]
%9 = BinOp: iadd, %8, %7 [, %10]
%6 = Store: %1, %2, %4, %5 [, %10, %8]
%1 = Entry: idepth: 0, %0 [, %10, %6]
%10 = Return: idepth: 0, %1, %6, %9 []

======== OPTIMIZED SON ========
%5 = Arg: 0, %0 [, %11]
%0 = Start: idepth: 0 [, %1, %2, %5]
%11 = ImmBinOp: imm: 1, op: addi64, %5 [, %10]
%2 = Mem: %0 [, %10]
%1 = Entry: idepth: 0, %0 [, %10]
%10 = Return: idepth: 0, %1, %2, %11 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = Arg: 0
  %11 = ImmBinOp: imm: 1, op: addi64, %5
  %10 = Return: idepth: 0, %2, %11

======== REGISTER SELECTION ========
{ 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -24, 24
     addi64 $254, $254, -24
       li64 $32, 10
         cp $2, $32
        jal $31, $0, :add_one
         cp $32, $1
       li64 $33, 20
         cp $2, $33
        jal $31, $0, :add_two
         cp $33, $1
      add64 $32, $32, $33
         cp $1, $32
     addi64 $254, $254, 24
         ld $31, $254, -24, 24
         tx
add_two:
         cp $13, $2
     addi64 $13, $13, 2
         cp $1, $13
       jala $0, $31, 0
add_one:
         cp $13, $2
     addi64 $13, $13, 1
         cp $1, $13
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -24, 24
  addi64 $254=10240, $254, -24
    li64 $32=0, 10
      cp $2=0, $32=10
     jal $31=0, $0=0, 93
      cp $13=0, $2=10
  addi64 $13=10, $13, 1
      cp $1=0, $13=11
    jala $0=0, $31=44, 0
      cp $32=10, $1=11
    li64 $33=0, 20
      cp $2=10, $33=20
     jal $31=44, $0=0, 42
      cp $13=11, $2=20
  addi64 $13=20, $13, 2
      cp $1=11, $13=22
    jala $0=0, $31=67, 0
      cp $33=20, $1=22
   add64 $32=11, $32, $33=22
      cp $1=22, $32=33
  addi64 $254=10216, $254, 24
      ld $31=67, $254=10240, -24, 24
      tx