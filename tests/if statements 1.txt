======== SOURCE ========
fn(): uint {
	return fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%4 = CInt: 3 [, %5]
%2 = Mem: %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5]
%5 = Call: ret_count: 1, id: 1, idepth: 0, %1, %2, %4 [, %6]
%8 = Ret: 0, %6 [, %9]
%7 = Mem: %6 [, %9]
%6 = CallEnd: idepth: 0, %5 [, %9, %7, %8]
%9 = Return: idepth: 0, %6, %7, %8 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%4 = CInt: 3 [, %5]
%2 = Mem: %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5]
%5 = Call: ret_count: 1, id: 1, idepth: 0, %1, %2, %4 [, %6]
%8 = Ret: 0, %6 [, %9]
%7 = Mem: %6 [, %9]
%6 = CallEnd: idepth: 0, %5 [, %7, %8, %9]
%9 = Return: idepth: 0, %6, %7, %8 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %4 = CInt: 3
  %5 = Call: ret_count: 1, id: 1, idepth: 0, %2, %4
%6 = CallEnd: idepth: 0, %5
  %7 = Mem
  %8 = Ret: 0
  %9 = Return: idepth: 0, %7, %8

======== SOURCE ========
fn(x: uint): uint {
	if x <= 2 {
		return 1
	} else {
		return fib(x - 1) + fib(x - 2)
	}
}
======== UNSCHEDULED SON ========
%7 = CInt: 2 [, %9, %22]
%22 = BinOp: isub, %21, %7 [, %23]
%19 = Mem: %18 [, %23, %21]
%18 = CallEnd: idepth: 0, %17 [, %23, %19, %20]
%15 = Then: idepth: 0, %11 [, %17]
%9 = BinOp: ule, %8, %7 [, %11]
%21 = Load: %19, %5 [, %22]
%0 = Start: idepth: 0 [, %1, %2, %4]
%23 = Call: ret_count: 1, id: 1, idepth: 0, %18, %19, %22 [, %24]
%11 = If: idepth: 0, %1, %9 [, %12, %15]
%26 = Ret: 0, %24 [, %27]
%20 = Ret: 0, %18 [, %27]
%16 = BinOp: isub, %8, %13 [, %17]
%17 = Call: ret_count: 1, id: 1, idepth: 0, %15, %6, %16 [, %18]
%8 = Load: %6, %5 [, %9, %16]
%4 = Arg: 0, %0 [, %6]
%5 = Local: 8, %2 [, %6, %21, %8]
%2 = Mem: %0 [, %6, %5]
%1 = Entry: idepth: 0, %0 [, %11, %6]
%24 = CallEnd: idepth: 0, %23 [, %29, %25, %26]
%12 = Then: idepth: 0, %11 [, %28]
%27 = BinOp: iadd, %20, %26 [, %32]
%13 = CInt: 1 [, %32, %16]
%25 = Mem: %24 [, %31]
%6 = Store: %1, %2, %5, %4 [, %31, %8, %17]
%29 = Jmp: idepth: 0, %24 [, %30]
%28 = Jmp: idepth: 0, %12 [, %30]
%32 = Phi: %30, %13, %27 [, %14]
%31 = Phi: %30, %6, %25 [, %14]
%30 = Region: idepth: 0, %28, %29 [, %14, %31, %32]
%14 = Return: idepth: 0, %30, %31, %32 []

======== OPTIMIZED SON ========
%33 = ImmBinOp: imm: -2, op: addi64, %4 [, %23]
%19 = Mem: %18 [, %23]
%7 = CInt: 2 [, %34]
%18 = CallEnd: idepth: 0, %17 [, %19, %20, %23]
%35 = ImmBinOp: imm: -1, op: addi64, %4 [, %17]
%15 = Then: idepth: 0, %34 [, %17]
%4 = Arg: 0, %0 [, %33, %34, %35]
%1 = Entry: idepth: 0, %0 [, %34]
%23 = Call: ret_count: 1, id: 1, idepth: 0, %18, %19, %33 [, %24]
%34 = IfOp: swapped: false, op: jgtu, idepth: 0, %1, %4, %7 [, %12, %15]
%26 = Ret: 0, %24 [, %27]
%20 = Ret: 0, %18 [, %27]
%17 = Call: ret_count: 1, id: 1, idepth: 0, %15, %2, %35 [, %18]
%0 = Start: idepth: 0 [, %1, %2, %4]
%24 = CallEnd: idepth: 0, %23 [, %25, %26, %29]
%12 = Then: idepth: 0, %34 [, %28]
%27 = BinOp: iadd, %20, %26 [, %32]
%13 = CInt: 1 [, %32]
%25 = Mem: %24 [, %31]
%2 = Mem: %0 [, %17, %31]
%29 = Jmp: idepth: 0, %24 [, %30]
%28 = Jmp: idepth: 0, %12 [, %30]
%32 = Phi: %30, %13, %27 [, %14]
%31 = Phi: %30, %2, %25 [, %14]
%30 = Region: idepth: 0, %28, %29 [, %31, %32, %14]
%14 = Return: idepth: 0, %30, %31, %32 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Arg: 0
  %7 = CInt: 2
  %34 = IfOp: swapped: false, op: jgtu, idepth: 2, %4, %7
%12 = Then: idepth: 3, %34
  %13 = CInt: 1
  %36 = MachMove: %13
  %28 = Jmp: idepth: 4
%15 = Then: idepth: 3, %34
  %35 = ImmBinOp: imm: -1, op: addi64, %4
  %17 = Call: ret_count: 1, id: 1, idepth: 4, %2, %35
%18 = CallEnd: idepth: 5, %17
  %19 = Mem
  %20 = Ret: 0
  %33 = ImmBinOp: imm: -2, op: addi64, %4
  %23 = Call: ret_count: 1, id: 1, idepth: 6, %19, %33
%24 = CallEnd: idepth: 7, %23
  %25 = Mem
  %26 = Ret: 0
  %27 = BinOp: iadd, %20, %26
  %37 = MachMove: %27
  %29 = Jmp: idepth: 8
%30 = Region: idepth: 0, %28, %29
  %31 = Phi: %2, %25
  %38 = Phi: %36, %37
  %14 = Return: idepth: 0, %31, %38

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
         st $31, $254, -24, 24
     addi64 $254, $254, -24
         cp $32, $2
       li64 $33, 2
       jgtu $32, $33, :1
       li64 $32, 1
        jmp :2
1:   addi64 $33, $32, -1
         cp $2, $33
        jal $31, $0, :fib
         cp $33, $1
     addi64 $32, $32, -2
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
      add64 $32, $33, $32
2:       cp $1, $32
     addi64 $254, $254, 24
         ld $31, $254, -24, 24
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
      st $31=44, $254=10224, -24, 24
  addi64 $254=10224, $254, -24
      cp $32=3, $2=3
    li64 $33=0, 2
    jgtu $32=3, $33=2, 20
  addi64 $33=2, $32=3, -1
      cp $2=3, $33=2
     jal $31=44, $0=0, -71
      st $31=153, $254=10200, -24, 24
  addi64 $254=10200, $254, -24
      cp $32=3, $2=2
    li64 $33=2, 2
    jgtu $32=2, $33=2, 20
    li64 $32=2, 1
     jmp 57
      cp $1=0, $32=1
  addi64 $254=10176, $254, 24
      ld $31=153, $254=10200, -24, 24
    jala $0=0, $31=153, 0
      cp $33=2, $1=1
  addi64 $32=3, $32, -2
      cp $2=2, $32=1
     jal $31=153, $0=0, -95
      st $31=177, $254=10200, -24, 24
  addi64 $254=10200, $254, -24
      cp $32=1, $2=1
    li64 $33=1, 2
    jgtu $32=1, $33=2, 20
    li64 $32=1, 1
     jmp 57
      cp $1=1, $32=1
  addi64 $254=10176, $254, 24
      ld $31=177, $254=10200, -24, 24
    jala $0=0, $31=177, 0
      cp $32=1, $1=1
   add64 $32=1, $33=1, $32
      cp $1=1, $32=2
  addi64 $254=10200, $254, 24
      ld $31=177, $254=10224, -24, 24
    jala $0=0, $31=44, 0
      cp $32=3, $1=2
      cp $1=2, $32=2
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx