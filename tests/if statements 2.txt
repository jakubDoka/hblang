======== SOURCE ========
fn(): uint {
    return fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idpth: 0
%1 = Entry: idpth: 0, %0
%2 = CInt: 3
%3 = Call: fn1, idpth: 0, %1, %2
%4 = CallEnd: idpth: 0, %3
%5 = Ret: %4
%6 = Return: idpth: 0, %4, %5

======== OPTIMIZED SON ========
%0 = Start: idpth: 0
%1 = Entry: idpth: 0, %0
%2 = CInt: 3
%3 = Call: fn1, idpth: 0, %1, %2
%4 = CallEnd: idpth: 0, %3
%5 = Ret: %4
%6 = Return: idpth: 0, %4, %5

======== SCHEDULED SON ========
%0 = Start: idpth: 0
%1 = Entry: idpth: 1, %0
  %2 = CInt: 3
  %3 = Call: fn1, idpth: 0, %2
%4 = CallEnd: idpth: 0, %3
  %5 = Ret
  %6 = Return: idpth: 0, %5

======== REGISTER SELECTION ========
{ 1, 1, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    if x <= 2 {
        x = 1
    } else {
        x = fib(x - 1) + fib(x - 2)
    }
    return x
}
======== UNSCHEDULED SON ========
%9 = CInt: 1
%0 = Start: idpth: 0
%3 = CInt: 2
%1 = Arg: 0, %0
%14 = CInt: 2
%8 = Else: idpth: 0, %5
%10 = BinOp: -, %1, %9
%2 = Entry: idpth: 0, %0
%4 = BinOp: <=, %1, %3
%15 = BinOp: -, %1, %14
%11 = Call: fn1, idpth: 0, %8, %10
%5 = If: idpth: 0, %2, %4
%16 = Call: fn1, idpth: 0, %12, %15
%12 = CallEnd: idpth: 0, %11
%6 = Then: idpth: 0, %5
%17 = CallEnd: idpth: 0, %16
%13 = Ret: %12
%18 = Ret: %17
%20 = Jmp: idpth: 0, %6
%21 = Jmp: idpth: 0, %17
%7 = CInt: 1
%19 = BinOp: +, %13, %18
%22 = Region: idpth: 0, %20, %21
%23 = Phi: %22, %7, %19
%24 = Return: idpth: 0, %22, %23

======== OPTIMIZED SON ========
%0 = Start: idpth: 0
%3 = CInt: 2
%1 = Arg: 0, %0
%8 = Else: idpth: 0, %5
%25 = ImmBinOp: addi64(-1), %1
%2 = Entry: idpth: 0, %0
%4 = BinOp: <=, %1, %3
%26 = ImmBinOp: addi64(-2), %1
%11 = Call: fn1, idpth: 0, %8, %25
%5 = If: idpth: 0, %2, %4
%16 = Call: fn1, idpth: 0, %12, %26
%12 = CallEnd: idpth: 0, %11
%6 = Then: idpth: 0, %5
%17 = CallEnd: idpth: 0, %16
%13 = Ret: %12
%18 = Ret: %17
%20 = Jmp: idpth: 0, %6
%21 = Jmp: idpth: 0, %17
%7 = CInt: 1
%19 = BinOp: +, %13, %18
%22 = Region: idpth: 0, %20, %21
%23 = Phi: %22, %7, %19
%24 = Return: idpth: 0, %22, %23

======== SCHEDULED SON ========
%0 = Start: idpth: 0
%2 = Entry: idpth: 1, %0
  %1 = Arg: 0
  %3 = CInt: 2
  %4 = BinOp: <=, %1, %3
  %5 = If: idpth: 2, %4
%6 = Then: idpth: 3, %5
  %7 = CInt: 1
  %20 = Jmp: idpth: 4
%8 = Else: idpth: 3, %5
  %25 = ImmBinOp: addi64(-1), %1
  %11 = Call: fn1, idpth: 4, %25
%12 = CallEnd: idpth: 5, %11
  %13 = Ret
  %26 = ImmBinOp: addi64(-2), %1
  %16 = Call: fn1, idpth: 6, %26
%17 = CallEnd: idpth: 7, %16
  %18 = Ret
  %19 = BinOp: +, %13, %18
  %21 = Jmp: idpth: 8
%22 = Region: idpth: 5, %20, %21
  %23 = Phi: %7, %19
  %24 = Return: idpth: 0, %23

======== REGISTER SELECTION ========
{ 1, 2, 2, 1, 3, 1, 2, 1, 2, 1, 1, 1, 4, 1, 1, 1 }

======== CODEGEN ========
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :0
         cp $32, $1
         cp $1, $32
         tx
0:       st $31, $254, -40, 40
     addi64 $254, $254, 18446744073709551576
         cp $32, $2
       li64 $33, 2
       cmpu $33, $32, $33
      cmpui $33, $33, 1
        jeq $33, $0, :1
        jmp :2
2:     li64 $34, 1
         cp $32, $34
        jmp :3
1:   addi64 $33, $32, 18446744073709551615
         cp $2, $33
        jal $31, $0, :0
         cp $33, $1
     addi64 $32, $32, 18446744073709551614
         cp $2, $32
        jal $31, $0, :0
         cp $32, $1
      add64 $35, $33, $32
         cp $32, $35
3:       cp $1, $32
     addi64 $254, $254, 40
         ld $31, $254, -40, 40
       jala $0, $31, 0

======== EXECUTION ========
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 14
      st $31=20, $254=10240, -40, 40
  addi64 $254=10240, $254=10240, -40
      cp $32=3, $2=3
    li64 $33=0, 2
    cmpu $33=2, $32=3, $33=2
   cmpui $33=1, $33=1, 1
     jeq $33=0, $0=0, 28
  addi64 $33=0, $32=3, -1
      cp $2=3, $33=2
     jal $31=20, $0=0, -94
      st $31=128, $254=10200, -40, 40
  addi64 $254=10200, $254=10200, -40
      cp $32=3, $2=2
    li64 $33=2, 2
    cmpu $33=2, $32=2, $33=2
   cmpui $33=0, $33=0, 1
     jeq $33=18446744073709551615, $0=0, 28
     jmp 5
    li64 $34=0, 1
      cp $32=2, $34=1
     jmp 60
      cp $1=0, $32=1
  addi64 $254=10160, $254=10160, 40
      ld $31=128, $254=10200, -40, 40
    jala $0=0, $31=128, 0
      cp $33=2, $1=1
  addi64 $32=3, $32=3, -2
      cp $2=2, $32=1
     jal $31=128, $0=0, -118
      st $31=152, $254=10200, -40, 40
  addi64 $254=10200, $254=10200, -40
      cp $32=1, $2=1
    li64 $33=1, 2
    cmpu $33=2, $32=1, $33=2
   cmpui $33=18446744073709551615, $33=18446744073709551615, 1
     jeq $33=1, $0=0, 28
     jmp 5
    li64 $34=0, 1
      cp $32=1, $34=1
     jmp 60
      cp $1=1, $32=1
  addi64 $254=10160, $254=10160, 40
      ld $31=152, $254=10200, -40, 40
    jala $0=0, $31=152, 0
      cp $32=1, $1=1
   add64 $35=0, $33=1, $32=1
      cp $32=1, $35=2
      cp $1=1, $32=2
  addi64 $254=10200, $254=10200, 40
      ld $31=152, $254=10240, -40, 40
    jala $0=0, $31=20, 0
      cp $32=3, $1=2
      cp $1=2, $32=2
      tx