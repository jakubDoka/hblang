======== SOURCE ========
fn(): uint {
    return fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%1 = Mem: %0 [, %4]
%2 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %2, %1, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%1 = Mem: %0 [, %4]
%2 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %2, %1, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%2 = Entry: idepth: 0, %0
  %3 = CInt: 3
  %4 = Call: id: fn1, idepth: 0, %1, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    if x <= 2 {
        x = 1
    } else {
        x = fib(x - 1) + fib(x - 2)
    }
    return x
}
======== UNSCHEDULED SON ========
%16 = CInt: 2 [, %17]
%4 = CInt: 2 [, %5]
%10 = CInt: 1 [, %11]
%17 = BinOp: -, %2, %16 [, %18]
%14 = Mem: %13 [, %18]
%5 = BinOp: <=, %2, %4 [, %6]
%13 = CallEnd: idepth: 0, %12 [, %14, %15, %18]
%11 = BinOp: -, %2, %10 [, %12]
%9 = Else: idepth: 0, %6 [, %12]
%3 = Entry: idepth: 0, %0 [, %6]
%2 = Arg: 0, %0 [, %5, %11, %17]
%18 = Call: id: fn1, idepth: 0, %13, %14, %17 [, %19]
%6 = If: swapped: false, idepth: 0, %3, %5 [, %7, %9]
%21 = Ret: %19 [, %22]
%15 = Ret: %13 [, %22]
%12 = Call: id: fn1, idepth: 0, %9, %1, %11 [, %13]
%0 = Start: idepth: 0 [, %1, %2, %3]
%19 = CallEnd: idepth: 0, %18 [, %20, %21, %24]
%7 = Then: idepth: 0, %6 [, %23]
%22 = BinOp: +, %15, %21 [, %27]
%8 = CInt: 1 [, %27]
%20 = Mem: %19 [, %26]
%1 = Mem: %0 [, %12, %26]
%24 = Jmp: idepth: 0, %19 [, %25]
%23 = Jmp: idepth: 0, %7 [, %25]
%27 = Phi: %25, %8, %22 [, %28]
%26 = Phi: %25, %1, %20 [, %28]
%25 = Region: idepth: 0, %23, %24 [, %26, %27, %28]
%28 = Return: idepth: 0, %25, %26, %27 []

======== OPTIMIZED SON ========
%4 = CInt: 2 [, %31]
%29 = ImmBinOp: imm: -2, op: addi64, %2 [, %18]
%14 = Mem: %13 [, %18]
%31 = CondOp: op: jgtu, %2, %4 [, %6]
%13 = CallEnd: idepth: 0, %12 [, %14, %15, %18]
%30 = ImmBinOp: imm: -1, op: addi64, %2 [, %12]
%9 = Else: idepth: 0, %6 [, %12]
%3 = Entry: idepth: 0, %0 [, %6]
%2 = Arg: 0, %0 [, %31, %30, %29]
%18 = Call: id: fn1, idepth: 0, %13, %14, %29 [, %19]
%6 = If: swapped: true, idepth: 0, %3, %31 [, %7, %9]
%21 = Ret: %19 [, %22]
%15 = Ret: %13 [, %22]
%12 = Call: id: fn1, idepth: 0, %9, %1, %30 [, %13]
%0 = Start: idepth: 0 [, %1, %2, %3]
%19 = CallEnd: idepth: 0, %18 [, %20, %21, %24]
%7 = Then: idepth: 0, %6 [, %23]
%22 = BinOp: +, %15, %21 [, %27]
%8 = CInt: 1 [, %27]
%20 = Mem: %19 [, %26]
%1 = Mem: %0 [, %12, %26]
%24 = Jmp: idepth: 0, %19 [, %25]
%23 = Jmp: idepth: 0, %7 [, %25]
%27 = Phi: %25, %8, %22 [, %28]
%26 = Phi: %25, %1, %20 [, %28]
%25 = Region: idepth: 0, %23, %24 [, %26, %27, %28]
%28 = Return: idepth: 0, %25, %26, %27 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%3 = Entry: idepth: 1, %0
  %2 = Arg: 0
  %4 = CInt: 2
  %31 = CondOp: op: jgtu, %2, %4
  %6 = If: swapped: true, idepth: 2, %31
%7 = Then: idepth: 3, %6
  %8 = CInt: 1
  %23 = Jmp: idepth: 4
%9 = Else: idepth: 3, %6
  %30 = ImmBinOp: imm: -1, op: addi64, %2
  %12 = Call: id: fn1, idepth: 4, %1, %30
%13 = CallEnd: idepth: 5, %12
  %14 = Mem
  %15 = Ret
  %29 = ImmBinOp: imm: -2, op: addi64, %2
  %18 = Call: id: fn1, idepth: 6, %14, %29
%19 = CallEnd: idepth: 7, %18
  %20 = Mem
  %21 = Ret
  %22 = BinOp: +, %15, %21
  %24 = Jmp: idepth: 8
%25 = Region: idepth: 0, %23, %24
  %26 = Phi: %1, %20
  %27 = Phi: %8, %22
  %28 = Return: idepth: 0, %26, %27

======== REGISTER SELECTION ========
{ 1, 2, 2, 1, 3, 1, 2, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
         st $31, $254, -40, 40
     addi64 $254, $254, -40
         cp $32, $2
       li64 $33, 2
       jgtu $32, $33, :1
       li64 $34, 1
         cp $32, $34
        jmp :2
1:   addi64 $33, $32, -1
         cp $2, $33
        jal $31, $0, :fib
         cp $33, $1
     addi64 $32, $32, -2
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
      add64 $35, $33, $32
         cp $32, $35
2:       cp $1, $32
     addi64 $254, $254, 40
         ld $31, $254, -40, 40
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
      st $31=44, $254=10224, -40, 40
  addi64 $254=10224, $254, -40
      cp $32=3, $2=3
    li64 $33=0, 2
    jgtu $32=3, $33=2, 23
  addi64 $33=2, $32=3, -1
      cp $2=3, $33=2
     jal $31=44, $0=0, -74
      st $31=156, $254=10184, -40, 40
  addi64 $254=10184, $254, -40
      cp $32=3, $2=2
    li64 $33=2, 2
    jgtu $32=2, $33=2, 23
    li64 $34=0, 1
      cp $32=2, $34=1
     jmp 60
      cp $1=0, $32=1
  addi64 $254=10144, $254, 40
      ld $31=156, $254=10184, -40, 40
    jala $0=0, $31=156, 0
      cp $33=2, $1=1
  addi64 $32=3, $32, -2
      cp $2=2, $32=1
     jal $31=156, $0=0, -98
      st $31=180, $254=10184, -40, 40
  addi64 $254=10184, $254, -40
      cp $32=1, $2=1
    li64 $33=1, 2
    jgtu $32=1, $33=2, 23
    li64 $34=0, 1
      cp $32=1, $34=1
     jmp 60
      cp $1=1, $32=1
  addi64 $254=10144, $254, 40
      ld $31=180, $254=10184, -40, 40
    jala $0=0, $31=180, 0
      cp $32=1, $1=1
   add64 $35=0, $33=1, $32=1
      cp $32=1, $35=2
      cp $1=1, $32=2
  addi64 $254=10184, $254, 40
      ld $31=180, $254=10224, -40, 40
    jala $0=0, $31=44, 0
      cp $32=3, $1=2
      cp $1=2, $32=2
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx