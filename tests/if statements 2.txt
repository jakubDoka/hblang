======== SOURCE ========
fn(): uint {
    return fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 3
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    if x <= 2 {
        x = 1
    } else {
        x = fib(x - 1) + fib(x - 2)
    }
    return x
}
======== UNSCHEDULED SON ========
%24 = CInt: 2 [, %25]
%17 = CInt: 1 [, %18]
%7 = CInt: 2 [, %8]
%20 = CallEnd: idepth: 0, %19 [, %21, %22, %26]
%14 = Else: idepth: 0, %9 [, %19]
%25 = BinOp: -, %23, %24 [, %26]
%21 = Mem: %20 [, %23, %26]
%18 = BinOp: -, %16, %17 [, %19]
%8 = BinOp: <=, %6, %7 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %3]
%22 = Ret: %20 [, %30]
%19 = Call: id: fn1, idepth: 0, %14, %5, %18 [, %20]
%3 = Arg: 0, %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5, %9]
%29 = Ret: %27 [, %30]
%26 = Call: id: fn1, idepth: 0, %20, %21, %25 [, %27]
%9 = If: swapped: false, idepth: 0, %1, %8 [, %10, %14]
%23 = Load: %21, %4 [, %25]
%16 = Load: %5, %4 [, %18]
%15 = Load: %5, %4 []
%11 = Load: %5, %4 []
%6 = Load: %5, %4 [, %8]
%2 = Mem: %0 [, %4, %5]
%30 = BinOp: +, %22, %29 [, %31]
%28 = Mem: %27 [, %31]
%12 = CInt: 1 [, %13]
%5 = Store: %1, %2, %4, %3 [, %6, %11, %13, %15, %16, %19]
%27 = CallEnd: idepth: 0, %26 [, %28, %29, %31, %33]
%10 = Then: idepth: 0, %9 [, %13, %32]
%4 = Local: 8, %2 [, %5, %6, %11, %13, %15, %16, %23, %31, %36]
%31 = Store: %27, %28, %4, %30 [, %35]
%13 = Store: %10, %5, %4, %12 [, %35]
%33 = Jmp: idepth: 0, %27 [, %34]
%32 = Jmp: idepth: 0, %10 [, %34]
%36 = Load: %35, %4 [, %37]
%35 = Phi: %34, %13, %31 [, %36, %37]
%34 = Region: idepth: 0, %32, %33 [, %35, %37]
%37 = Return: idepth: 0, %34, %35, %36 []

======== OPTIMIZED SON ========
%7 = CInt: 2 [, %40]
%20 = CallEnd: idepth: 0, %19 [, %21, %22, %26]
%14 = Else: idepth: 0, %9 [, %19]
%38 = ImmBinOp: imm: -2, op: addi64, %23 [, %26]
%21 = Mem: %20 [, %23, %26]
%39 = ImmBinOp: imm: -1, op: addi64, %6 [, %19]
%40 = CondOp: op: jgtu, %6, %7 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %3]
%22 = Ret: %20 [, %30]
%19 = Call: id: fn1, idepth: 0, %14, %5, %39 [, %20]
%3 = Arg: 0, %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5, %9]
%29 = Ret: %27 [, %30]
%26 = Call: id: fn1, idepth: 0, %20, %21, %38 [, %27]
%9 = If: swapped: true, idepth: 0, %1, %40 [, %10, %14]
%23 = Load: %21, %4 [, %38]
%6 = Load: %5, %4 [, %40, %39]
%2 = Mem: %0 [, %4, %5]
%30 = BinOp: +, %22, %29 [, %31]
%28 = Mem: %27 [, %31]
%12 = CInt: 1 [, %13]
%5 = Store: %1, %2, %4, %3 [, %6, %19, %13]
%27 = CallEnd: idepth: 0, %26 [, %28, %29, %31, %33]
%10 = Then: idepth: 0, %9 [, %13, %32]
%4 = Local: 8, %2 [, %5, %6, %23, %13, %31, %36]
%31 = Store: %27, %28, %4, %30 [, %35]
%13 = Store: %10, %5, %4, %12 [, %35]
%33 = Jmp: idepth: 0, %27 [, %34]
%32 = Jmp: idepth: 0, %10 [, %34]
%36 = Load: %35, %4 [, %37]
%35 = Phi: %34, %13, %31 [, %36, %37]
%34 = Region: idepth: 0, %32, %33 [, %35, %37]
%37 = Return: idepth: 0, %34, %35, %36 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %7 = CInt: 2
  %5 = Store: %2, %4, %3
  %6 = Load: %5, %4
  %40 = CondOp: op: jgtu, %6, %7
  %9 = If: swapped: true, idepth: 2, %40
%10 = Then: idepth: 3, %9
  %12 = CInt: 1
  %36 = Load: %35, %4
  %13 = Store: %5, %4, %12
  %32 = Jmp: idepth: 4
%14 = Else: idepth: 3, %9
  %39 = ImmBinOp: imm: -1, op: addi64, %6
  %19 = Call: id: fn1, idepth: 4, %5, %39
%20 = CallEnd: idepth: 5, %19
  %21 = Mem
  %22 = Ret
  %23 = Load: %21, %4
  %38 = ImmBinOp: imm: -2, op: addi64, %23
  %26 = Call: id: fn1, idepth: 6, %21, %38, %23
%27 = CallEnd: idepth: 7, %26
  %28 = Mem
  %29 = Ret
  %30 = BinOp: +, %22, %29
  %31 = Store: %28, %4, %30
  %33 = Jmp: idepth: 8
%34 = Region: idepth: 2, %32, %33
  %35 = Phi: %13, %31
  %37 = Return: idepth: 0, %35, %36

======== REGISTER SELECTION ========
{ 1, 2, 3, 1, 2, 3, 1, 2, 4, 1, 1, 2, 1, 1, 2, 3, 3, 1, 1, 3, 2, 1, 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
         st $31, $254, -40, 40
     addi64 $254, $254, -48
         cp $33, $2
     addi64 $32, $254, 0
       li64 $34, 2
         st $33, $254, 0, 8
         ld $33, $254, 0, 8
       jgtu $33, $34, :1
       li64 $33, 1
         ld $35, $254, 0, 8
         st $33, $254, 0, 8
        jmp :2
1:   addi64 $33, $33, -1
         cp $2, $33
        jal $31, $0, :fib
         cp $33, $1
         ld $34, $254, 0, 8
     addi64 $34, $34, -2
         cp $2, $34
        jal $31, $0, :fib
         cp $34, $1
      add64 $33, $33, $34
         st $33, $254, 0, 8
2:       cp $1, $35
     addi64 $254, $254, 48
         ld $31, $254, -40, 40
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
      st $31=44, $254=10224, -40, 40
  addi64 $254=10224, $254, -48
      cp $33=0, $2=3
  addi64 $32=3, $254=10176, 0
    li64 $34=0, 2
      st $33=3, $254=10176, 0, 8
      ld $33=3, $254=10176, 0, 8
    jgtu $33=3, $34=2, 46
  addi64 $33=3, $33, -1
      cp $2=3, $33=2
     jal $31=44, $0=0, -134
      st $31=216, $254=10176, -40, 40
  addi64 $254=10176, $254, -48
      cp $33=2, $2=2
  addi64 $32=10176, $254=10128, 0
    li64 $34=2, 2
      st $33=2, $254=10128, 0, 8
      ld $33=2, $254=10128, 0, 8
    jgtu $33=2, $34=2, 46
    li64 $33=2, 1
      ld $35=0, $254=10128, 0, 8
      st $33=1, $254=10128, 0, 8
     jmp 83
      cp $1=0, $35=2
  addi64 $254=10128, $254, 48
      ld $31=216, $254=10176, -40, 40
    jala $0=0, $31=216, 0
      cp $33=2, $1=2
      ld $34=2, $254=10176, 0, 8
  addi64 $34=3, $34, -2
      cp $2=2, $34=1
     jal $31=216, $0=0, -171
      st $31=253, $254=10176, -40, 40
  addi64 $254=10176, $254, -48
      cp $33=2, $2=1
  addi64 $32=10176, $254=10128, 0
    li64 $34=1, 2
      st $33=1, $254=10128, 0, 8
      ld $33=1, $254=10128, 0, 8
    jgtu $33=1, $34=2, 46
    li64 $33=1, 1
      ld $35=0, $254=10128, 0, 8
      st $33=1, $254=10128, 0, 8
     jmp 83
      cp $1=2, $35=1
  addi64 $254=10128, $254, 48
      ld $31=253, $254=10176, -40, 40
    jala $0=0, $31=253, 0
      cp $34=1, $1=1
   add64 $33=2, $33, $34=1
      st $33=3, $254=10176, 0, 8
      cp $1=1, $35=0
  addi64 $254=10176, $254, 48
      ld $31=253, $254=10224, -40, 40
    jala $0=0, $31=44, 0
      cp $32=3, $1=0
      cp $1=0, $32=0
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx