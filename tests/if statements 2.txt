======== SOURCE ========
fn(): uint {
    return fib(3)
}
======== UNSCHEDULED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== OPTIMIZED SON ========
%0 = Start: idepth: 0 [, %1, %2]
%3 = CInt: 3 [, %4]
%2 = Mem: %0 [, %4]
%1 = Entry: idepth: 0, %0 [, %4]
%4 = Call: id: fn1, idepth: 0, %1, %2, %3 [, %5]
%7 = Ret: %5 [, %8]
%6 = Mem: %5 [, %8]
%5 = CallEnd: idepth: 0, %4 [, %6, %7, %8]
%8 = Return: idepth: 0, %5, %6, %7 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 0, %0
  %3 = CInt: 3
  %4 = Call: id: fn1, idepth: 0, %2, %3
%5 = CallEnd: idepth: 0, %4
  %6 = Mem
  %7 = Ret
  %8 = Return: idepth: 0, %6, %7

======== REGISTER SELECTION ========
{ 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(x: uint): uint {
    if x <= 2 {
        x = 1
    } else {
        x = fib(x - 1) + fib(x - 2)
    }
    return x
}
======== UNSCHEDULED SON ========
%7 = CInt: 2 [, %8, %20]
%16 = CallEnd: idepth: 0, %15 [, %17, %18, %21]
%13 = Else: idepth: 0, %9 [, %15]
%20 = BinOp: -, %19, %7 [, %21]
%17 = Mem: %16 [, %19, %21]
%8 = BinOp: <=, %6, %7 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %3]
%18 = Ret: %16 [, %25]
%14 = BinOp: -, %6, %11 [, %15]
%15 = Call: id: fn1, idepth: 0, %13, %5, %14 [, %16]
%3 = Arg: 0, %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5, %9]
%24 = Ret: %22 [, %25]
%21 = Call: id: fn1, idepth: 0, %16, %17, %20 [, %22]
%9 = If: swapped: false, idepth: 0, %1, %8 [, %10, %13]
%19 = Load: %17, %4 [, %20]
%6 = Load: %5, %4 [, %8, %14]
%2 = Mem: %0 [, %4, %5]
%25 = BinOp: +, %18, %24 [, %26]
%23 = Mem: %22 [, %26]
%11 = CInt: 1 [, %12, %14]
%5 = Store: %1, %2, %4, %3 [, %6, %12, %15]
%22 = CallEnd: idepth: 0, %21 [, %23, %24, %26, %28]
%10 = Then: idepth: 0, %9 [, %12, %27]
%4 = Local: 8, %2 [, %5, %6, %12, %19, %26, %31]
%26 = Store: %22, %23, %4, %25 [, %30]
%12 = Store: %10, %5, %4, %11 [, %30]
%28 = Jmp: idepth: 0, %22 [, %29]
%27 = Jmp: idepth: 0, %10 [, %29]
%31 = Load: %30, %4 [, %32]
%30 = Phi: %29, %12, %26 [, %31, %32]
%29 = Region: idepth: 0, %27, %28 [, %30, %32]
%32 = Return: idepth: 0, %29, %30, %31 []

======== OPTIMIZED SON ========
%7 = CInt: 2 [, %35]
%16 = CallEnd: idepth: 0, %15 [, %17, %18, %21]
%13 = Else: idepth: 0, %9 [, %15]
%33 = ImmBinOp: imm: -2, op: addi64, %19 [, %21]
%17 = Mem: %16 [, %19, %21]
%34 = ImmBinOp: imm: -1, op: addi64, %6 [, %15]
%35 = CondOp: op: jgtu, %6, %7 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %3]
%18 = Ret: %16 [, %25]
%15 = Call: id: fn1, idepth: 0, %13, %5, %34 [, %16]
%3 = Arg: 0, %0 [, %5]
%1 = Entry: idepth: 0, %0 [, %5, %9]
%24 = Ret: %22 [, %25]
%21 = Call: id: fn1, idepth: 0, %16, %17, %33 [, %22]
%9 = If: swapped: true, idepth: 0, %1, %35 [, %10, %13]
%19 = Load: %17, %4 [, %33]
%6 = Load: %5, %4 [, %35, %34]
%2 = Mem: %0 [, %4, %5]
%25 = BinOp: +, %18, %24 [, %26]
%23 = Mem: %22 [, %26]
%11 = CInt: 1 [, %12]
%5 = Store: %1, %2, %4, %3 [, %6, %12, %15]
%22 = CallEnd: idepth: 0, %21 [, %23, %24, %26, %28]
%10 = Then: idepth: 0, %9 [, %12, %27]
%4 = Local: 8, %2 [, %5, %6, %12, %19, %26, %31]
%26 = Store: %22, %23, %4, %25 [, %30]
%12 = Store: %10, %5, %4, %11 [, %30]
%28 = Jmp: idepth: 0, %22 [, %29]
%27 = Jmp: idepth: 0, %10 [, %29]
%31 = Load: %30, %4 [, %32]
%30 = Phi: %29, %12, %26 [, %31, %32]
%29 = Region: idepth: 0, %27, %28 [, %30, %32]
%32 = Return: idepth: 0, %29, %30, %31 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 8, %2
  %3 = Arg: 0
  %7 = CInt: 2
  %5 = Store: %2, %4, %3
  %6 = Load: %5, %4
  %35 = CondOp: op: jgtu, %6, %7
  %9 = If: swapped: true, idepth: 2, %35
%10 = Then: idepth: 3, %9
  %11 = CInt: 1
  %31 = Load: %30, %4
  %12 = Store: %5, %4, %11
  %27 = Jmp: idepth: 4
%13 = Else: idepth: 3, %9
  %34 = ImmBinOp: imm: -1, op: addi64, %6
  %15 = Call: id: fn1, idepth: 4, %5, %34
%16 = CallEnd: idepth: 5, %15
  %17 = Mem
  %18 = Ret
  %19 = Load: %17, %4
  %33 = ImmBinOp: imm: -2, op: addi64, %19
  %21 = Call: id: fn1, idepth: 6, %17, %33, %19
%22 = CallEnd: idepth: 7, %21
  %23 = Mem
  %24 = Ret
  %25 = BinOp: +, %18, %24
  %26 = Store: %23, %4, %25
  %28 = Jmp: idepth: 8
%29 = Region: idepth: 2, %27, %28
  %30 = Phi: %12, %26
  %32 = Return: idepth: 0, %30, %31

======== REGISTER SELECTION ========
{ 1, 2, 3, 1, 2, 3, 1, 2, 4, 1, 1, 2, 1, 1, 2, 3, 3, 1, 1, 3, 2, 1, 1, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -16, 16
     addi64 $254, $254, -16
       li64 $32, 3
         cp $2, $32
        jal $31, $0, :fib
         cp $32, $1
         cp $1, $32
     addi64 $254, $254, 16
         ld $31, $254, -16, 16
         tx
fib:
         st $31, $254, -40, 40
     addi64 $254, $254, -48
         cp $33, $2
     addi64 $32, $254, 0
       li64 $34, 2
         st $33, $254, 0, 8
         ld $33, $254, 0, 8
       jgtu $33, $34, :1
       li64 $33, 1
         ld $35, $254, 0, 8
         st $33, $254, 0, 8
        jmp :2
1:   addi64 $33, $33, -1
         cp $2, $33
        jal $31, $0, :fib
         cp $33, $1
         ld $34, $254, 0, 8
     addi64 $34, $34, -2
         cp $2, $34
        jal $31, $0, :fib
         cp $34, $1
      add64 $33, $33, $34
         st $33, $254, 0, 8
2:       cp $1, $35
     addi64 $254, $254, 48
         ld $31, $254, -40, 40
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -16, 16
  addi64 $254=10240, $254, -16
    li64 $32=0, 3
      cp $2=0, $32=3
     jal $31=0, $0=0, 38
      st $31=44, $254=10224, -40, 40
  addi64 $254=10224, $254, -48
      cp $33=0, $2=3
  addi64 $32=3, $254=10176, 0
    li64 $34=0, 2
      st $33=3, $254=10176, 0, 8
      ld $33=3, $254=10176, 0, 8
    jgtu $33=3, $34=2, 46
  addi64 $33=3, $33, -1
      cp $2=3, $33=2
     jal $31=44, $0=0, -134
      st $31=216, $254=10176, -40, 40
  addi64 $254=10176, $254, -48
      cp $33=2, $2=2
  addi64 $32=10176, $254=10128, 0
    li64 $34=2, 2
      st $33=2, $254=10128, 0, 8
      ld $33=2, $254=10128, 0, 8
    jgtu $33=2, $34=2, 46
    li64 $33=2, 1
      ld $35=0, $254=10128, 0, 8
      st $33=1, $254=10128, 0, 8
     jmp 83
      cp $1=0, $35=2
  addi64 $254=10128, $254, 48
      ld $31=216, $254=10176, -40, 40
    jala $0=0, $31=216, 0
      cp $33=2, $1=2
      ld $34=2, $254=10176, 0, 8
  addi64 $34=3, $34, -2
      cp $2=2, $34=1
     jal $31=216, $0=0, -171
      st $31=253, $254=10176, -40, 40
  addi64 $254=10176, $254, -48
      cp $33=2, $2=1
  addi64 $32=10176, $254=10128, 0
    li64 $34=1, 2
      st $33=1, $254=10128, 0, 8
      ld $33=1, $254=10128, 0, 8
    jgtu $33=1, $34=2, 46
    li64 $33=1, 1
      ld $35=0, $254=10128, 0, 8
      st $33=1, $254=10128, 0, 8
     jmp 83
      cp $1=2, $35=1
  addi64 $254=10128, $254, 48
      ld $31=253, $254=10176, -40, 40
    jala $0=0, $31=253, 0
      cp $34=1, $1=1
   add64 $33=2, $33, $34=1
      st $33=3, $254=10176, 0, 8
      cp $1=1, $35=0
  addi64 $254=10176, $254, 48
      ld $31=253, $254=10224, -40, 40
    jala $0=0, $31=44, 0
      cp $32=3, $1=0
      cp $1=0, $32=0
  addi64 $254=10224, $254, 16
      ld $31=44, $254=10240, -16, 16
      tx