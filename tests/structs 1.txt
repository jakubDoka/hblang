======== SOURCE ========
fn(): int {
	finst := Ty2.{ty: Ty.{a: 4, b: 1}, c: 3}
	inst := odher_pass(finst)
	if inst.c != 3 {
		return 0
	}
	if sum(inst.ty) != 0 {
		return 100
	}
	return pass(&inst.ty)
}
======== UNSCHEDULED SON ========
%9 = CInt: 1 [, %10]
%5 = CInt: 4 [, %6]
%8 = BinOp: iadd, %4, %7 [, %10]
%12 = BinOp: iadd, %4, %11 [, %14]
%10 = Store: %1, %6, %8, %9 [, %14]
%13 = CInt: 3 [, %14, %24]
%7 = CInt: 8 [, %8, %32]
%11 = CInt: 16 [, %12, %22]
%6 = Store: %1, %2, %4, %5 [, %10]
%0 = Start: idepth: 0 [, %1, %2]
%4 = Local: 24, %2 [, %6, %8, %12, %17]
%14 = Store: %1, %10, %12, %13 [, %17]
%1 = Entry: idepth: 0, %0 [, %17, %6, %10, %14]
%37 = Ret: 0, %35 [, %38]
%40 = If: idepth: 0, %35, %38 [, %41, %48]
%30 = Then: idepth: 0, %26 [, %34]
%24 = BinOp: ne, %23, %13 [, %26]
%32 = BinOp: iadd, %15, %7 [, %33]
%22 = BinOp: iadd, %15, %11 [, %23]
%2 = Mem: %0 [, %6, %4, %15, %16]
%26 = If: idepth: 0, %18, %24 [, %27, %30]
%17 = Call: id: 1, idepth: 0, %1, %14, %16, %4 [, %18]
%48 = Then: idepth: 0, %40 [, %49]
%41 = Then: idepth: 0, %40 [, %44]
%27 = Then: idepth: 0, %26 [, %43]
%38 = BinOp: ne, %37, %28 [, %40]
%35 = CallEnd: idepth: 0, %34 [, %40, %36, %37]
%33 = Load: %21, %32 [, %34]
%31 = Load: %21, %15 [, %34]
%34 = Call: id: 2, idepth: 0, %30, %21, %31, %33 [, %35]
%23 = Load: %21, %22 [, %24]
%20 = CInt: 24 [, %21]
%16 = Local: 24, %2 [, %17, %21]
%15 = Local: 24, %2 [, %21, %49, %22, %31, %32]
%19 = Mem: %18 [, %21]
%18 = CallEnd: idepth: 0, %17 [, %26, %19, %21]
%49 = Call: id: 3, idepth: 0, %48, %36, %15 [, %50]
%44 = Jmp: idepth: 0, %41 [, %45]
%43 = Jmp: idepth: 0, %27 [, %45]
%42 = CInt: 100 [, %47]
%28 = CInt: 0 [, %47, %38]
%36 = Mem: %35 [, %46, %49]
%21 = MemCpy: %18, %19, %15, %16, %20 [, %46, %23, %34, %31, %33]
%50 = CallEnd: idepth: 0, %49 [, %54, %51, %52]
%45 = Region: idepth: 0, %43, %44 [, %53, %46, %47]
%52 = Ret: 0, %50 [, %57]
%47 = Phi: %45, %28, %42 [, %57]
%51 = Mem: %50 [, %56]
%46 = Phi: %45, %21, %36 [, %56]
%54 = Jmp: idepth: 0, %50 [, %55]
%53 = Jmp: idepth: 0, %45 [, %55]
%57 = Phi: %55, %47, %52 [, %29]
%56 = Phi: %55, %46, %51 [, %29]
%55 = Region: idepth: 0, %53, %54 [, %29, %56, %57]
%29 = Return: idepth: 0, %55, %56, %57 []

======== OPTIMIZED SON ========
%9 = CInt: 1 [, %60]
%5 = CInt: 4 [, %6]
%60 = St: offset: 8, %1, %6, %4, %9 [, %61]
%6 = Store: %1, %2, %4, %5 [, %60]
%0 = Start: idepth: 0 [, %1, %2]
%13 = CInt: 3 [, %61, %65]
%4 = Local: 24, %2 [, %6, %60, %61, %17]
%61 = St: offset: 16, %1, %60, %4, %13 [, %17]
%1 = Entry: idepth: 0, %0 [, %6, %60, %61, %17]
%37 = Ret: 0, %35 [, %62]
%30 = Then: idepth: 0, %65 [, %34]
%2 = Mem: %0 [, %6, %4, %15, %16]
%65 = IfOp: swapped: false, op: jeq, idepth: 0, %18, %67, %13 [, %27, %30]
%17 = Call: id: 1, idepth: 0, %1, %61, %16, %4 [, %18]
%48 = Then: idepth: 0, %62 [, %49]
%41 = Then: idepth: 0, %62 [, %44]
%27 = Then: idepth: 0, %65 [, %43]
%62 = IfOp: swapped: false, op: jeq, idepth: 0, %35, %37, %28 [, %41, %48]
%35 = CallEnd: idepth: 0, %34 [, %36, %37, %62]
%66 = Ld: offset: 8, %68, %15 [, %34]
%31 = Load: %68, %15 [, %34]
%34 = Call: id: 2, idepth: 0, %30, %68, %31, %66 [, %35]
%67 = Ld: offset: 16, %68, %15 [, %65]
%16 = Local: 24, %2 [, %17, %68]
%15 = Local: 24, %2 [, %68, %49, %67, %31, %66]
%19 = Mem: %18 [, %68]
%18 = CallEnd: idepth: 0, %17 [, %19, %68, %65]
%49 = Call: id: 3, idepth: 0, %48, %36, %15 [, %50]
%44 = Jmp: idepth: 0, %41 [, %45]
%43 = Jmp: idepth: 0, %27 [, %45]
%42 = CInt: 100 [, %47]
%28 = CInt: 0 [, %47, %62]
%36 = Mem: %35 [, %46, %49]
%68 = BlockCpy: size: 24, %18, %19, %15, %16 [, %46, %67, %34, %31, %66]
%50 = CallEnd: idepth: 0, %49 [, %51, %52, %54]
%45 = Region: idepth: 0, %43, %44 [, %46, %47, %53]
%52 = Ret: 0, %50 [, %57]
%47 = Phi: %45, %28, %42 [, %57]
%51 = Mem: %50 [, %56]
%46 = Phi: %45, %68, %36 [, %56]
%54 = Jmp: idepth: 0, %50 [, %55]
%53 = Jmp: idepth: 0, %45 [, %55]
%57 = Phi: %55, %47, %52 [, %29]
%56 = Phi: %55, %46, %51 [, %29]
%55 = Region: idepth: 0, %53, %54 [, %56, %57, %29]
%29 = Return: idepth: 0, %55, %56, %57 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = CInt: 4
  %9 = CInt: 1
  %13 = CInt: 3
  %4 = Local: 24, %2
  %6 = Store: %2, %4, %5
  %60 = St: offset: 8, %6, %4, %9
  %61 = St: offset: 16, %60, %4, %13
  %16 = Local: 24, %2
  %17 = Call: id: 1, idepth: 2, %61, %16, %4
%18 = CallEnd: idepth: 3, %17
  %19 = Mem
  %28 = CInt: 0
  %15 = Local: 24, %2
  %68 = BlockCpy: size: 24, %19, %15, %16
  %31 = Load: %68, %15
  %66 = Ld: offset: 8, %68, %15
  %67 = Ld: offset: 16, %68, %15
  %65 = IfOp: swapped: false, op: jeq, idepth: 4, %67, %13
%27 = Then: idepth: 5, %65
  %69 = MachMove: %28
  %43 = Jmp: idepth: 6
%30 = Then: idepth: 5, %65
  %34 = Call: id: 2, idepth: 6, %68, %31, %66
%35 = CallEnd: idepth: 7, %34
  %36 = Mem
  %37 = Ret: 0
  %62 = IfOp: swapped: false, op: jeq, idepth: 8, %37, %28
%41 = Then: idepth: 9, %62
  %42 = CInt: 100
  %70 = MachMove: %42
  %44 = Jmp: idepth: 10
%45 = Region: idepth: 7, %43, %44
  %46 = Phi: %68, %36
  %71 = Phi: %69, %70
  %72 = MachMove: %71
  %53 = Jmp: idepth: 8
%48 = Then: idepth: 9, %62
  %49 = Call: id: 3, idepth: 10, %36, %15
%50 = CallEnd: idepth: 11, %49
  %51 = Mem
  %52 = Ret: 0
  %73 = MachMove: %52
  %54 = Jmp: idepth: 12
%55 = Region: idepth: 0, %53, %54
  %56 = Phi: %46, %51
  %74 = Phi: %72, %73
  %29 = Return: idepth: 0, %56, %74

======== SOURCE ========
fn(t: ^Ty): int {
	t.a -= 1
	t.a += 1
	return t.a - t.b
}
======== UNSCHEDULED SON ========
%17 = CInt: 8 [, %18]
%18 = BinOp: iadd, %16, %17 [, %20]
%8 = CInt: 1 [, %10, %14]
%13 = Load: %11, %12 [, %14]
%10 = BinOp: isub, %9, %8 [, %11]
%9 = Load: %6, %7 [, %10]
%7 = Load: %6, %4 [, %9, %11]
%4 = Local: 8, %2 [, %6, %16, %7, %12]
%5 = Arg: 0, %0 [, %6]
%2 = Mem: %0 [, %6, %4]
%20 = Load: %15, %18 [, %21]
%19 = Load: %15, %16 [, %21]
%16 = Load: %15, %4 [, %18, %19]
%14 = BinOp: iadd, %13, %8 [, %15]
%12 = Load: %11, %4 [, %13, %15]
%11 = Store: %1, %6, %7, %10 [, %15, %12, %13]
%6 = Store: %1, %2, %4, %5 [, %11, %7, %9]
%0 = Start: idepth: 0 [, %1, %2, %5]
%21 = BinOp: isub, %19, %20 [, %22]
%15 = Store: %1, %11, %12, %14 [, %22, %16, %19, %20]
%1 = Entry: idepth: 0, %0 [, %22, %6, %11, %15]
%22 = Return: idepth: 0, %1, %15, %21 []

======== OPTIMIZED SON ========
%9 = Load: %2, %5 [, %24]
%13 = Load: %11, %5 [, %26]
%24 = ImmBinOp: imm: -1, op: addi64, %9 [, %11]
%2 = Mem: %0 [, %9, %11]
%19 = Load: %15, %5 [, %21]
%25 = Ld: offset: 8, %15, %5 [, %21]
%26 = ImmBinOp: imm: 1, op: addi64, %13 [, %15]
%5 = Arg: 0, %0 [, %19, %9, %11, %13, %15, %25]
%11 = Store: %1, %2, %5, %24 [, %15, %13]
%0 = Start: idepth: 0 [, %1, %2, %5]
%21 = BinOp: isub, %19, %25 [, %22]
%15 = Store: %1, %11, %5, %26 [, %22, %25, %19]
%1 = Entry: idepth: 0, %0 [, %22, %11, %15]
%22 = Return: idepth: 0, %1, %15, %21 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = Arg: 0
  %9 = Load: %2, %5
  %24 = ImmBinOp: imm: -1, op: addi64, %9
  %11 = Store: %2, %5, %24, %9
  %13 = Load: %11, %5
  %26 = ImmBinOp: imm: 1, op: addi64, %13
  %15 = Store: %11, %5, %26, %13
  %19 = Load: %15, %5
  %25 = Ld: offset: 8, %15, %5
  %21 = BinOp: isub, %19, %25
  %22 = Return: idepth: 0, %15, %21

======== SOURCE ========
fn(t: Ty): int {
	t.a -= 2
	t.b += 1
	return t.a - t.b
}
======== UNSCHEDULED SON ========
%11 = CInt: 2 [, %13]
%15 = CInt: 1 [, %17]
%8 = CInt: 8 [, %9]
%16 = Load: %14, %9 [, %17]
%13 = BinOp: isub, %12, %11 [, %14]
%12 = Load: %10, %4 [, %13]
%4 = Local: 16, %2 [, %6, %9, %19, %12, %14]
%7 = Arg: 1, %0 [, %10]
%5 = Arg: 0, %0 [, %6]
%2 = Mem: %0 [, %6, %4]
%20 = Load: %18, %9 [, %21]
%19 = Load: %18, %4 [, %21]
%17 = BinOp: iadd, %16, %15 [, %18]
%9 = BinOp: iadd, %4, %8 [, %10, %16, %18, %20]
%14 = Store: %1, %10, %4, %13 [, %18, %16]
%10 = Store: %1, %6, %9, %7 [, %14, %12]
%6 = Store: %1, %2, %4, %5 [, %10]
%0 = Start: idepth: 0 [, %1, %2, %5, %7]
%21 = BinOp: isub, %19, %20 [, %22]
%18 = Store: %1, %14, %9, %17 [, %22, %19, %20]
%1 = Entry: idepth: 0, %0 [, %22, %6, %10, %14, %18]
%22 = Return: idepth: 0, %1, %18, %21 []

======== OPTIMIZED SON ========
%27 = Ld: offset: 8, %14, %4 [, %24]
%23 = ImmBinOp: imm: -2, op: addi64, %12 [, %14]
%12 = Load: %28, %4 [, %23]
%7 = Arg: 1, %0 [, %28]
%5 = Arg: 0, %0 [, %6]
%2 = Mem: %0 [, %6, %4]
%26 = Ld: offset: 8, %29, %4 [, %21]
%19 = Load: %29, %4 [, %21]
%24 = ImmBinOp: imm: 1, op: addi64, %27 [, %29]
%4 = Local: 16, %2 [, %6, %29, %19, %12, %14, %26, %27, %28]
%14 = Store: %1, %28, %4, %23 [, %29, %27]
%28 = St: offset: 8, %1, %6, %4, %7 [, %14, %12]
%6 = Store: %1, %2, %4, %5 [, %28]
%0 = Start: idepth: 0 [, %1, %2, %5, %7]
%21 = BinOp: isub, %19, %26 [, %22]
%29 = St: offset: 8, %1, %14, %4, %24 [, %22, %19, %26]
%1 = Entry: idepth: 0, %0 [, %6, %28, %14, %29, %22]
%22 = Return: idepth: 0, %1, %29, %21 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = Arg: 0
  %7 = Arg: 1
  %4 = Local: 16, %2
  %6 = Store: %2, %4, %5
  %28 = St: offset: 8, %6, %4, %7
  %12 = Load: %28, %4
  %23 = ImmBinOp: imm: -2, op: addi64, %12
  %14 = Store: %28, %4, %23, %12
  %27 = Ld: offset: 8, %14, %4
  %24 = ImmBinOp: imm: 1, op: addi64, %27
  %29 = St: offset: 8, %14, %4, %24, %27
  %19 = Load: %29, %4
  %26 = Ld: offset: 8, %29, %4
  %21 = BinOp: isub, %19, %26
  %22 = Return: idepth: 0, %29, %21

======== SOURCE ========
fn(t: Ty2): Ty2 {
	return t
}
======== UNSCHEDULED SON ========
%6 = CInt: 24 [, %7]
%5 = Arg: 1, %0 [, %7]
%4 = Arg: 0, %0 [, %7]
%2 = Mem: %0 [, %7]
%0 = Start: idepth: 0 [, %1, %2, %4, %5]
%7 = MemCpy: %1, %2, %4, %5, %6 [, %8]
%1 = Entry: idepth: 0, %0 [, %8, %7]
%8 = Return: idepth: 0, %1, %7 []

======== OPTIMIZED SON ========
%5 = Arg: 1, %0 [, %9]
%4 = Arg: 0, %0 [, %9]
%2 = Mem: %0 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %4, %5]
%9 = BlockCpy: size: 24, %1, %2, %4, %5 [, %8]
%1 = Entry: idepth: 0, %0 [, %9, %8]
%8 = Return: idepth: 0, %1, %9 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Arg: 0
  %5 = Arg: 1
  %9 = BlockCpy: size: 24, %2, %4, %5
  %8 = Return: idepth: 0, %9

======== CODEGEN ========
main:
         st $31, $254, -56, 56
     addi64 $254, $254, -128
       li64 $32, 4
       li64 $33, 1
       li64 $34, 3
     addi64 $35, $254, 0
         st $32, $254, 0, 8
         st $33, $254, 8, 8
         st $34, $254, 16, 8
     addi64 $32, $254, 48
         cp $2, $32
         cp $3, $35
        jal $31, $0, :odher_pass
       li64 $33, 0
     addi64 $35, $254, 24
        bmc $32, $35, 24
         ld $32, $254, 24, 8
         ld $36, $254, 32, 8
         ld $37, $254, 40, 8
        jeq $37, $34, :1
         cp $32, $33
        jmp :2
1:       cp $2, $32
         cp $3, $36
        jal $31, $0, :sum
         cp $32, $1
        jeq $32, $33, :4
       li64 $32, 100
2:      jmp :5
4:       cp $2, $35
        jal $31, $0, :pass
         cp $32, $1
5:       cp $1, $32
     addi64 $254, $254, 128
         ld $31, $254, -56, 56
         tx
pass:
         cp $13, $2
         ld $14, $13, 0, 8
     addi64 $14, $14, -1
         st $14, $13, 0, 8
         ld $14, $13, 0, 8
     addi64 $14, $14, 1
         st $14, $13, 0, 8
         ld $14, $13, 0, 8
         ld $13, $13, 8, 8
      sub64 $13, $14, $13
         cp $1, $13
       jala $0, $31, 0
sum:
     addi64 $254, $254, -16
         cp $13, $2
         cp $14, $3
     addi64 $15, $254, 0
         st $13, $254, 0, 8
         st $14, $254, 8, 8
         ld $13, $254, 0, 8
     addi64 $13, $13, -2
         st $13, $254, 0, 8
         ld $13, $254, 8, 8
     addi64 $13, $13, 1
         st $13, $254, 8, 8
         ld $13, $254, 0, 8
         ld $14, $254, 8, 8
      sub64 $13, $13, $14
         cp $1, $13
     addi64 $254, $254, 16
       jala $0, $31, 0
odher_pass:
         cp $13, $2
         cp $14, $3
        bmc $14, $13, 24
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -56, 56
  addi64 $254=10240, $254, -128
    li64 $32=0, 4
    li64 $33=0, 1
    li64 $34=0, 3
  addi64 $35=0, $254=10112, 0
      st $32=4, $254=10112, 0, 8
      st $33=1, $254=10112, 8, 8
      st $34=3, $254=10112, 16, 8
  addi64 $32=4, $254=10112, 48
      cp $2=0, $32=10160
      cp $3=0, $35=10112
     jal $31=0, $0=0, 466
      cp $13=0, $2=10160
      cp $14=0, $3=10112
     bmc $14=10112, $13=10160, 24
    jala $0=0, $31=128, 0
    li64 $33=1, 0
  addi64 $35=10112, $254=10112, 24
     bmc $32=10160, $35=10136, 24
      ld $32=10160, $254=10112, 24, 8
      ld $36=0, $254=10112, 32, 8
      ld $37=0, $254=10112, 40, 8
     jeq $37=3, $34=3, 13
      cp $2=10160, $32=4
      cp $3=10112, $36=1
     jal $31=128, $0=0, 192
  addi64 $254=10112, $254, -16
      cp $13=10160, $2=4
      cp $14=10112, $3=1
  addi64 $15=0, $254=10096, 0
      st $13=4, $254=10096, 0, 8
      st $14=1, $254=10096, 8, 8
      ld $13=4, $254=10096, 0, 8
  addi64 $13=4, $13, -2
      st $13=2, $254=10096, 0, 8
      ld $13=2, $254=10096, 8, 8
  addi64 $13=1, $13, 1
      st $13=2, $254=10096, 8, 8
      ld $13=2, $254=10096, 0, 8
      ld $14=1, $254=10096, 8, 8
   sub64 $13=2, $13, $14=2
      cp $1=0, $13=0
  addi64 $254=10096, $254, 16
    jala $0=0, $31=219, 0
      cp $32=4, $1=0
     jeq $32=0, $33=0, 20
      cp $2=4, $35=10136
     jal $31=219, $0=0, 38
      cp $13=0, $2=10136
      ld $14=2, $13=10136, 0, 8
  addi64 $14=4, $14, -1
      st $14=3, $13=10136, 0, 8
      ld $14=3, $13=10136, 0, 8
  addi64 $14=3, $14, 1
      st $14=4, $13=10136, 0, 8
      ld $14=4, $13=10136, 0, 8
      ld $13=10136, $13, 8, 8
   sub64 $13=1, $14=4, $13
      cp $1=0, $13=3
    jala $0=0, $31=252, 0
      cp $32=0, $1=3
      cp $1=3, $32=3
  addi64 $254=10112, $254, 128
      ld $31=252, $254=10240, -56, 56
      tx