======== SOURCE ========
fn(): int {
	finst := Ty2.{ty: Ty.{a: 4, b: 1}, c: 3}
	inst := odher_pass(finst)
	if inst.c != 3 {
		return 0
	}
	if sum(inst.ty) != 0 {
		return 100
	}
	return pass(&inst.ty)
}
======== UNSCHEDULED SON ========
%8 = CInt: 1 [, %11]
%10 = BinOp: iadd, %5, %9 [, %11]
%15 = BinOp: iadd, %4, %12 [, %16]
%6 = CInt: 4 [, %7]
%13 = MemCpy: %1, %11, %4, %5, %12 [, %16]
%11 = Store: %1, %7, %10, %8 [, %13]
%14 = CInt: 3 [, %16, %29]
%16 = Store: %1, %13, %15, %14 [, %19]
%9 = CInt: 8 [, %10, %37]
%12 = CInt: 16 [, %13, %15, %27]
%17 = Local: 24, %2 [, %19, %21]
%5 = Local: 16, %2 [, %7, %10, %13]
%4 = Local: 24, %2 [, %13, %15, %19]
%7 = Store: %1, %2, %5, %6 [, %11]
%0 = Start: idepth: 0 [, %1, %2]
%21 = Load: %19, %17 [, %22]
%1 = Entry: idepth: 0, %0 [, %22, %7, %11, %13, %16, %19]
%42 = Ret: 0, %40 [, %43]
%45 = If: idepth: 0, %40, %43 [, %46, %53]
%35 = Then: idepth: 0, %31 [, %39]
%29 = BinOp: ne, %28, %14 [, %31]
%19 = MemCpy: %1, %16, %17, %4, %18 [, %22, %21]
%37 = BinOp: iadd, %25, %9 [, %38]
%27 = BinOp: iadd, %25, %12 [, %28]
%2 = Mem: %0 [, %7, %4, %5, %17, %20, %25]
%31 = If: idepth: 0, %23, %29 [, %32, %35]
%22 = Call: id: 1, idepth: 0, %1, %19, %20, %21 [, %23]
%53 = Then: idepth: 0, %45 [, %54]
%46 = Then: idepth: 0, %45 [, %49]
%32 = Then: idepth: 0, %31 [, %48]
%43 = BinOp: ne, %42, %33 [, %45]
%40 = CallEnd: idepth: 0, %39 [, %45, %41, %42]
%38 = Load: %26, %37 [, %39]
%36 = Load: %26, %25 [, %39]
%39 = Call: id: 2, idepth: 0, %35, %26, %36, %38 [, %40]
%28 = Load: %26, %27 [, %29]
%18 = CInt: 24 [, %19, %26]
%20 = Local: 24, %2 [, %22, %26]
%25 = Local: 24, %2 [, %26, %54, %27, %36, %37]
%24 = Mem: %23 [, %26]
%23 = CallEnd: idepth: 0, %22 [, %31, %24, %26]
%54 = Call: id: 3, idepth: 0, %53, %41, %25 [, %55]
%49 = Jmp: idepth: 0, %46 [, %50]
%48 = Jmp: idepth: 0, %32 [, %50]
%47 = CInt: 100 [, %52]
%33 = CInt: 0 [, %52, %43]
%41 = Mem: %40 [, %51, %54]
%26 = MemCpy: %23, %24, %25, %20, %18 [, %51, %28, %39, %36, %38]
%55 = CallEnd: idepth: 0, %54 [, %59, %56, %57]
%50 = Region: idepth: 0, %48, %49 [, %58, %51, %52]
%57 = Ret: 0, %55 [, %62]
%52 = Phi: %50, %33, %47 [, %62]
%56 = Mem: %55 [, %61]
%51 = Phi: %50, %26, %41 [, %61]
%59 = Jmp: idepth: 0, %55 [, %60]
%58 = Jmp: idepth: 0, %50 [, %60]
%62 = Phi: %60, %52, %57 [, %34]
%61 = Phi: %60, %51, %56 [, %34]
%60 = Region: idepth: 0, %58, %59 [, %34, %61, %62]
%34 = Return: idepth: 0, %60, %61, %62 []

======== OPTIMIZED SON ========
%8 = CInt: 1 [, %11]
%63 = ImmBinOp: imm: 8, op: addi64, %5 [, %11]
%64 = ImmBinOp: imm: 16, op: addi64, %4 [, %16]
%65 = BlockCpy: size: 16, , %11, %4, %5 [, %16]
%11 = Store: %1, %7, %63, %8 [, %65]
%6 = CInt: 4 [, %7]
%14 = CInt: 3 [, %16, %69]
%16 = Store: %1, %65, %64, %14 [, %22]
%1 = Entry: idepth: 0, %0 [, %7, %11, %22, %16]
%5 = Local: 16, %2 [, %7, %63, %65]
%4 = Local: 24, %2 [, %65, %64, %22]
%7 = Store: %1, %2, %5, %6 [, %11]
%0 = Start: idepth: 0 [, %1, %2]
%42 = Ret: 0, %40 [, %66]
%35 = Then: idepth: 0, %69 [, %39]
%69 = IfOp: swapped: false, op: jeq, idepth: 0, %23, %28, %14 [, %32, %35]
%22 = Call: id: 1, idepth: 0, %1, %16, %20, %4 [, %23]
%67 = ImmBinOp: imm: 8, op: addi64, %25 [, %38]
%68 = ImmBinOp: imm: 16, op: addi64, %25 [, %28]
%2 = Mem: %0 [, %7, %4, %5, %25, %20]
%23 = CallEnd: idepth: 0, %22 [, %24, %69]
%53 = Then: idepth: 0, %66 [, %54]
%46 = Then: idepth: 0, %66 [, %49]
%32 = Then: idepth: 0, %69 [, %48]
%66 = IfOp: swapped: false, op: jeq, idepth: 0, %40, %42, %33 [, %46, %53]
%40 = CallEnd: idepth: 0, %39 [, %41, %42, %66]
%38 = Load: %70, %67 [, %39]
%36 = Load: %70, %25 [, %39]
%39 = Call: id: 2, idepth: 0, %35, %70, %36, %38 [, %40]
%28 = Load: %70, %68 [, %69]
%20 = Local: 24, %2 [, %22, %70]
%25 = Local: 24, %2 [, %70, %54, %68, %36, %67]
%24 = Mem: %23 [, %70]
%54 = Call: id: 3, idepth: 0, %53, %41, %25 [, %55]
%49 = Jmp: idepth: 0, %46 [, %50]
%48 = Jmp: idepth: 0, %32 [, %50]
%47 = CInt: 100 [, %52]
%33 = CInt: 0 [, %52, %66]
%41 = Mem: %40 [, %51, %54]
%70 = BlockCpy: size: 24, , %24, %25, %20 [, %51, %28, %39, %36, %38]
%55 = CallEnd: idepth: 0, %54 [, %56, %57, %59]
%50 = Region: idepth: 0, %48, %49 [, %51, %52, %58]
%57 = Ret: 0, %55 [, %62]
%52 = Phi: %50, %33, %47 [, %62]
%56 = Mem: %55 [, %61]
%51 = Phi: %50, %70, %41 [, %61]
%59 = Jmp: idepth: 0, %55 [, %60]
%58 = Jmp: idepth: 0, %50 [, %60]
%62 = Phi: %60, %52, %57 [, %34]
%61 = Phi: %60, %51, %56 [, %34]
%60 = Region: idepth: 0, %58, %59 [, %61, %62, %34]
%34 = Return: idepth: 0, %60, %61, %62 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = Local: 16, %2
  %6 = CInt: 4
  %8 = CInt: 1
  %4 = Local: 24, %2
  %14 = CInt: 3
  %20 = Local: 24, %2
  %63 = ImmBinOp: imm: 8, op: addi64, %5
  %7 = Store: %2, %5, %6
  %64 = ImmBinOp: imm: 16, op: addi64, %4
  %11 = Store: %7, %63, %8
  %65 = BlockCpy: size: 16, , %11, %4, %5
  %16 = Store: %65, %64, %14
  %22 = Call: id: 1, idepth: 2, %16, %20, %4
%23 = CallEnd: idepth: 3, %22
  %24 = Mem
  %25 = Local: 24, %2
  %33 = CInt: 0
  %70 = BlockCpy: size: 24, , %24, %25, %20
  %67 = ImmBinOp: imm: 8, op: addi64, %25
  %68 = ImmBinOp: imm: 16, op: addi64, %25
  %36 = Load: %70, %25
  %38 = Load: %70, %67
  %28 = Load: %70, %68
  %69 = IfOp: swapped: false, op: jeq, idepth: 4, %28, %14
%32 = Then: idepth: 5, %69
  %71 = MachMove: %33
  %48 = Jmp: idepth: 6
%35 = Then: idepth: 5, %69
  %39 = Call: id: 2, idepth: 6, %70, %36, %38
%40 = CallEnd: idepth: 7, %39
  %41 = Mem
  %42 = Ret: 0
  %66 = IfOp: swapped: false, op: jeq, idepth: 8, %42, %33
%46 = Then: idepth: 9, %66
  %47 = CInt: 100
  %72 = MachMove: %47
  %49 = Jmp: idepth: 10
%50 = Region: idepth: 7, %48, %49
  %51 = Phi: %70, %41
  %73 = Phi: %71, %72
  %74 = MachMove: %73
  %58 = Jmp: idepth: 8
%53 = Then: idepth: 9, %66
  %54 = Call: id: 3, idepth: 10, %41, %25
%55 = CallEnd: idepth: 11, %54
  %56 = Mem
  %57 = Ret: 0
  %75 = MachMove: %57
  %59 = Jmp: idepth: 12
%60 = Region: idepth: 0, %58, %59
  %61 = Phi: %51, %56
  %76 = Phi: %74, %75
  %34 = Return: idepth: 0, %61, %76

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 5, 6, 7, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 3, 4, 6, 3, 4, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }

======== SOURCE ========
fn(t: ^Ty): int {
	t.a -= 1
	t.a += 1
	return t.a - t.b
}
======== UNSCHEDULED SON ========
%17 = CInt: 8 [, %18]
%18 = BinOp: iadd, %16, %17 [, %20]
%8 = CInt: 1 [, %10, %14]
%13 = Load: %11, %12 [, %14]
%10 = BinOp: isub, %9, %8 [, %11]
%9 = Load: %6, %7 [, %10]
%7 = Load: %6, %4 [, %9, %11]
%4 = Local: 8, %2 [, %6, %16, %7, %12]
%5 = Arg: 0, %0 [, %6]
%2 = Mem: %0 [, %6, %4]
%20 = Load: %15, %18 [, %21]
%19 = Load: %15, %16 [, %21]
%16 = Load: %15, %4 [, %18, %19]
%14 = BinOp: iadd, %13, %8 [, %15]
%12 = Load: %11, %4 [, %13, %15]
%11 = Store: %1, %6, %7, %10 [, %15, %12, %13]
%6 = Store: %1, %2, %4, %5 [, %11, %7, %9]
%0 = Start: idepth: 0 [, %1, %2, %5]
%21 = BinOp: isub, %19, %20 [, %22]
%15 = Store: %1, %11, %12, %14 [, %22, %16, %19, %20]
%1 = Entry: idepth: 0, %0 [, %22, %6, %11, %15]
%22 = Return: idepth: 0, %1, %15, %21 []

======== OPTIMIZED SON ========
%23 = ImmBinOp: imm: 8, op: addi64, %5 [, %20]
%9 = Load: %2, %5 [, %24]
%13 = Load: %11, %5 [, %25]
%24 = ImmBinOp: imm: -1, op: addi64, %9 [, %11]
%2 = Mem: %0 [, %9, %11]
%19 = Load: %15, %5 [, %21]
%20 = Load: %15, %23 [, %21]
%25 = ImmBinOp: imm: 1, op: addi64, %13 [, %15]
%5 = Arg: 0, %0 [, %19, %9, %11, %13, %15, %23]
%11 = Store: %1, %2, %5, %24 [, %15, %13]
%0 = Start: idepth: 0 [, %1, %2, %5]
%21 = BinOp: isub, %19, %20 [, %22]
%15 = Store: %1, %11, %5, %25 [, %22, %20, %19]
%1 = Entry: idepth: 0, %0 [, %22, %11, %15]
%22 = Return: idepth: 0, %1, %15, %21 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %5 = Arg: 0
  %9 = Load: %2, %5
  %23 = ImmBinOp: imm: 8, op: addi64, %5
  %24 = ImmBinOp: imm: -1, op: addi64, %9
  %11 = Store: %2, %5, %24, %9
  %13 = Load: %11, %5
  %25 = ImmBinOp: imm: 1, op: addi64, %13
  %15 = Store: %11, %5, %25, %13
  %19 = Load: %15, %5
  %20 = Load: %15, %23
  %21 = BinOp: isub, %19, %20
  %22 = Return: idepth: 0, %15, %21

======== REGISTER SELECTION ========
{ 1, 2, 3, 2, 1, 2, 2, 1, 1, 2, 1, 1 }

======== SOURCE ========
fn(t: Ty): int {
	t.a -= 2
	t.b += 1
	return t.a - t.b
}
======== UNSCHEDULED SON ========
%11 = CInt: 2 [, %13]
%15 = CInt: 1 [, %17]
%8 = CInt: 8 [, %9]
%16 = Load: %14, %9 [, %17]
%13 = BinOp: isub, %12, %11 [, %14]
%12 = Load: %10, %4 [, %13]
%4 = Local: 16, %2 [, %6, %9, %19, %12, %14]
%7 = Arg: 1, %0 [, %10]
%5 = Arg: 0, %0 [, %6]
%2 = Mem: %0 [, %6, %4]
%20 = Load: %18, %9 [, %21]
%19 = Load: %18, %4 [, %21]
%17 = BinOp: iadd, %16, %15 [, %18]
%9 = BinOp: iadd, %4, %8 [, %10, %16, %18, %20]
%14 = Store: %1, %10, %4, %13 [, %18, %16]
%10 = Store: %1, %6, %9, %7 [, %14, %12]
%6 = Store: %1, %2, %4, %5 [, %10]
%0 = Start: idepth: 0 [, %1, %2, %5, %7]
%21 = BinOp: isub, %19, %20 [, %22]
%18 = Store: %1, %14, %9, %17 [, %22, %19, %20]
%1 = Entry: idepth: 0, %0 [, %22, %6, %10, %14, %18]
%22 = Return: idepth: 0, %1, %18, %21 []

======== OPTIMIZED SON ========
%16 = Load: %14, %25 [, %24]
%23 = ImmBinOp: imm: -2, op: addi64, %12 [, %14]
%12 = Load: %10, %4 [, %23]
%4 = Local: 16, %2 [, %6, %25, %19, %12, %14]
%7 = Arg: 1, %0 [, %10]
%5 = Arg: 0, %0 [, %6]
%2 = Mem: %0 [, %6, %4]
%20 = Load: %18, %25 [, %21]
%19 = Load: %18, %4 [, %21]
%24 = ImmBinOp: imm: 1, op: addi64, %16 [, %18]
%25 = ImmBinOp: imm: 8, op: addi64, %4 [, %10, %16, %18, %20]
%14 = Store: %1, %10, %4, %23 [, %18, %16]
%10 = Store: %1, %6, %25, %7 [, %14, %12]
%6 = Store: %1, %2, %4, %5 [, %10]
%0 = Start: idepth: 0 [, %1, %2, %5, %7]
%21 = BinOp: isub, %19, %20 [, %22]
%18 = Store: %1, %14, %25, %24 [, %22, %19, %20]
%1 = Entry: idepth: 0, %0 [, %6, %10, %14, %18, %22]
%22 = Return: idepth: 0, %1, %18, %21 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Local: 16, %2
  %5 = Arg: 0
  %7 = Arg: 1
  %25 = ImmBinOp: imm: 8, op: addi64, %4
  %6 = Store: %2, %4, %5
  %10 = Store: %6, %25, %7
  %12 = Load: %10, %4
  %23 = ImmBinOp: imm: -2, op: addi64, %12
  %14 = Store: %10, %4, %23, %12
  %16 = Load: %14, %25
  %24 = ImmBinOp: imm: 1, op: addi64, %16
  %18 = Store: %14, %25, %24, %16
  %19 = Load: %18, %4
  %20 = Load: %18, %25
  %21 = BinOp: isub, %19, %20
  %22 = Return: idepth: 0, %18, %21

======== REGISTER SELECTION ========
{ 1, 2, 3, 4, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1 }

======== SOURCE ========
fn(t: Ty2): Ty2 {
	return t
}
======== UNSCHEDULED SON ========
%6 = CInt: 24 [, %7]
%5 = Arg: 1, %0 [, %7]
%4 = Arg: 0, %0 [, %7]
%2 = Mem: %0 [, %7]
%0 = Start: idepth: 0 [, %1, %2, %4, %5]
%7 = MemCpy: %1, %2, %4, %5, %6 [, %8]
%1 = Entry: idepth: 0, %0 [, %8, %7]
%8 = Return: idepth: 0, %1, %7 []

======== OPTIMIZED SON ========
%5 = Arg: 1, %0 [, %9]
%4 = Arg: 0, %0 [, %9]
%2 = Mem: %0 [, %9]
%0 = Start: idepth: 0 [, %1, %2, %4, %5]
%9 = BlockCpy: size: 24, , %2, %4, %5 [, %8]
%1 = Entry: idepth: 0, %0 [, %8]
%8 = Return: idepth: 0, %1, %9 []

======== SCHEDULED SON ========
%0 = Start: idepth: 0
%1 = Entry: idepth: 1, %0
  %4 = Arg: 0
  %5 = Arg: 1
  %9 = BlockCpy: size: 24, , %2, %4, %5
  %8 = Return: idepth: 0, %9

======== REGISTER SELECTION ========
{ 1, 2, 1, 1 }

======== CODEGEN ========
main:
         st $31, $254, -64, 64
     addi64 $254, $254, -152
     addi64 $32, $254, 24
       li64 $33, 4
       li64 $34, 1
     addi64 $35, $254, 0
       li64 $36, 3
     addi64 $37, $254, 64
     addi64 $38, $32, 8
         st $33, $254, 24, 8
     addi64 $33, $35, 16
         st $34, $38, 0, 8
        bmc $35, $32, 16
         st $36, $33, 0, 8
         cp $2, $37
         cp $3, $35
        jal $31, $0, :odher_pass
     addi64 $32, $254, 40
       li64 $33, 0
        bmc $32, $37, 24
     addi64 $34, $32, 8
     addi64 $35, $32, 16
         ld $37, $254, 40, 8
         ld $34, $34, 0, 8
         ld $35, $35, 0, 8
        jeq $35, $36, :1
         cp $32, $33
        jmp :2
1:       cp $2, $37
         cp $3, $34
        jal $31, $0, :sum
         cp $34, $1
        jeq $34, $33, :4
       li64 $32, 100
2:      jmp :5
4:       cp $2, $32
        jal $31, $0, :pass
         cp $32, $1
5:       cp $1, $32
     addi64 $254, $254, 152
         ld $31, $254, -64, 64
         tx
pass:
         cp $13, $2
         ld $14, $13, 0, 8
     addi64 $15, $13, 8
     addi64 $14, $14, -1
         st $14, $13, 0, 8
         ld $14, $13, 0, 8
     addi64 $14, $14, 1
         st $14, $13, 0, 8
         ld $13, $13, 0, 8
         ld $14, $15, 0, 8
      sub64 $13, $13, $14
         cp $1, $13
       jala $0, $31, 0
sum:
     addi64 $254, $254, -16
         cp $14, $2
         cp $15, $3
     addi64 $13, $254, 0
     addi64 $16, $13, 8
         st $14, $254, 0, 8
         st $15, $16, 0, 8
         ld $14, $254, 0, 8
     addi64 $14, $14, -2
         st $14, $254, 0, 8
         ld $14, $16, 0, 8
     addi64 $14, $14, 1
         st $14, $16, 0, 8
         ld $13, $254, 0, 8
         ld $14, $16, 0, 8
      sub64 $13, $13, $14
         cp $1, $13
     addi64 $254, $254, 16
       jala $0, $31, 0
odher_pass:
         cp $13, $2
         cp $14, $3
        bmc $13, $14, 24
       jala $0, $31, 0

======== EXECUTION ========
      st $31=0, $254=10240, -64, 64
  addi64 $254=10240, $254, -152
  addi64 $32=0, $254=10088, 24
    li64 $33=0, 4
    li64 $34=0, 1
  addi64 $35=0, $254=10088, 0
    li64 $36=0, 3
  addi64 $37=0, $254=10088, 64
  addi64 $38=0, $32=10112, 8
      st $33=4, $254=10088, 24, 8
  addi64 $33=4, $35=10088, 16
      st $34=1, $38=10120, 0, 8
     bmc $35=10088, $32=10112, 16
      st $36=3, $33=10104, 0, 8
      cp $2=0, $37=10152
      cp $3=0, $35=10088
     jal $31=0, $0=0, 510
      cp $13=0, $2=10152
      cp $14=0, $3=10088
     bmc $13=10152, $14=10088, 24
    jala $0=0, $31=166, 0
  addi64 $32=10112, $254=10088, 40
    li64 $33=10104, 0
     bmc $32=10128, $37=10152, 24
  addi64 $34=1, $32=10128, 8
  addi64 $35=10088, $32=10128, 16
      ld $37=10152, $254=10088, 40, 8
      ld $34=10136, $34, 0, 8
      ld $35=10144, $35, 0, 8
     jeq $35=3, $36=3, 13
      cp $2=10152, $37=4
      cp $3=10088, $34=1
     jal $31=166, $0=0, 203
  addi64 $254=10088, $254, -16
      cp $14=10088, $2=4
      cp $15=0, $3=1
  addi64 $13=10152, $254=10072, 0
  addi64 $16=0, $13=10072, 8
      st $14=4, $254=10072, 0, 8
      st $15=1, $16=10080, 0, 8
      ld $14=4, $254=10072, 0, 8
  addi64 $14=4, $14, -2
      st $14=2, $254=10072, 0, 8
      ld $14=2, $16=10080, 0, 8
  addi64 $14=1, $14, 1
      st $14=2, $16=10080, 0, 8
      ld $13=10072, $254=10072, 0, 8
      ld $14=2, $16=10080, 0, 8
   sub64 $13=2, $13, $14=2
      cp $1=0, $13=0
  addi64 $254=10072, $254, 16
    jala $0=0, $31=279, 0
      cp $34=1, $1=0
     jeq $34=0, $33=0, 20
      cp $2=4, $32=10128
     jal $31=279, $0=0, 38
      cp $13=0, $2=10128
      ld $14=2, $13=10128, 0, 8
  addi64 $15=1, $13=10128, 8
  addi64 $14=4, $14, -1
      st $14=3, $13=10128, 0, 8
      ld $14=3, $13=10128, 0, 8
  addi64 $14=3, $14, 1
      st $14=4, $13=10128, 0, 8
      ld $13=10128, $13, 0, 8
      ld $14=4, $15=10136, 0, 8
   sub64 $13=4, $13, $14=1
      cp $1=0, $13=3
    jala $0=0, $31=312, 0
      cp $32=10128, $1=3
      cp $1=3, $32=3
  addi64 $254=10088, $254, 152
      ld $31=312, $254=10240, -64, 64
      tx