slices 3.reverse:
	push rbx
	push rbp
	sub rsp, 0x10
	mov r9, rdi
	mov rcx, rdx
	lea r8, [rsp]
	mov [r8], rsi
	mov [r8+0x08], rcx
	cmp rcx, 0x00
	setz dl
	movzx rdx, dl
	mov rdi, 0x10
	test dl, dl
	jz :0
	mov rdx, rdi
	mov rdi, r9
	mov rsi, r8
	call :memcpy
	jmp :1
0:	mov rax, 0x00
	mov rdx, rcx
	sub rdx, 0x01
	mov rcx, rax
	mov rsi, rdx
3:	cmp rcx, rsi
	jnb :2
	mov rbp, rsi
	sub rbp, 0x01
	mov rbx, rcx
	add rbx, 0x01
	mov rax, [r8]
	mov rdx, rax
	add rdx, rcx
	add rax, rsi
	mov cl, [rdx]
	mov al, [rax]
	mov [rdx], al
	mov rax, [r8]
	add rax, rsi
	mov [rax], cl
	mov rcx, rbx
	mov rsi, rbp
	jmp :3
2:	mov rdx, rdi
	mov rdi, r9
	mov rsi, r8
	call :memcpy
1:	add rsp, 0x10
	pop rbp
	pop rbx
	ret
main:
	push rbx
	sub rsp, 0x28
	lea rbx, [rsp+0x20]
	mov rax, 0x01
	mov [rbx], al
	mov rax, 0x02
	mov [rbx+0x01], al
	mov rax, 0x03
	mov [rbx+0x02], al
	mov rsi, 0x01
	lea rdi, [rsp]
	mov rdx, 0x00
	call :slices 3.reverse
	lea rdi, [rsp+0x10]
	mov rdx, 0x03
	mov rsi, rbx
	call :slices 3.reverse
	mov al, [rbx]
	mov dl, [rbx+0x01]
	mov cl, [rbx+0x02]
	movzx rax, al
	movzx rdx, dl
	movzx rcx, cl
	sub rax, rdx
	sub rax, rcx
	add rsp, 0x28
	pop rbx
	ret
memcpy: