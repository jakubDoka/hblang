slices 3.reverse:
	push rbx
	push rbp
	sub rsp, 0x10
	mov rbp, rsi
	mov rsi, rdi
	mov rcx, rdx
	lea rax, [rsp]
	mov [rax], rbp
	mov [rax+0x08], rcx
	cmp rcx, 0x00
	setz dl
	movzx rdx, dl
	mov rbx, 0x10
	test dl, dl
	jz :0
	mov rdi, rsi
	mov rsi, rax
	mov rdx, rbx
	call :memcpy
	jmp :1
0:	mov rdx, 0x00
	sub rcx, 0x01
	xchg rcx, rdx
3:	cmp rcx, rdx
	setb bpl
	movzx rbp, bpl
	test bpl, bpl
	jz :2
	mov rbp, rdx
	sub rbp, 0x01
	mov rdi, rcx
	add rdi, 0x01
	mov r8, [rax]
	mov r9, r8
	add r9, rcx
	mov rcx, r8
	add rcx, rdx
	mov r8b, [r9]
	mov cl, [rcx]
	mov [r9], cl
	mov rcx, [rax]
	add rcx, rdx
	mov [rcx], r8b
	mov rcx, rdi
	mov rdx, rbp
	jmp :3
2:	mov rdi, rsi
	mov rsi, rax
	mov rdx, rbx
	call :memcpy
1:	add rsp, 0x10
	pop rbp
	pop rbx
	ret
main:
	push rbp
	sub rsp, 0x28
	lea rbp, [rsp+0x20]
	mov rax, 0x01
	mov [rbp], al
	mov rax, 0x02
	mov [rbp+0x01], al
	mov rax, 0x03
	mov [rbp+0x02], al
	mov rax, 0x01
	lea rsi, [rsp]
	mov rcx, 0x00
	mov rdi, rsi
	mov rsi, rax
	mov rdx, rcx
	call :slices 3.reverse
	lea rsi, [rsp+0x10]
	mov rcx, 0x03
	mov rdi, rsi
	mov rsi, rbp
	mov rdx, rcx
	call :slices 3.reverse
	mov al, [rbp]
	mov cl, [rbp+0x01]
	mov dl, [rbp+0x02]
	movzx rax, al
	movzx rcx, cl
	movzx rdx, dl
	sub rax, rcx
	sub rax, rdx
	add rsp, 0x28
	pop rbp
	ret
memcpy: