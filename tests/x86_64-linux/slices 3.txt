"slices 3".reverse:
	push rbx
	push rbp
	sub rsp, 0x20
	lea rax, [rsp]
	mov [rax], rsi
	mov [rax+0x08], rdx
	cmp rdx, 0x00
	setz cl
	movzx rcx, cl
	mov rbx, 0x10
	test cl, cl
	jz :0
	mov rsi, rax
	mov rdx, rbx
	call :memcpy
	jmp :1
0:	mov rcx, 0x00
	sub rdx, 0x01
3:	cmp rcx, rdx
	setb bpl
	movzx rbp, bpl
	test bpl, bpl
	jz :2
	mov rbp, rdx
	sub rbp, 0x01
	mov rsi, rcx
	add rsi, 0x01
	mov r8, [rax]
	mov r9, r8
	add r9, rcx
	mov rcx, r8
	add rcx, rdx
	mov r8b, [r9]
	mov cl, [rcx]
	mov [r9], cl
	mov rcx, [rax]
	add rcx, rdx
	mov [rcx], r8b
	mov rcx, rsi
	mov rdx, rbp
	jmp :3
2:	mov rsi, rax
	mov rdx, rbx
	call :memcpy
1:	add rsp, 0x20
	pop rbp
	pop rbx
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	sub rsp, 0x58
	lea rbx, [rsp+0x28]
	mov rbp, 0x01
	mov [rbx], bpl
	mov r12, 0x02
	mov [rbx+0x01], r12b
	mov r12, 0x03
	mov [rbx+0x02], r12b
	lea r13, [rsp+0x08]
	mov qword ptr [rsp], 0x00
	mov rdi, r13
	mov rsi, rbp
	mov rdx, [rsp]
	call :"slices 3".reverse
	lea rbp, [rsp+0x18]
	mov rdi, rbp
	mov rsi, rbx
	mov rdx, r12
	call :"slices 3".reverse
	mov al, [rbx]
	mov cl, [rbx+0x01]
	mov dl, [rbx+0x02]
	movzx rax, al
	movzx rcx, cl
	movzx rdx, dl
	sub rax, rcx
	sub rax, rdx
	add rsp, 0x58
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
memcpy: