slices 3.reverse:
	sub rsp, 0x10
	mov [rsp], rsi
	mov [rsp+0x08], rdx
	cmp rdx, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov [rdi], rsi
	mov rax, [rsp+0x08]
	jmp :1
0:	xor r8, r8
	dec rdx
3:	mov rax, [rsp]
	cmp r8, rdx
	jnb :2
	mov rcx, rax
	add rcx, rdx
	mov sil, [rcx]
	add rax, r8
	mov cl, [rax]
	mov [rax], sil
	mov rax, [rsp]
	add rax, rdx
	mov [rax], cl
	dec rdx
	inc r8
	jmp :3
2:	mov [rdi], rax
	mov rax, [rsp+0x08]
1:	mov [rdi+0x08], rax
	add rsp, 0x10
	ret
main:
	sub rsp, 0x28
	mov byte ptr [rsp+0x20], 0x01
	mov byte ptr [rsp+0x21], 0x02
	mov byte ptr [rsp+0x22], 0x03
	xor rdx, rdx
	lea rdi, [rsp]
	mov rsi, 0x01
	call :slices 3.reverse
	lea rsi, [rsp+0x20]
	lea rdi, [rsp+0x10]
	mov rdx, 0x03
	call :slices 3.reverse
	mov al, [rsp+0x20]
	movzx rax, al
	mov cl, [rsp+0x22]
	movzx rdx, cl
	mov cl, [rsp+0x21]
	movzx rcx, cl
	sub rax, rcx
	sub rax, rdx
	add rsp, 0x28
	ret