slices 3.reverse:
	sub rsp, 0x10
	mov [rsp], rsi
	mov [rsp+0x08], rdx
	cmp rdx, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov [rdi], rsi
	mov rax, [rsp+0x08]
	mov [rdi+0x08], rax
	jmp :1
0:	xor r9, r9
	dec rdx
3:	mov r8, rdx
	mov rax, [rsp]
	cmp r9, r8
	jnb :2
	mov rsi, rax
	add rsi, r9
	add rax, r8
	mov rdx, r8
	dec rdx
	inc r9
	mov cl, [rsi]
	mov al, [rax]
	mov [rsi], al
	mov rax, [rsp]
	add rax, r8
	mov [rax], cl
	jmp :3
2:	mov [rdi], rax
	mov rax, [rsp+0x08]
	mov [rdi+0x08], rax
1:	add rsp, 0x10
	ret
main:
	sub rsp, 0x28
	mov byte ptr [rsp+0x20], 0x01
	mov byte ptr [rsp+0x21], 0x02
	mov rsi, 0x01
	xor rdx, rdx
	lea rdi, [rsp]
	mov ax, [rsp+0x20]
	mov byte ptr [rsp+0x22], 0x03
	movzx eax, ax
	or eax, 0x30000
	mov [rsp+0x20], ax
	shr eax, 0x10
	mov [rsp+0x22], al
	call :slices 3.reverse
	lea rsi, [rsp+0x20]
	lea rdi, [rsp+0x10]
	mov rdx, 0x03
	call :slices 3.reverse
	mov al, [rsp+0x20]
	mov dl, [rsp+0x21]
	mov cl, [rsp+0x22]
	movzx rax, al
	movzx rdx, dl
	movzx rcx, cl
	sub rax, rdx
	sub rax, rcx
	add rsp, 0x28
	ret