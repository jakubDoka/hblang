wired string comparison 1.broken:
	lea rcx, [rsp+0x08]
	mov rax, [rcx+0x08]
	mov [rdi], rax
	mov rax, [rcx+0x10]
	mov [rdi+0x08], rax
	mov rax, [rcx+0x08]
	mov [rdi+0x10], rax
	mov rax, [rcx+0x10]
	mov [rdi+0x18], rax
	ret
main:
	push rbx
	push rbp
	push r12
	sub rsp, 0x48
	lea r12, [rsp+0x38]
	lea rbx, [0x0000000000000007]
	mov [r12], rbx
	mov rdx, 0x04
	mov [r12+0x08], rdx
	lea rcx, [rsp+0x48]
	mov rax, 0x00
	mov [rcx], al
	mov [rcx+0x08], rbx
	mov [rcx+0x10], rdx
	lea rbp, [rsp]
	mov rax, 0x18
	mov rdi, rbp
	mov rsi, rcx
	mov rdx, rax
	call :memcpy
	lea rbx, [rsp+0x18]
	mov rdi, rbx
	call :wired string comparison 1.broken
	mov rax, [rbx+0x10]
	mov rcx, [r12]
	cmp rax, rcx
	setnz al
	movzx rax, al
	movzx rax, al
	add rsp, 0x48
	pop r12
	pop rbp
	pop rbx
	ret
memcpy: