loop check 1.check:
	mov rax, 0x01
	ret
loop check 1.nextPos:
	sub rsp, 0x10
	cmp rdx, 0x01
	setnb al
	movzx rax, al
	test al, al
	jz :0
	mov byte ptr [rsp], 0x01
	mov qword ptr [rsp+0x08], 0x11
	mov rax, [rsp]
	mov [rdi], rax
	mov rax, [rsp+0x08]
	mov [rdi+0x08], rax
	jmp :1
0:	mov byte ptr [rdi], 0x00
1:	add rsp, 0x10
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	sub rsp, 0x18
	lea rdx, [0x0000000000000007]
	xor rcx, rcx
	mov rax, 0x15
5:	mov r13, rax
	mov r12, rcx
	mov rbx, rdx
	mov rbp, rbx
	add rbp, r12
	mov rdx, r13
	sub rdx, r12
	mov rsi, rbp
	lea rdi, [rsp]
	call :loop check 1.nextPos
	mov al, [rsp]
	mov rsi, [rsp+0x08]
	mov [rsp], rsi
	test al, al
	jz :0
	sub rsi, r12
	mov rdi, rbp
	call :loop check 1.check
	test al, al
	jz :1
	call :loop check 1.check
	xor al, 0x01
	test al, al
	jz :2
	xor rcx, rcx
	mov rax, r13
	jmp :3
2:	xor rax, rax
	jmp :4
1:	xor rcx, rcx
	mov rax, r13
3:	mov rdx, rbx
	jmp :5
0:	mov rax, 0x01
4:	add rsp, 0x18
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret