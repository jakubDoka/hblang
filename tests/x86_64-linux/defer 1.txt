defer 1.main.ret_defer:
	mov rax, [rdi]
	add rax, 0x01
	mov [rdi], rax
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	sub rsp, 0x10
	mov rbx, 0x00
	cmp rbx, 0x01
	setz bpl
	movzx rbp, bpl
	test bpl, bpl
	jz :0
	mov rax, 0x01
	jmp :1
0:	mov rbp, rbx
	add rbp, 0x01
	cmp rbp, 0x01
	setnz r12b
	movzx r12, r12b
	test r12b, r12b
	jz :11
	mov rax, 0x02
1:	jmp :3
b:	cmp rbp, 0x03
	setz r12b
	movzx r12, r12b
	mov r13, rbp
	add r13, 0x01
	test r12b, r12b
	jz :4
	mov rbp, r13
	jmp :5
4:	cmp rbp, 0x04
	setz bpl
	movzx rbp, bpl
	test bpl, bpl
	jz :6
	cmp r13, 0x05
	setnz bpl
	movzx rbp, bpl
	test bpl, bpl
	jz :7
	mov rax, 0x03
3:	jmp :8
7:	lea rbp, [rsp]
	mov [rbp], rbx
	mov rdi, rbp
	call :defer 1.main.ret_defer
	mov rax, [rbp]
	cmp rax, 0x01
	setnz al
	movzx rax, al
	test al, al
	jz :9
	mov rax, 0x04
8:	jmp :10
9:	mov rax, rbx
a:	add rsp, 0x10
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
6:	mov rbp, r13
5:	jmp :11