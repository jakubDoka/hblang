"defer 1".main.ret_defer:
	mov rax, [rdi]
	add rax, 0x01
	mov [rdi], rax
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	sub rsp, 0x10
	mov rbx, 0x00
	cmp rbx, 0x01
	setz bpl
	movzx rbp, bpl
	test bpl, bpl
	jz 0x0000000000000012
	mov rax, 0x01
	jmp 0x0000000000000028
	mov rbp, rbx
	add rbp, 0x01
	cmp rbp, 0x01
	setnz r12b
	movzx r12, r12b
	test r12b, r12b
	jz 0x0000000000000012
	mov rax, 0x02
	jmp 0x000000000000005A
	cmp rbp, 0x03
	setz r12b
	movzx r12, r12b
	mov r13, rbp
	add r13, 0x01
	test r12b, r12b
	jz 0x000000000000000E
	mov rbp, r13
	jmp 0x0000000000000082
	cmp rbp, 0x04
	setz bpl
	movzx rbp, bpl
	test bpl, bpl
	jz 0x000000000000006B
	cmp r13, 0x05
	setnz bpl
	movzx rbp, bpl
	test bpl, bpl
	jz 0x0000000000000012
	mov rax, 0x03
	jmp 0x0000000000000036
	mov rbp, rsp
	add rbp, 0x00
	mov [rbp], rbx
	mov rdi, rbp
	call 0x0000000000000005
	mov rax, [rbp]
	cmp rax, 0x01
	setnz al
	movzx rax, al
	test al, al
	jz 0x0000000000000012
	mov rax, 0x04
	jmp 0x0000000000000008
	mov rax, rbx
	add rsp, 0x10
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
	mov rbp, r13
	jmp 0xFFFFFFFFFFFFFF5F