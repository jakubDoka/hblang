directives 20 (@handler, @SourceLoc).produce_memcpy:
	ret
directives 20 (@handler, @SourceLoc).use_slice:
	push rbx
	sub rsp, 0x40
	mov rbx, rsi
	mov rcx, rbx
	xor rax, rax
	cmp rax, rcx
	jb :0
	lea rsi, [rsp+0x20]
	lea rax, [0x0000000000000007]
	mov [rsp+0x20], rax
	mov qword ptr [rsp+0x28], 0x24
	mov rax, 0xF00000012
	mov [rsp+0x30], rax
	mov rdx, 0x20
	lea rdi, [rsp]
	call :memcpy
	mov rdi, rbx
	xor rsi, rsi
	xor rdx, rdx
	call :directives 20 (@handler, @SourceLoc).slice_ioob
0:	mov al, [rdi]
	movzx rax, al
	add rsp, 0x40
	pop rbx
	ret
memcpy:
1:	cmp rdx, 0x00
	setnz al
	movzx rax, al
	test al, al
	jz :0
	mov al, [rsi]
	mov [rdi], al
	dec rdx
	inc rsi
	inc rdi
	jmp :1
0:	ret
directives 20 (@handler, @SourceLoc).slice_ioob:
	ud2
_start:
	sub rsp, 0x08
	mov byte ptr [rsp+0x04], 0x00
	mov byte ptr [rsp], 0x01
	mov byte ptr [rsp+0x01], 0x02
	mov byte ptr [rsp+0x02], 0x03
	mov byte ptr [rsp+0x03], 0x04
	mov edi, [rsp]
	call :directives 20 (@handler, @SourceLoc).produce_memcpy
	lea rdi, [rsp+0x04]
	xor rsi, rsi
	call :directives 20 (@handler, @SourceLoc).use_slice
	add rsp, 0x08
	ret