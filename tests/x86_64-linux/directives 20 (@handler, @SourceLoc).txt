directives 20 (@handler, @SourceLoc).produce_memcpy:
	ret
directives 20 (@handler, @SourceLoc).use_slice:
	push rbx
	push rbp
	sub rsp, 0x48
	mov rbp, rsi
	mov rbx, 0x00
	mov rcx, rbp
	mov rax, rbx
	cmp rax, rcx
	jb :0
	lea rsi, [rsp+0x20]
	lea rax, [0x0000000000000007]
	mov [rsp+0x20], rax
	mov qword ptr [rsp+0x28], 0x24
	mov rax, 0xF00000012
	mov [rsp+0x30], rax
	mov rdx, 0x20
	lea rdi, [rsp]
	call :memcpy
	mov rdi, rbp
	mov rsi, rbx
	mov rdx, rbx
	call :directives 20 (@handler, @SourceLoc).slice_ioob
0:	mov al, [rdi]
	movzx rax, al
	add rsp, 0x48
	pop rbp
	pop rbx
	ret
memcpy:
	mov r8, rdi
	mov rdi, rsi
	mov rsi, rdx
1:	cmp rsi, 0x00
	setnz al
	movzx rax, al
	test al, al
	jz :0
	sub rsi, 0x01
	mov rdx, rdi
	add rdx, 0x01
	mov rcx, r8
	add rcx, 0x01
	mov al, [rdi]
	mov [r8], al
	mov rdi, rdx
	mov r8, rcx
	jmp :1
0:	ret
directives 20 (@handler, @SourceLoc).slice_ioob:
	ud2
_start:
	push rbx
	sub rsp, 0x18
	lea rbx, [rsp+0x08]
	mov byte ptr [rsp+0x08], 0x00
	mov byte ptr [rsp+0x04], 0x01
	mov byte ptr [rsp+0x05], 0x02
	mov byte ptr [rsp+0x06], 0x03
	mov byte ptr [rsp+0x07], 0x04
	lea rcx, [rsp]
	mov eax, [rsp+0x04]
	mov [rcx], eax
	call :directives 20 (@handler, @SourceLoc).produce_memcpy
	mov rsi, 0x00
	mov rdi, rbx
	call :directives 20 (@handler, @SourceLoc).use_slice
	add rsp, 0x18
	pop rbx
	ret