generic structs 5 (iterators).main.Chars.next:
	sub rsp, 0x10
	mov rax, [rdi+0x08]
	cmp rax, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov byte ptr [rsp], 0x00
	mov ax, [rsp]
	jmp :1
0:	mov rdx, [rdi+0x08]
	mov rax, [rdi]
	mov byte ptr [rsp+0x02], 0x01
	dec rdx
	mov al, [rax]
	mov [rsp+0x03], al
	mov rax, [rdi]
	mov cx, [rsp+0x02]
	inc rax
	mov [rdi], rax
	mov [rdi+0x08], rdx
	mov ax, cx
1:	add rsp, 0x10
	ret
generic structs 5 (iterators).main.Chain(.Chars, .Chars).next:
	push rbx
	push rbp
	push r12
	sub rsp, 0x10
	mov r12, rdi
	mov rax, r12
	add rax, 0x18
	mov rbp, rax
	mov rax, r12
	add rax, 0x08
	mov rbx, rax
7:	mov rax, r12
	mov al, [rax]
	movsx rcx, al
	cmp rcx, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov rdi, rbx
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x02], ax
	mov cl, [rsp+0x02]
	test cl, cl
	jz :1
	jmp :2
1:	mov rax, r12
	mov byte ptr [rax], 0x01
	jmp :3
0:	cmp rcx, 0x01
	setz al
	movzx rax, al
	test al, al
	jz :4
	mov rdi, rbp
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x04], ax
	mov cl, [rsp+0x04]
	test cl, cl
	jz :5
2:	jmp :6
5:	mov rax, r12
	mov byte ptr [rax], 0x02
3:	jmp :7
4:	mov byte ptr [rsp], 0x00
	mov ax, [rsp]
6:	add rsp, 0x10
	pop r12
	pop rbp
	pop rbx
	ret
main:
	push rbx
	sub rsp, 0x60
	lea rdx, [0x0000000000000007]
	mov [rsp], rdx
	mov qword ptr [rsp+0x08], 0x04
	lea rcx, [0x0000000000000007]
	xor bl, bl
	lea rax, [0x0000000000000007]
	mov [rsp+0x10], rax
	mov qword ptr [rsp+0x18], 0x02
	mov [rsp+0x20], rdx
	mov qword ptr [rsp+0x28], 0x04
	mov byte ptr [rsp+0x30], 0x00
	mov [rsp+0x38], rax
	mov qword ptr [rsp+0x40], 0x02
	mov [rsp+0x48], rcx
	mov qword ptr [rsp+0x50], 0x02
8:	lea rdi, [rsp+0x10]
	call :generic structs 5 (iterators).main.Chars.next
	mov rdx, [rsp]
	mov rcx, [rsp+0x08]
	mov [rsp+0x58], ax
	mov al, [rsp+0x58]
	cmp al, bl
	jnz :0
	mov [rsp+0x20], rdx
	mov [rsp+0x28], rcx
5:	lea rdi, [rsp+0x20]
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x5C], ax
	mov al, [rsp+0x5C]
	cmp al, bl
	jnz :1
	xor rax, rax
	jmp :7
1:	lea rdi, [rsp+0x30]
	call :generic structs 5 (iterators).main.Chain(.Chars, .Chars).next
	mov cl, [rsp+0x5D]
	mov [rsp+0x5E], ax
	mov al, [rsp+0x5E]
	cmp al, bl
	jnz :3
	mov rax, 0x03
	jmp :7
3:	mov al, [rsp+0x5F]
	cmp al, cl
	jz :4
	mov rax, 0x04
	jmp :7
4:	jmp :5
0:	lea rdi, [rsp+0x20]
	call :generic structs 5 (iterators).main.Chars.next
	mov cl, [rsp+0x59]
	mov [rsp+0x5A], ax
	mov al, [rsp+0x5A]
	cmp al, bl
	jnz :6
	mov rax, 0x01
	jmp :7
6:	mov al, [rsp+0x5B]
	cmp cl, al
	jz :7
	mov rax, 0x02
7:	add rsp, 0x60
	pop rbx
	ret
7:	jmp :8