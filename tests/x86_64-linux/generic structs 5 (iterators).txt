generic structs 5 (iterators).main.Chars.next:
	sub rsp, 0x10
	mov rax, [rdi+0x08]
	cmp rax, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov byte ptr [rsp], 0x00
	mov ax, [rsp]
	jmp :1
0:	mov rax, [rdi]
	mov byte ptr [rsp+0x02], 0x01
	mov al, [rax]
	mov [rsp+0x03], al
	mov rdx, [rdi+0x08]
	dec rdx
	mov rcx, [rdi]
	inc rcx
	mov ax, [rsp+0x02]
	mov [rdi], rcx
	mov [rdi+0x08], rdx
1:	add rsp, 0x10
	ret
main:
	push rbx
	sub rsp, 0x40
	lea rcx, [0x0000000000000007]
	mov [rsp], rcx
	mov qword ptr [rsp+0x08], 0x04
	lea rax, [0x0000000000000007]
	mov [rsp+0x10], rax
	mov qword ptr [rsp+0x18], 0x02
	mov [rsp+0x20], rcx
	mov rax, [rsp+0x08]
	mov [rsp+0x28], rax
	xor rbx, rbx
4:	lea rdi, [rsp+0x10]
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x30], ax
	mov al, [rsp+0x30]
	cmp al, bl
	jnz :0
	xor rax, rax
	jmp :3
0:	lea rdi, [rsp+0x20]
	call :generic structs 5 (iterators).main.Chars.next
	mov [rsp+0x32], ax
	mov al, [rsp+0x32]
	cmp al, bl
	jnz :2
	mov rax, 0x01
	jmp :3
2:	mov cl, [rsp+0x33]
	mov al, [rsp+0x31]
	cmp al, cl
	jz :3
	mov rax, 0x02
3:	add rsp, 0x40
	pop rbx
	ret
3:	jmp :4