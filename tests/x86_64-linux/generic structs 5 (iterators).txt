generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next:
	push rbx
	sub rsp, 0x08
	mov rbx, rsi
	mov rax, [rbx+0x08]
	cmp rax, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	call :generic structs 5 (iterators).main.Next(T = u8).none
	jmp :1
0:	mov rax, [rbx]
	mov sil, [rax]
	call :generic structs 5 (iterators).main.Next(T = u8).some
	mov rax, [rbx]
	mov rcx, [rbx+0x08]
	add rax, 0x01
	mov [rbx], rax
	mov rax, rcx
	sub rax, 0x01
	mov [rbx+0x08], rax
1:	add rsp, 0x08
	pop rbx
	ret
generic structs 5 (iterators).main.Chain(A = generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next), B = generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next)).next:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	push r15
	sub rsp, 0xA8
	mov [rsp+0x98], rdi
	mov [rsp+0x90], rsi
	lea r15, [rsp+0xA0]
	mov [rsp+0x08], r15
	lea r15, [rsp+0xA2]
	mov [rsp], r15
	mov r13, 0x01
	mov r12, 0x02
	mov rbp, [rsp+0x90]
	add rbp, 0x18
	mov rbx, [rsp+0x90]
	add rbx, 0x08
7:	mov r15, [rsp+0x90]
	mov al, [r15]
	mov rcx, rax
	movsx rcx, cl
	cmp rcx, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	mov rdi, [rsp]
	mov rsi, rbx
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov al, [rsp+0xA2]
	test al, al
	jz :1
	mov ax, [rsp+0xA2]
	mov r15, [rsp+0x98]
	mov [r15], ax
	jmp :2
1:	mov r15, [rsp+0x90]
	mov [r15], r13b
	jmp :3
0:	cmp rcx, 0x01
	setz al
	movzx rax, al
	test al, al
	jz :4
	mov rdi, [rsp+0x08]
	mov rsi, rbp
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov al, [rsp+0xA0]
	test al, al
	jz :5
	mov ax, [rsp+0xA0]
	mov r15, [rsp+0x98]
	mov [r15], ax
2:	jmp :6
5:	mov r15, [rsp+0x90]
	mov [r15], r12b
3:	jmp :7
4:	mov rdi, [rsp+0x98]
	call :generic structs 5 (iterators).main.Next(T = u8).none
6:	add rsp, 0xA8
	pop r15
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
generic structs 5 (iterators).main.Next(T = u8).none:
	mov rax, 0x00
	mov [rdi], al
	mov rax, 0xAAAAAAAAAAAAAAAA
	mov [rdi+0x01], al
	ret
generic structs 5 (iterators).main.Next(T = u8).some:
	mov rax, 0x01
	mov [rdi], al
	mov [rdi+0x01], sil
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	push r15
	sub rsp, 0x108
	lea rax, [0x0000000000000007]
	mov [rsp+0xA8], rax
	mov qword ptr [rsp+0xA0], 0x04
	mov r15, [rsp+0xA0]
	mov [rsp+0xB0], r15
	lea rcx, [0x0000000000000007]
	lea r15, [rsp+0xB8]
	mov [rsp+0x98], r15
	mov [rsp+0xB8], rcx
	mov qword ptr [rsp+0x90], 0x02
	mov r15, [rsp+0x90]
	mov [rsp+0xC0], r15
	lea r15, [rsp+0xC8]
	mov [rsp+0x08], r15
	mov [rsp+0xC8], rax
	mov r15, [rsp+0xA0]
	mov [rsp+0xD0], r15
	lea r15, [rsp+0xD8]
	mov [rsp], r15
	mov rax, 0x00
	mov [rsp+0xD8], al
	mov [rsp+0xE0], rcx
	mov r15, [rsp+0x90]
	mov [rsp+0xE8], r15
	lea rax, [0x0000000000000007]
	mov [rsp+0xF0], rax
	mov r15, [rsp+0x90]
	mov [rsp+0xF8], r15
	lea r13, [rsp+0x100]
	lea r12, [rsp+0x102]
8:	mov rdi, r13
	mov rsi, [rsp+0x98]
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov al, [rsp+0x100]
	xor al, 0x01
	test al, al
	jz :0
	mov rax, [rsp+0xA8]
	mov [rsp+0xC8], rax
	mov rax, [rsp+0xB0]
	mov [rsp+0xD0], rax
	lea r13, [rsp+0x104]
	lea r12, [rsp+0x106]
5:	mov rdi, r13
	mov rsi, [rsp+0x08]
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov al, [rsp+0x104]
	xor al, 0x01
	test al, al
	jz :1
	mov rax, 0x00
	jmp :7
1:	mov rdi, r12
	mov rsi, [rsp]
	call :generic structs 5 (iterators).main.Chain(A = generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next), B = generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next)).next
	mov bpl, [rsp+0x106]
	mov al, bpl
	xor al, 0x01
	mov bl, [rsp+0x105]
	mov dl, [rsp+0x107]
	mov cl, [rsp+0x104]
	test al, al
	jz :3
	mov rax, 0x03
	jmp :7
3:	cmp bpl, cl
	setnz al
	movzx rax, al
	cmp dl, bl
	setnz cl
	movzx rcx, cl
	or rax, rcx
	test al, al
	jz :4
	mov rax, [rsp+0xA0]
	jmp :7
4:	jmp :5
0:	mov rdi, r12
	mov rsi, [rsp+0x08]
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov bpl, [rsp+0x102]
	mov bl, bpl
	xor bl, 0x01
	mov dl, [rsp+0x103]
	mov cl, [rsp+0x101]
	mov al, [rsp+0x100]
	test bl, bl
	jz :6
	mov rax, 0x01
	jmp :7
6:	cmp al, bpl
	setnz al
	movzx rax, al
	cmp cl, dl
	setnz cl
	movzx rcx, cl
	or rax, rcx
	test al, al
	jz :7
	mov rax, [rsp+0x90]
7:	add rsp, 0x108
	pop r15
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
7:	jmp :8