"generic structs 5 (iterators)".main(Next = "generic structs 5 (iterators)".main.Next).next:
	push rbx
	push rbp
	push r12
	sub rsp, 0x18
	mov rbp, rdi
	mov rbx, rsi
	mov r12, [rbx+0x08]
	cmp r12, 0x00
	setz r12b
	movzx r12, r12b
	test r12b, r12b
	jz 0x0000000000000013
	mov rdi, rbp
	call 0x0000000000000005
	jmp 0x0000000000000049
	mov r12, [rbx]
	mov r12b, [r12]
	mov rdi, rbp
	mov rsi, r12
	call 0x0000000000000005
	mov rax, [rbx+0x08]
	mov rcx, [rbx]
	mov rdx, rsp
	add rdx, 0x00
	add rcx, 0x01
	mov [rdx], rcx
	sub rax, 0x01
	mov [rdx+0x08], rax
	mov rax, 0x10
	mov rsi, rdx
	mov rdi, rbx
	mov rdx, rax
	call 0x0000000000000005
	add rsp, 0x18
	pop r12
	pop rbp
	pop rbx
	ret
"generic structs 5 (iterators)".main.Chain(A = "generic structs 5 (iterators)".main(Next = "generic structs 5 (iterators)".main.Next), B = "generic structs 5 (iterators)".main(Next = "generic structs 5 (iterators)".main.Next)).next:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	push r15
	sub rsp, 0x70
	mov rbp, rdi
	mov rbx, rsi
	mov r12, rsp
	add r12, 0x30
	mov r13, rsp
	add r13, 0x32
	mov qword ptr [rsp], 0x01
	mov qword ptr [rsp+0x08], 0x02
	mov [rsp+0x10], rbx
	add qword ptr [rsp+0x10], 0x18
	mov [rsp+0x18], rbx
	add qword ptr [rsp+0x18], 0x08
	mov r15b, [rbx]
	mov [rsp+0x20], r15b
	mov r15, [rsp+0x20]
	movsx r15, byte ptr [rsp+0x20]
	mov [rsp+0x20], r15
	cmp qword ptr [rsp+0x20], 0x00
	setz [rsp+0x28]
	movzx r15, byte ptr [rsp+0x28]
	mov [rsp+0x28], r15
	mov r15b, [rsp+0x28]
	test [rsp+0x28], r15b
	jz 0x000000000000004D
	mov rdi, r13
	mov rsi, [rsp+0x18]
	call 0x0000000000000005
	mov r15b, [r13]
	mov [rsp+0x20], r15b
	mov r15b, [rsp+0x20]
	test [rsp+0x20], r15b
	jz 0x000000000000001B
	mov rdi, rbp
	mov rsi, r13
	mov rdx, [rsp+0x08]
	call 0x0000000000000005
	jmp 0x000000000000006D
	mov r15b, [rsp]
	mov [rbx], r15b
	jmp 0x000000000000006E
	cmp qword ptr [rsp+0x20], 0x01
	setz [rsp+0x20]
	movzx r15, byte ptr [rsp+0x20]
	mov [rsp+0x20], r15
	mov r15b, [rsp+0x20]
	test [rsp+0x20], r15b
	jz 0x000000000000004E
	mov rdi, r12
	mov rsi, [rsp+0x10]
	call 0x0000000000000005
	mov r15b, [r12]
	mov [rsp+0x20], r15b
	mov r15b, [rsp+0x20]
	test [rsp+0x20], r15b
	jz 0x000000000000001B
	mov rdi, rbp
	mov rsi, r12
	mov rdx, [rsp+0x08]
	call 0x0000000000000005
	jmp 0x000000000000001A
	mov r15b, [rsp+0x08]
	mov [rbx], r15b
	jmp 0xFFFFFFFFFFFFFF12
	mov rdi, rbp
	call 0x0000000000000005
	add rsp, 0x70
	pop r15
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
"generic structs 5 (iterators)".main.Next(T = u8).none:
	mov rax, 0x00
	mov [rdi], al
	mov rax, 0xAAAAAAAAAAAAAAAA
	mov [rdi+0x01], al
	ret
"generic structs 5 (iterators)".main.Next(T = u8).some:
	mov rax, 0x01
	mov [rdi], al
	mov [rdi+0x01], sil
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	push r15
	sub rsp, 0x1D8
	mov rbx, rsp
	add rbx, 0xC4
	mov rbp, rsp
	add rbp, 0x60
	lea r12, [0x0000000000000007]
	mov [rbp], r12
	mov r12, 0x04
	mov [rbp+0x08], r12
	mov r13, 0x00
	mov [rsp], rsp
	add qword ptr [rsp], 0x70
	lea r15, [0x0000000000000007]
	mov [rsp+0x08], r15
	mov r15, [rsp]
	mov r14, [rsp+0x08]
	mov [r15], r14
	mov qword ptr [rsp+0x08], 0x02
	mov r15, [rsp]
	mov r14, [rsp+0x08]
	mov [r15+0x08], r14
	mov [rsp+0x10], rsp
	add qword ptr [rsp+0x10], 0x80
	lea r15, [0x0000000000000007]
	mov [rsp+0x18], r15
	mov r15, [rsp+0x10]
	mov r14, [rsp+0x18]
	mov [r15], r14
	mov r15, [rsp+0x10]
	mov r14, [rsp+0x08]
	mov [r15+0x08], r14
	mov qword ptr [rsp+0x18], 0x10
	mov [rsp+0x20], rsp
	add qword ptr [rsp+0x20], 0xA4
	mov rdi, [rsp+0x20]
	mov rsi, [rsp]
	mov rdx, [rsp+0x18]
	call 0x0000000000000005
	mov [rsp+0x28], rsp
	add qword ptr [rsp+0x28], 0xB4
	mov rdi, [rsp+0x28]
	mov rsi, rbp
	mov rdx, [rsp+0x18]
	call 0x0000000000000005
	mov [rbx], r13b
	mov [rsp+0x30], rbx
	add qword ptr [rsp+0x30], 0x08
	mov rdi, [rsp+0x30]
	mov rsi, [rsp]
	mov rdx, [rsp+0x18]
	call 0x0000000000000005
	mov [rsp], rbx
	add qword ptr [rsp], 0x18
	mov rdi, [rsp]
	mov rsi, [rsp+0x10]
	mov rdx, [rsp+0x18]
	call 0x0000000000000005
	mov [rsp], rsp
	add qword ptr [rsp], 0xEC
	mov [rsp+0x10], rsp
	add qword ptr [rsp+0x10], 0xEE
	mov rdi, [rsp]
	mov rsi, [rsp+0x20]
	call 0x0000000000000005
	mov r15, [rsp]
	mov r14b, [r15]
	mov [rsp+0x30], r14b
	xor byte ptr [rsp+0x30], 0x01
	mov r15b, [rsp+0x30]
	test [rsp+0x30], r15b
	jz 0x000000000000013F
	mov [rsp], rsp
	add qword ptr [rsp], 0x90
	mov rdi, [rsp]
	mov rsi, rbp
	mov rdx, [rsp+0x18]
	call 0x0000000000000005
	mov rdi, [rsp+0x28]
	mov rsi, [rsp]
	mov rdx, [rsp+0x18]
	call 0x0000000000000005
	mov rbp, rsp
	add rbp, 0xA2
	mov [rsp], rsp
	add qword ptr [rsp], 0xA0
	mov rdi, [rsp]
	mov rsi, [rsp+0x28]
	call 0x0000000000000005
	mov r15, [rsp]
	mov r14b, [r15]
	mov [rsp+0x08], r14b
	xor byte ptr [rsp+0x08], 0x01
	mov r15b, [rsp+0x08]
	test [rsp+0x08], r15b
	jz 0x000000000000000E
	mov rax, r13
	jmp 0x0000000000000182
	mov rdi, rbp
	mov rsi, rbx
	call 0x0000000000000005
	mov r15b, [rbp]
	mov [rsp+0x08], r15b
	mov r15b, [rsp+0x08]
	mov [rsp+0x10], r15b
	xor byte ptr [rsp+0x10], 0x01
	mov r15, [rsp]
	mov r14b, [r15+0x01]
	mov [rsp+0x18], r14b
	mov r15b, [rbp+0x01]
	mov [rsp+0x20], r15b
	mov r15, [rsp]
	mov r14b, [r15]
	mov [rsp+0x30], r14b
	mov r15b, [rsp+0x10]
	test [rsp+0x10], r15b
	jz 0x0000000000000012
	mov rax, 0x03
	jmp 0x0000000000000121
	mov r15b, [rsp+0x30]
	cmp [rsp+0x08], r15b
	setnz [rsp+0x08]
	movzx r15, byte ptr [rsp+0x08]
	mov [rsp+0x08], r15
	mov r15b, [rsp+0x18]
	cmp [rsp+0x20], r15b
	setnz [rsp+0x10]
	movzx r15, byte ptr [rsp+0x10]
	mov [rsp+0x10], r15
	mov r15, [rsp+0x10]
	or [rsp+0x08], r15
	mov r15b, [rsp+0x08]
	test [rsp+0x08], r15b
	jz 0x000000000000000E
	mov rax, r12
	jmp 0x00000000000000CB
	jmp 0xFFFFFFFFFFFFFF12
	mov rdi, [rsp+0x10]
	mov rsi, [rsp+0x28]
	call 0x0000000000000005
	mov r15, [rsp+0x10]
	mov r14b, [r15]
	mov [rsp+0x30], r14b
	mov r15b, [rsp+0x30]
	mov [rsp+0x40], r15b
	xor byte ptr [rsp+0x40], 0x01
	mov r15, [rsp+0x10]
	mov r14b, [r15+0x01]
	mov [rsp+0x48], r14b
	mov r15, [rsp]
	mov r14b, [r15+0x01]
	mov [rsp+0x50], r14b
	mov r15, [rsp]
	mov r14b, [r15]
	mov [rsp+0x58], r14b
	mov r15b, [rsp+0x40]
	test [rsp+0x40], r15b
	jz 0x0000000000000012
	mov rax, 0x01
	jmp 0x0000000000000058
	mov r15b, [rsp+0x30]
	cmp [rsp+0x58], r15b
	setnz [rsp+0x40]
	movzx r15, byte ptr [rsp+0x40]
	mov [rsp+0x40], r15
	mov r15b, [rsp+0x48]
	cmp [rsp+0x50], r15b
	setnz [rsp+0x30]
	movzx r15, byte ptr [rsp+0x30]
	mov [rsp+0x30], r15
	mov r15, [rsp+0x30]
	or [rsp+0x40], r15
	mov r15b, [rsp+0x40]
	test [rsp+0x40], r15b
	jz 0x000000000000001D
	mov rax, [rsp+0x08]
	add rsp, 0x1D8
	pop r15
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
	jmp 0xFFFFFFFFFFFFFDC5
memcpy: