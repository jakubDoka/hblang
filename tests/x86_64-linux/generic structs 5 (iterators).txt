generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next:
	push rbx
	sub rsp, 0x18
	mov rbx, rsi
	mov rax, [rbx+0x08]
	cmp rax, 0x00
	setz al
	movzx rax, al
	test al, al
	jz :0
	call :generic structs 5 (iterators).main.Next(T = u8).none
	jmp :1
0:	mov rax, [rbx]
	mov sil, [rax]
	call :generic structs 5 (iterators).main.Next(T = u8).some
	mov rax, [rbx+0x08]
	mov rcx, [rbx]
	lea rdx, [rsp]
	add rcx, 0x01
	mov [rdx], rcx
	sub rax, 0x01
	mov [rdx+0x08], rax
	mov rax, 0x10
	mov rsi, rdx
	mov rdi, rbx
	mov rdx, rax
	call :memcpy
1:	add rsp, 0x18
	pop rbx
	ret
generic structs 5 (iterators).main.Chain(A = generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next), B = generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next)).next:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	push r15
	sub rsp, 0xB8
	mov rbp, rdi
	mov rbx, rsi
	lea r12, [rsp+0xA8]
	lea r13, [rsp+0xAA]
	mov qword ptr [rsp], 0x01
	mov qword ptr [rsp+0x08], 0x02
	mov qword ptr [rsp+0x90], 0x02
	mov [rsp+0x98], rbx
	add qword ptr [rsp+0x98], 0x08
	mov [rsp+0xA0], rbx
	add qword ptr [rsp+0xA0], 0x18
7:	mov al, [rbx]
	movsx rax, al
	cmp rax, 0x00
	setz cl
	movzx rcx, cl
	test cl, cl
	jz :0
	mov rdi, r13
	mov rsi, [rsp+0x98]
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov al, [r13]
	test al, al
	jz :1
	mov rdi, rbp
	mov rsi, r13
	mov rdx, [rsp+0x90]
	call :memcpy
	jmp :2
1:	mov r15b, [rsp]
	mov [rbx], r15b
	jmp :3
0:	cmp rax, 0x01
	setz al
	movzx rax, al
	test al, al
	jz :4
	mov rdi, r12
	mov rsi, [rsp+0xA0]
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov al, [r12]
	test al, al
	jz :5
	mov rdi, rbp
	mov rsi, r12
	mov rdx, [rsp+0x90]
	call :memcpy
2:	jmp :6
5:	mov r15b, [rsp+0x08]
	mov [rbx], r15b
3:	jmp :7
4:	mov rdi, rbp
	call :generic structs 5 (iterators).main.Next(T = u8).none
6:	add rsp, 0xB8
	pop r15
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
generic structs 5 (iterators).main.Next(T = u8).none:
	mov rax, 0x00
	mov [rdi], al
	mov rax, 0xAAAAAAAAAAAAAAAA
	mov [rdi+0x01], al
	ret
generic structs 5 (iterators).main.Next(T = u8).some:
	mov rax, 0x01
	mov [rdi], al
	mov [rdi+0x01], sil
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	push r14
	push r15
	sub rsp, 0x148
	lea rbx, [rsp+0xB0]
	lea rbp, [rsp+0xD8]
	lea rax, [0x0000000000000007]
	mov [rbp], rax
	mov r12, 0x04
	mov [rbp+0x08], r12
	mov r13, 0x00
	lea r15, [rsp+0xE8]
	mov [rsp], r15
	lea rax, [0x0000000000000007]
	mov r15, [rsp]
	mov [r15], rax
	mov qword ptr [rsp+0x08], 0x02
	mov r15, [rsp]
	mov r14, [rsp+0x08]
	mov [r15+0x08], r14
	lea r15, [rsp+0xF8]
	mov [rsp+0x90], r15
	lea rax, [0x0000000000000007]
	mov r15, [rsp+0x90]
	mov [r15], rax
	mov r15, [rsp+0x90]
	mov r14, [rsp+0x08]
	mov [r15+0x08], r14
	mov qword ptr [rsp+0x98], 0x10
	lea r15, [rsp+0x118]
	mov [rsp+0xA0], r15
	mov rdi, [rsp+0xA0]
	mov rsi, [rsp]
	mov rdx, [rsp+0x98]
	call :memcpy
	lea r15, [rsp+0x128]
	mov [rsp+0xA8], r15
	mov rdi, [rsp+0xA8]
	mov rsi, rbp
	mov rdx, [rsp+0x98]
	call :memcpy
	mov [rbx], r13b
	mov rsi, rbx
	add rsi, 0x08
	mov rdi, rsi
	mov rsi, [rsp]
	mov rdx, [rsp+0x98]
	call :memcpy
	mov rsi, rbx
	add rsi, 0x18
	mov rdi, rsi
	mov rsi, [rsp+0x90]
	mov rdx, [rsp+0x98]
	call :memcpy
	lea r13, [rsp+0x13C]
	lea r15, [rsp+0x13E]
	mov [rsp], r15
8:	mov rdi, r13
	mov rsi, [rsp+0xA0]
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov al, [r13]
	xor al, 0x01
	test al, al
	jz :0
	lea r13, [rsp+0x108]
	mov rdi, r13
	mov rsi, rbp
	mov rdx, [rsp+0x98]
	call :memcpy
	mov rdi, [rsp+0xA8]
	mov rsi, r13
	mov rdx, [rsp+0x98]
	call :memcpy
	lea rbp, [rsp+0x13A]
	lea r13, [rsp+0x138]
5:	mov rdi, r13
	mov rsi, [rsp+0xA8]
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov al, [r13]
	xor al, 0x01
	test al, al
	jz :1
	mov rax, 0x00
	jmp :7
1:	mov rdi, rbp
	mov rsi, rbx
	call :generic structs 5 (iterators).main.Chain(A = generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next), B = generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next)).next
	mov al, [rbp]
	mov cl, al
	xor cl, 0x01
	mov dl, [r13+0x01]
	mov sil, [rbp+0x01]
	mov dil, [r13]
	test cl, cl
	jz :3
	mov rax, 0x03
	jmp :7
3:	cmp al, dil
	setnz al
	movzx rax, al
	cmp sil, dl
	setnz cl
	movzx rcx, cl
	or rax, rcx
	test al, al
	jz :4
	mov rax, r12
	jmp :7
4:	jmp :5
0:	mov rdi, [rsp]
	mov rsi, [rsp+0xA8]
	call :generic structs 5 (iterators).main(Next = generic structs 5 (iterators).main.Next).next
	mov r15, [rsp]
	mov al, [r15]
	mov cl, al
	xor cl, 0x01
	mov r15, [rsp]
	mov dl, [r15+0x01]
	mov sil, [r13+0x01]
	mov dil, [r13]
	test cl, cl
	jz :6
	mov rax, 0x01
	jmp :7
6:	cmp dil, al
	setnz cl
	movzx rcx, cl
	cmp sil, dl
	setnz al
	movzx rax, al
	or rcx, rax
	test cl, cl
	jz :7
	mov rax, [rsp+0x08]
7:	add rsp, 0x148
	pop r15
	pop r14
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
7:	jmp :8
memcpy: