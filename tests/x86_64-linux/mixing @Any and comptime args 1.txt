mixing @Any and comptime args 1.bind(val: ?i32, f = mixing @Any and comptime args 1.main):
	push rbx
	push rbp
	push r12
	sub rsp, 0x08
	mov rbp, rdi
	mov rbx, rsi
	mov r12, rdx
	test bl, bl
	jz :0
	mov rdi, rbp
	mov rsi, r12
	call :mixing @Any and comptime args 1.main
	jmp :1
0:	mov rax, 0x00
	mov [rbp], al
1:	add rsp, 0x08
	pop r12
	pop rbp
	pop rbx
	ret
mixing @Any and comptime args 1.main:
	sub rsp, 0x10
	lea rax, [rsp]
	mov rcx, 0x01
	mov [rax], cl
	add esi, 0x05
	mov [rax+0x04], esi
	mov rcx, 0x08
	mov rsi, rax
	mov rdx, rcx
	call :memcpy
	add rsp, 0x10
	ret
main:
	push rbx
	push rbp
	push r12
	push r13
	sub rsp, 0x18
	lea rbx, [rsp+0x08]
	mov rbp, 0x01
	mov [rbx], bpl
	mov rbp, 0x00
	mov [rbx+0x04], ebp
	lea rbp, [rsp]
	mov r12, 0x08
	mov rdi, rbp
	mov rsi, rbx
	mov rdx, r12
	call :memcpy
	lea rbx, [rsp+0x10]
	mov r12b, [rbp]
	mov ebp, [rbp+0x04]
	mov rdi, rbx
	mov rsi, r12
	mov rdx, rbp
	call :mixing @Any and comptime args 1.bind(val: ?i32, f = mixing @Any and comptime args 1.main)
	mov rax, 0x00
	add rsp, 0x18
	pop r13
	pop r12
	pop rbp
	pop rbx
	ret
memcpy: