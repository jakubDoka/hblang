slices 4.equals:
	push rbx
	push rbp
	cmp rsi, rcx
	setnz al
	movzx rax, al
	mov rcx, 0x00
	test al, al
	jz :0
	mov rax, rcx
	jmp :1
0:	cmp rdi, rdx
	setz al
	movzx rax, al
	mov rbx, 0x01
	test al, al
	jz :2
	mov rax, rbx
1:	jmp :5
2:	mov rax, 0x00
6:	cmp rax, rsi
	setz bpl
	movzx rbp, bpl
	test bpl, bpl
	jz :4
	mov rax, rbx
	jmp :5
4:	mov rbp, rdi
	add rbp, rax
	mov r8, rdx
	add r8, rax
	mov bpl, [rbp]
	mov r8b, [r8]
	cmp bpl, r8b
	setnz bpl
	movzx rbp, bpl
	test bpl, bpl
	jz :5
	mov rax, rcx
5:	pop rbp
	pop rbx
	ret
5:	add rax, 0x01
	jmp :6
main:
	push rbx
	push rbp
	sub rsp, 0x28
	lea rbx, [rsp]
	lea rdi, [0x0000000000000007]
	mov [rbx], rdi
	mov rsi, 0x03
	mov [rbx+0x08], rsi
	lea rbp, [rsp+0x10]
	lea rax, [rsp+0x20]
	mov rcx, 0x61
	mov [rax], cl
	mov rcx, 0x62
	mov [rax+0x01], cl
	mov rcx, 0x63
	mov [rax+0x02], cl
	mov [rbp], rax
	mov [rbp+0x08], rsi
	mov rdx, rdi
	mov rcx, rsi
	call :slices 4.equals
	xor al, 0x01
	mov rsi, [rbp+0x08]
	mov rdx, [rbx]
	mov rcx, [rbx+0x08]
	mov rdi, [rbp]
	test al, al
	jz :0
	jmp :1
0:	call :slices 4.equals
	xor al, 0x01
	test al, al
	jz :2
1:	mov rax, 0x01
	jmp :3
2:	mov rax, 0x00
3:	add rsp, 0x28
	pop rbp
	pop rbx
	ret