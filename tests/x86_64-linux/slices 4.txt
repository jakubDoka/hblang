slices 4.equals:
	push rbx
	push rbp
	mov r10, rdi
	mov r9, rsi
	mov r8, rdx
	mov rsi, 0x00
	cmp r9, rcx
	jz :0
	mov rax, rsi
	jmp :1
0:	mov rbp, 0x01
	cmp r10, r8
	jnz :2
	mov rax, rbp
1:	jmp :5
2:	mov rax, 0x00
	mov rbx, rax
6:	cmp rbx, r9
	jnz :4
	mov rax, rbp
	jmp :5
4:	mov rdi, r10
	add rdi, rbx
	mov rdx, r8
	add rdx, rbx
	mov cl, [rdi]
	mov al, [rdx]
	cmp cl, al
	jz :5
	mov rax, rsi
5:	pop rbp
	pop rbx
	ret
5:	mov rax, rbx
	add rax, 0x01
	mov rbx, rax
	jmp :6
main:
	sub rsp, 0x28
	lea rdi, [0x0000000000000007]
	mov [rsp], rdi
	mov rsi, 0x03
	mov [rsp+0x08], rsi
	lea rcx, [rsp+0x20]
	mov rax, 0x61
	mov [rsp+0x20], al
	mov rax, 0x62
	mov [rsp+0x21], al
	mov rax, 0x63
	mov [rsp+0x22], al
	mov [rsp+0x10], rcx
	mov [rsp+0x18], rsi
	mov rdx, rdi
	mov rcx, rsi
	call :slices 4.equals
	xor al, 0x01
	mov rsi, [rsp+0x18]
	mov rdx, [rsp]
	mov rcx, [rsp+0x08]
	mov rdi, [rsp+0x10]
	test al, al
	jz :0
	jmp :1
0:	call :slices 4.equals
	xor al, 0x01
	test al, al
	jz :2
1:	mov rax, 0x01
	jmp :3
2:	mov rax, 0x00
3:	add rsp, 0x28
	ret