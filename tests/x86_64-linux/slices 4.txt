slices 4.equals:
	push rbx
	push rbp
	mov rbp, rsi
	mov rax, rcx
	mov rsi, rdi
	mov rcx, rdx
	cmp rbp, rax
	setnz dl
	movzx rdx, dl
	mov rax, 0x00
	test dl, dl
	jz :0
	jmp :1
0:	cmp rsi, rcx
	setz dl
	movzx rdx, dl
	mov rbx, 0x01
	test dl, dl
	jz :2
	mov rax, rbx
1:	jmp :5
2:	mov rdx, 0x00
6:	cmp rdx, rbp
	setz dil
	movzx rdi, dil
	test dil, dil
	jz :4
	mov rax, rbx
	jmp :5
4:	mov rdi, rsi
	add rdi, rdx
	mov r8, rcx
	add r8, rdx
	mov dil, [rdi]
	mov r8b, [r8]
	cmp dil, r8b
	setnz dil
	movzx rdi, dil
	test dil, dil
	jz :5
5:	pop rbp
	pop rbx
	ret
5:	add rdx, 0x01
	jmp :6
main:
	push rbx
	push rbp
	push r12
	sub rsp, 0x28
	lea rbx, [rsp]
	lea rsi, [0x0000000000000007]
	mov [rbx], rsi
	mov rbp, 0x03
	mov [rbx+0x08], rbp
	lea r12, [rsp+0x10]
	lea rax, [rsp+0x20]
	mov rcx, 0x61
	mov [rax], cl
	mov rcx, 0x62
	mov [rax+0x01], cl
	mov rcx, 0x63
	mov [rax+0x02], cl
	mov [r12], rax
	mov [r12+0x08], rbp
	mov rdi, rsi
	mov rdx, rsi
	mov rsi, rbp
	mov rcx, rbp
	call :slices 4.equals
	xor al, 0x01
	mov rbp, [r12+0x08]
	mov rcx, [rbx]
	mov rdx, [rbx+0x08]
	mov rsi, [r12]
	test al, al
	jz :0
	jmp :1
0:	xchg rdx, rcx
	mov rdi, rsi
	mov rsi, rbp
	call :slices 4.equals
	xor al, 0x01
	test al, al
	jz :2
1:	mov rax, 0x01
	jmp :3
2:	mov rax, 0x00
3:	add rsp, 0x28
	pop r12
	pop rbp
	pop rbx
	ret