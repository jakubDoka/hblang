slices 4.equals:
	cmp rsi, rcx
	jz :0
	xor rax, rax
	jmp :1
0:	cmp rdi, rdx
	jnz :2
	mov rax, 0x01
1:	jmp :7
2:	xor r8, r8
7:	cmp r8, rsi
	jnz :4
	mov rax, 0x01
	jmp :8
4:	mov rcx, rdi
	add rcx, r8
	mov rax, rdx
	add rax, r8
	mov cl, [rcx]
	mov al, [rax]
	cmp cl, al
	jz :6
	xor rax, rax
	jmp :7
6:	inc r8
	jmp :7
8:	ret
7:	jmp :8
main:
	sub rsp, 0x08
	mov byte ptr [rsp], 0x61
	mov byte ptr [rsp+0x01], 0x62
	mov byte ptr [rsp+0x02], 0x63
	lea rdi, [0x0000000000000007]
	lea rdx, [0x0000000000000007]
	mov rsi, 0x03
	mov rcx, 0x03
	call :slices 4.equals
	xor al, 0x01
	test al, al
	jz :0
	jmp :1
0:	lea rdi, [rsp]
	lea rdx, [0x0000000000000007]
	mov rsi, 0x03
	mov rcx, 0x03
	call :slices 4.equals
	xor al, 0x01
	test al, al
	jz :2
1:	mov rax, 0x01
	jmp :3
2:	xor rax, rax
3:	add rsp, 0x08
	ret