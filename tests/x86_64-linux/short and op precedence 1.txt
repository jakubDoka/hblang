short and op precedence 1.foo:
	sub rsp, 0x10
	mov rax, rdi
	mov rcx, rax
	mov [rsp], cx
	mov dl, [rsp+0x01]
	mov rcx, rax
	test cl, cl
	jz :0
	mov rcx, rdx
	jmp :1
0:	xor rax, rax
1:	test al, al
	jz :2
	cmp dl, cl
	setz al
	movzx rax, al
	jmp :3
2:	xor rax, rax
3:	add rsp, 0x10
	ret
main:
	sub rsp, 0x08
	mov byte ptr [rsp], 0x00
	mov di, [rsp]
	call :short and op precedence 1.foo
	test al, al
	jz :0
	mov rax, 0x01
	jmp :1
0:	mov byte ptr [rsp+0x02], 0x01
	mov byte ptr [rsp+0x03], 0x01
	mov di, [rsp+0x02]
	call :short and op precedence 1.foo
	xor al, 0x01
	test al, al
	jz :2
	mov rax, 0x02
1:	jmp :3
2:	xor rax, rax
3:	add rsp, 0x08
	ret