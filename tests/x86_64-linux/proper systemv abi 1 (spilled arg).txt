proper systemv abi 1 (spilled arg).load_of_args:
	mov rax, rdi
	add rax, rsi
	add rax, rdx
	add rax, rcx
	add rax, r8
	mov rdx, [rsp+0x10]
	mov rcx, [rsp+0x08]
	add rax, r9
	add rax, rcx
	add rax, rdx
	ret
proper systemv abi 1 (spilled arg).stack_args:
	mov rdx, [rsp+0x18]
	mov rax, [rsp+0x08]
	mov rcx, [rsp+0x10]
	add rax, rcx
	mov r8, [rsp+0x20]
	add rax, rdx
	mov rdx, [rsp+0x30]
	mov rcx, [rsp+0x28]
	add rax, r8
	add rax, rcx
	add rax, rdx
	add rax, rdi
	add rax, rsi
	ret
main:
	push rbx
	push rbp
	push r12
	sub rsp, 0x68
	mov qword ptr [rsp+0x48], 0x07
	lea rax, [rsp]
	mov qword ptr [rax], 0x06
	lea rcx, [rsp+0x08]
	mov rax, [rsp+0x48]
	mov [rcx], rax
	mov r8, 0x04
	mov r9, 0x05
	mov rsi, 0x01
	mov rdi, 0x00
	mov rdx, 0x02
	mov rcx, 0x03
	call :proper systemv abi 1 (spilled arg).load_of_args
	mov r12, rax
	lea rsi, [rsp+0x50]
	mov qword ptr [rsp+0x50], 0x00
	mov qword ptr [rsp+0x58], 0x01
	mov qword ptr [rsp+0x60], 0x02
	lea rax, [rsp+0x30]
	mov rbp, rax
	mov qword ptr [rsp+0x30], 0x03
	mov qword ptr [rsp+0x38], 0x04
	mov qword ptr [rsp+0x40], 0x05
	mov rax, 0x18
	mov rbx, rax
	lea rdi, [rsp]
	mov rdx, rbx
	call :memcpy
	lea rdi, [rsp+0x18]
	mov rdx, rbx
	mov rsi, rbp
	call :memcpy
	mov rdi, 0x06
	mov rsi, 0x07
	call :proper systemv abi 1 (spilled arg).stack_args
	mov rcx, rax
	mov rax, r12
	sub rax, rcx
	add rsp, 0x68
	pop r12
	pop rbp
	pop rbx
	ret
memcpy: